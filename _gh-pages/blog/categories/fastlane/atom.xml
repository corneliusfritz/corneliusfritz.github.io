<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: fastlane | Artsy Engineering]]></title>
  <link href="https://artsy.github.io/blog/categories/fastlane/atom.xml" rel="self"/>
  <link href="https://artsy.github.io/"/>
  <updated>2021-10-06T21:47:56+02:00</updated>
  <id>https://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS Deploys: Super Weird And Totally Normal]]></title>
    <link href="https://artsy.github.io/blog/2020/03/02/ios-deploys-super-weird-totally-normal/"/>
    <updated>2020-03-02T00:00:00+01:00</updated>
    <id>https://artsy.github.io/blog/2020/03/02/ios-deploys-super-weird-totally-normal</id>
    <content type="html"><![CDATA[<p>Software deploys! What a concept. You have some code running somewhere, and you need to get it running somewhere
else. What could possibly go wrong? While web developers have become accustom to some <em>really slick</em> deploy
processes, iOS developers have to work within some very different constraints.</p>

<p>Today I want to explore the differences between deploying iOS software and front-end/back-end web software. Some of
these differences are inherent to how the code gets executed, and some of the differences are incidental to choices
that Apple has made. These are constraints that iOS developers need to work within. As Artsy has adopted React
Native over the past four years, we have had more and more of our web engineering colleagues contributing to our
iOS app. For these web engineers, getting familiar with the iOS deploy constraints is as important as getting to
know Xcode and CocoaPods.</p>

<!-- more -->


<a name="A.Release.Case.Study"></a>
<h2>A Release Case Study</h2>

<p>We're going to use a case study to frame today's discussion. Artsy's Mobile Experience team recently got a ticket
from our Platform team. The nature of the ticket itself doesn't matter, but it involved a change we were making to
our API. I fixed the bug and submitted a pull request, which quickly got merged. We tested the bug fix in our next
beta deploy, and everything looked fine. Great so far.</p>

<p>Artsy releases iOS software on a two-week release cadence, and this bug fix was scheduled to be released to users
the following week. But our back-end team wanted to quickly deploy that API change, which would require the app bug
fix to get released to users <em>first</em>.</p>

<p>So... what to do?</p>

<p>Do we release off-cadence? Or do we push back on our Platform team and ask them to hold off until the scheduled
release?</p>

<p>Let's actually pause for a moment and consider one of the assumptions we made above. If you're a web engineer, the
idea of releasing only every two weeks might seem pretty strange! I mean, why not release continuously? For
example, Artsy's website gets deployed to our staging environment after every merged pull request, and staging then
gets promoted to production several times a day. This process is generally referred to as "continuous delivery",
and <a href="https://www.thoughtworks.com/insights/blog/case-continuous-delivery">it has a lot of advantages</a>. That's why
it's so common among web engineering teams. So why not use continuous delivery on iOS apps?</p>

<a name="The.Executable.Problem"></a>
<h2>The Executable Problem</h2>

<p>There are two reasons we can't use continuous delivery on iOS. First, continuous delivery is only really possible
when you control where the software gets executed (or, in the case of web front-ends, where the client-side code
gets served from). Artsy controls our own servers, so we can deliver web software continuously. The next time a
user makes a web request, they'll get the updated code. However, the Artsy iOS app runs on our users' devices,
instead. We can't push out updates to users' iPhones or iPads in the same way we can push updates to our servers.</p>

<p>iOS apps are binary executables that are distributed through Apple's App Store, and updates to apps have to be
pulled down by devices. Even if <em>most</em> users have automatic updates turned on, those updates are typically
installed overnight. Consequently, there's quite a lag between when we deploy an iOS update and when users run the
code. While it only takes about a week for 80% of our users to update to the latest version, there's a very long
tail after that.</p>

<p><img src="/images/2020-03-02-ios-deploys-super-weird-totally-normal/graph.png" alt="Graph of in-use versions of Artsy's app, illustrating both the quick adoption of new updates by most users and the long tail of old versions that are never updated" /></p>

<p>iOS software is executed in an environment that we don't control, that we can't push updates to, and most
importantly, that we can't roll back deploys on. If we ship a version of our app with a bug, but then ship an
updated version with a fix right away, there is absolutely no guarantee that users will install that update.
<em>Ever</em>. That means that <em>every</em> deploy we make to our iOS software requires a lot of confidence in that code. In
contrast, rolling back a web deploy is quite painless. If we ship a bug to the web, no problem: just roll back the
deploy, fix the bug, and re-deploy with the fix.</p>

<p>(Note: some readers might be wondering why we don't take advantage of over-the-air updates to our React Native
JavaScript bundle. This is definitely possible, but our app is brownfield with some native code and some React
Native code and we haven't yet built out the infrastructure for this. As more and more code shifts to React Native,
we plan to investigate OTA updates to JavaScript bundles.)</p>

<a name="Apple.s.Platform..Apple.s.Rules"></a>
<h2>Apple's Platform, Apple's Rules</h2>

<p>The second reason to deploy iOS software on a schedule, rather than with continuous delivery, depends on the App
Store review process. This is another big difference that takes web engineers a while to get used to. Whenever we
ship a version of our iOS app, we ship it to Apple for review, and then Apple ships it to our users. I'm not going
to debate the utility of Apple as an intermediary – the fact is that they own the iOS platform and these are the
rules they have chosen. If you want to ship iOS software, then you have to abide by Apple's rules.</p>

<p>App Store review isn't exactly QA. I mean, if we were to ship an app update and it crashes upon launch, Apple isn't
likely to approve that update. But if we have a small bug buried somewhere in the app, we can't expect Apple to
find it. Apple is only testing for adherence to their
<a href="https://developer.apple.com/app-store/review/guidelines/">App Store Review Guidelines</a>. Apple is looking for
things like: is the app trying to steal user data? Is the app displaying objectionable material, given its age
rating? Is the app's description and App Store metadata correct? That kind of stuff.</p>

<p>So not only do iOS software developers need a lot of confidence in every deploy, but they also need to abide by
Apple's guidelines.</p>

<p>Alright. Let's return to the case study from earlier.</p>

<a name="Case.Study.Resolution"></a>
<h2>Case Study Resolution</h2>

<p>We had a bug fix in our app, and getting it deployed was blocking an important change to our back-end API. First,
we had to consider that some users simply wouldn't get the update. We had to ask ourselves if this would block the
back-end change entirely – through open discussions with the team, we decided to move forward. Second, we had to
consider the other work that had been merged since our last release. Were we confident in deploying that work
as-is? And what amount of QA would need to be done to ship those changes as well?</p>

<p>That last point is really interesting because there was actually another option. Rather than deploy the app based
off the current <code>master</code> branch (with the bug fix <em>and</em> other work included), we did something a bit clever.
<a href="https://fastlane.tools">fastlane</a>, the tool we use to automate our iOS deploys, will tag each commit that we
submit to the App Store. So rather than deploy the current <code>master</code> branch, which would require very rigorous QA,
we checked out the previous release tag. We then used
<a href="https://www.atlassian.com/git/tutorials/cherry-pick"><code>git cherry-pick</code></a> to apply <em>only</em> the bug fix changes, and
deployed from there.</p>

<p><img src="/images/2020-03-02-ios-deploys-super-weird-totally-normal/slack.png" alt="Screenshot from Slack where I detailed my plan to cherry-pick the commits" /></p>

<p>This isolated the changes we were making to the app and minimized the amount of QA we needed to feel confident in
our release. Even still, we ran through our usual QA script. As I hope I've demonstrated above, it's always better
to be safe than be sorry when it comes to deploying iOS software.</p>

<p>This <code>git cherry-pick</code> approach has its own trade-offs, but it is very effective in the right circumstance. It's an
approach I've only had to use a few times during my time at Artsy, but it's a good approach to be familiar with.
This situation also highlights a benefit of automating iOS deploys: we know <em>exactly</em> which commit each version of
our app is running, making it easy to <code>git cherry-pick</code> with confidence.</p>

<p>I hope I've illustrated how iOS software is a bit different from web software, both inherently and incidentally.
Many of these same quirks apply to Android deploys as well. Mobile software feels closer to software sold in
shrink-wrapped boxes than it does to Docker images shipped to Kubernetes clusters. And that's okay. Different
platforms will always have different constraints. Hopefully by understanding these constraints, mobile and web
engineers can gain a greater empathy for one another and, ideally, share ideas and solutions so we can all learn
and grown together.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploying your app on a weekly basis via fastlane + Travis CI]]></title>
    <link href="https://artsy.github.io/blog/2017/07/31/fastlane-travis-weekly-deploys/"/>
    <updated>2017-07-31T00:00:00+02:00</updated>
    <id>https://artsy.github.io/blog/2017/07/31/fastlane-travis-weekly-deploys</id>
    <content type="html"><![CDATA[<p>We have a few apps now, but one of them isn't really used by anyone other than developers. This is <a href="https://github.com/artsy/emission/tree/master/Example">our React Native host app</a>. We built our React Native components <a href="/blog/2016/08/24/On-Emission/">as a library</a> to be consumed by our other apps. Our development environment for these components is a unique app that acts as a host for the React Native components. It's effectively a long tableview.</p>

<p>This app is often updated for developers, but never deployed to beta users inside Artsy. So I automated it. Using Travis CI and fastlane. This post covers how I got that set up.</p>

<!-- more -->




<center>
  <img src="/images/fastlane-weekly/screenshot.png" width=300>
</center>


<p>As the JavaScript is continuously deployed, the native side of the app rarely gets a deploy. In order to ensure an up-to-date version of the app, I used the <a href="https://docs.travis-ci.com/user/cron-jobs/">scheduler</a> now available in Travis CI, and Circle CI. This is a perfect use-case for one-off tasks like uploading an app to Apple's Testflight on a weekly basis.</p>

<p>I wanted this to exist outside of our current CI environment for two reasons:</p>

<ul>
<li>Our CI is already <a href="https://github.com/artsy/emission/pull/263">using AppHub</a> to deploy the JavaScript parts of our React Native on a per-commit basis. It's complicated enough as it is, without adding a lot more process.</li>
<li>Our CI is currently running on Linux boxes, and so everything is fast and stable. Deploying using the main repo would force us to use macOS which would slow down our processes.</li>
</ul>


<p>The downside of this choice is that the process of uploading is not inside the main repo, and can go out of sync with the main app.</p>

<a name="Setup"></a>
<h2>Setup</h2>

<p>I created a new repo, and added the <a href="https://github.com/artsy/emission-nebula/commit/4d18a11629e097c71b9a375465c754abf45f62d6">usual LICENSE and README</a>, then started <a href="https://github.com/artsy/emission-nebula/pull/1">working on a PR</a> that added the initial support for CI to run. Here are the general steps I needed to make work:</p>

<ul>
<li>Downloading and setting up the application.</li>
<li>Ensuring signing will work.</li>
<li>Creating the build and shipping it to Testflight.</li>
<li>Notifications that it passed or succeeded.</li>
</ul>


<p>Finally I needed to document the process, which is what you're reading.</p>

<a name="Downloading.and.setting.up.the.application"></a>
<h2>Downloading and setting up the application</h2>

<p>My initial thoughts were to use a submodule, but that option provides little advantage over cloning the repo itself so it's done inline. Our dependencies for the app live in Rubygems (fastlane/CocoaPods), NPM (React Native) and CocoaPods (Artsy Mobile code), so I use the <code>before_install</code> and <code>before_script</code> section of the <code>.travis.yml</code> to set up our dependencies:</p>

<pre><code class="yml"># Use a Mac build please
language: objective-c
osx_image: xcode8.2

# Ensure that fastlane is at the latest version
before_install:
- bundle update

# Let fastlane set up the other dependency managers
before_script:
- bundle exec fastlane setup

# Separate fastlane lanes so that they can be individually
# tested one by one during development
script:
- bundle exec fastlane validate_env_vars
- bundle exec fastlane ci_deploy
</code></pre>

<p>Note the <code>- bundle update</code>. As fastlane works against unofficial iTunes connect which is always changing, it's safer to always use the most recent release.</p>

<a name="Ensuring.signing.will.work."></a>
<h2>Ensuring signing will work.</h2>

<p>This one is a bit tricker, luckily I've already set up one of our apps to use <a href="/blog/2017/04/05/what-is-fastlane-match/">fastlane match</a> and I can re-use that infrastructure. As it is a private repo, Travis did not have access to clone the repo. I fixed this by creating an access token for a user with read-only access to our match-codesigning repo, then exposed this as a private environment variable in CI which the Matchfile uses. E.g.</p>

<pre><code class="ruby">git_url "https://#{ENV['GITHUB_SUBMODULES_USER']}@github.com/artsy/mobile_fastlane_match"

# Instead of 
# git_url "https://github.com/artsy/mobile_fastlane_match"
</code></pre>

<p>This is one of the highlights on fastlane's choice in building a DSL that which sits above a real programming language, you give users a lot of flexibility.</p>

<p>Next up, I added a fastlane lane for code signing, and keychain setup. This just calls two setup functions.</p>

<pre><code class="ruby">lane :setup_signing do
  setup_travis

  match(type: 'appstore')
end
</code></pre>

<a name="Creating.the.build.and.shipping.it.to.Testflight"></a>
<h2>Creating the build and shipping it to Testflight</h2>

<p>This is handled by <a href="https://github.com/fastlane/fastlane/tree/master/gym">fastlane gym</a> at the start of the main lane.</p>

<pre><code class="ruby"># The main job for fastlane in this repo, you can run this on your computer
# You can run it via `bundle exec fastlane ship`
lane :ship do
  # We were having issues with building an a few folders deep.
  # The /Pods bit is because we can rely on it being there, see
  # this link: https://docs.fastlane.tools/advanced/#directory-behavior
  #
  Dir.chdir('../emission/Example/Pods') do
    gym workspace: 'Emission.xcworkspace',
        configuration: 'Deploy',
        scheme: 'Emission'
  end

  # [...]
end
</code></pre>

<p>It uses a scheme for deploys, which prioritises using AppHub over a local React Native server. Gym handles a lot of CLI ugliness for us, and works well.</p>

<p>Sending the app to Testflight involves a a few lines:</p>

<pre><code class="ruby"># Get the last 10 lines of the CHANGELOG for Testflight
changelog = '../emission/CHANGELOG.md'
upcoming_release_notes = File.read(changelog).split("\n### ").first

# Ship to testflight
pilot(changelog: upcoming_release_notes)
</code></pre>

<p>This lets the deploy process figure out what the latest release version is, and how many builds have shipped for that version. Then those can be used to set the build version and create a tag associated with it.</p>

<p><a href="https://github.com/fastlane/fastlane/tree/master/pilot">fastlane pilot</a> is used to send off the compiled build to Testflight.</p>

<a name="Keeping.track.of.deploys"></a>
<h2>Keeping track of deploys</h2>

<p>I don't know when we'll need it today, but it's always good to be able to go back and see what code lines up to every release. To do this I have a few lines of Ruby that creates a tag inside the original Emission repo.</p>

<pre><code class="ruby"># Do a tag, we use a http git remote so we can have push access
# as the default remote for travis is read-only. This needs to be
# inside the emission repo, instead of our own.
Dir.chdir('../emission/Example/') do
  tag = "deploy-#{latest_version}-#{build_version}"
  add_git_tag(key: tag)

  if ENV['GITHUB_SUBMODULES_USER']
    writable_remote = "https://#{ENV['GITHUB_SUBMODULES_USER']}@github.com/artsy/emission.git"
    sh "git remote add http #{writable_remote}"
  else
    sh 'git remote add http https://github.com/artsy/emission.git'
  end
  push_git_tags(remote: 'http')
end
</code></pre>

<a name="Notifications.that.it.passed.or.succeeded."></a>
<h2>Notifications that it passed or succeeded.</h2>

<p>This was easy, I created a new slack inbound web-hook and added that as an environment variable. Then when a build passes we post a notification that there is a new version for everyone in Slack, if the lane fails then it will also post to slack. To ensure we keep on top of it, during development this was commented out.</p>

<pre><code class="ruby"># If the weekly task fails, then ship a message
error do |_, exception|
   slack message: "Error Deploying Emission: #{exception}",
         success: false,
         payload: { Output: exception.error_info.to_s }
end
</code></pre>

<p>That wraps up setting up the CI. Once you've confirmed everything has worked, you can add the scheduler inside Travis and expect to see a slack notification in a week.</p>

<p>By the end of the process, our <code>Fastfile</code> looked like:</p>

<pre><code class="ruby"># This is documented in the Artsy Blog: 
# http://artsy.github.io/blog/2017/07/31/fastlane-travis-weekly-deploys/
lane :setup do
  Dir.chdir('..') do
    sh 'rm -rf emission' if Dir.exist? 'Emission'
    sh 'git clone https://github.com/artsy/emission.git'
    Dir.chdir('emission') do
      sh '. ~/.nvm/nvm.sh &amp;&amp; nvm use &amp;&amp; npm install yarn --global &amp;&amp; yarn install'
    end

    Dir.chdir('emission/Example') do
      sh 'pod repo update'
      sh 'pod install'
    end
    stamp_plist
  end
end

# Lets the CI run a bunch of jobs, and share ENV vars between them
lane :ci_deploy do
  setup_signing
  stamp_plist
  ship
end

# The main job for fastlane in this repo, you can run this on your computer
# You can run it via `bundle exec fastlane ship`
lane :ship do
  # We were having issues with building an a few folders deep.
  # The /Pods bit is because we can rely on it being there, see
  # this link: https://docs.fastlane.tools/advanced/#directory-behavior
  #
  Dir.chdir('../emission/Example/Pods') do
    gym(workspace: 'Emission.xcworkspace',
        configuration: 'Deploy',
        scheme: 'Emission')
  end

  # Get the last 10 lines of the CHANGELOG for Testflight
  changelog = '../emission/CHANGELOG.md'
  upcoming_release_notes = File.read(changelog).split("\n### ").first

  # Ship to testflight
  pilot(changelog: upcoming_release_notes)

  # Log into iTunes connect, get the latest version of the app we shipped, and how many builds we've sent
  Spaceship::Tunes.login(ENV['FASTLANE_USERNAME'], ENV['FASTLANE_PASSWORD'])
  app = Spaceship::Tunes::Application.find('net.artsy.Emission')
  latest_version = app.build_trains.keys.sort.last
  train = app.build_trains[latest_version]
  build_version = train.builds.count + 1

  # Do a tag, we use a http git remote so we can have push access
  # as the default remote for travis is read-only. This needs to be
  # inside the emission repo, instead of our own.
  Dir.chdir('../emission/Example/') do
    tag = "deploy-#{latest_version}-#{build_version}"
    add_git_tag(key: tag)

    if ENV['GITHUB_SUBMODULES_USER']
      writable_remote = "https://#{ENV['GITHUB_SUBMODULES_USER']}@github.com/artsy/emission.git"
      sh "git remote add http #{writable_remote}"
    else
      sh 'git remote add http https://github.com/artsy/emission.git'
    end

    push_git_tags(remote: 'http')
  end

  slack message: 'There is a new Emission beta available on Testflight.',
        payload: {
          'Version' =&gt; latest_version,
          "What's new" =&gt; upcoming_release_notes
        },
        default_payloads: []
end

# In case you need to update the signing profiles for this app
lane :update_signing do
  match(type: 'appstore')
end

# Used by CI, will not sneakily update (the CI only has read-only access to the repo anyway)
lane :setup_signing do
  setup_travis
  match(type: 'appstore')
end

# Minor plist modifications
lane :stamp_plist do
  plist = 'emission/Example/Emission/Info.plist'

  # Increment build number to current date
  build_number = Time.new.strftime('%Y.%m.%d.%H')
  `/usr/libexec/PlistBuddy -c "Set CFBundleVersion #{build_number}" "#{plist}"`
end

# Mainly so we don't forget to include these vars in the future
lane :validate_env_vars do
  unless ENV['FASTLANE_USERNAME'] &amp;&amp; ENV['FASTLANE_PASSWORD'] &amp;&amp; ENV['MATCH_PASSWORD']
    raise 'You need to set FASTLANE_USERNAME, FASTLANE_PASSWORD and MATCH_PASSWORD in your environment'
  end

  unless ENV['SLACK_URL']
    raise "You need to set SLACK_URL (#{ENV['SLACK_URL']}) in your environment."
  end
end

# If the weekly task fails, then ship a message, a success would also send
error do |_, exception|
  slack(message: "Error Deploying Emission: #{exception}",
        success: false,
        payload: { Output: exception.error_info.to_s })
end
</code></pre>

<p>Automatically deploying is a good pattern for encouraging more deploys of an app which has only been deployed once. It's a pattern we could also move to in some of our other apps too, if it feels good. If you're interested in if something has changed since this post was authored, the repo is here: https://github.com/artsy/emission-nebula so you can read out the Fastfile and we'll answer questions you have inside GitHub issues on it.</p>

<p>The most annoying part about building deployment changes are that an iteration takes ~20 minutes, so make sure you also have another (easily interrupted) task to do at the same time.</p>

<p>The second most annoying is that it took months to eventually get this right - so I owe Felix Krause a big thanks for sitting down and pairing with me, we figuring out that <code>xcodebuild</code> can create empty archive issues when you run projects that have the xcproject/xcworkspace a few levels deep.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What is fastlane match?]]></title>
    <link href="https://artsy.github.io/blog/2017/04/05/what-is-fastlane-match/"/>
    <updated>2017-04-05T12:17:00+02:00</updated>
    <id>https://artsy.github.io/blog/2017/04/05/what-is-fastlane-match</id>
    <content type="html"><![CDATA[<p>Like anyone working on a non-trivial app in the iOS world who values their time, we use fastlane. <a href="https://fastlane.tools">fastlane</a> is a suite
of tools that makes it much simpler to automate the very manual processes provided by Apple for deployment.</p>

<p>We've adopted it in a relatively piece-meal manner in different projects, converting custom in-house code to something
provided by the gem.  Over time we found what pieces of the suite work for us. <a href="https://github.com/artsy/energy/pull/266">I've adopted another today</a>: <a href="https://github.com/fastlane/fastlane/tree/master/match">match</a>.</p>

<p>match automates setting up your iOS projects for code signing. One of the most arduous orthogonal tasks which every dev team learns and then forgets.</p>

<p>In using match, we have given away a bit of control with code signing, and so this post is going to dig into; what we used
to have, and how it works now with match instead.</p>

<!-- more -->


<p>When match came out, I knew this was a 🌟 idea.</p>

<ul>
<li>Automatically generate the right certificates and keys for your different apps and environments.</li>
<li>Take all your developer certificates and keys, move them to a central place accessible via private git repos.</li>
<li>Encrypt all your certs and keys, the team just needs to share one password.</li>
<li>Migrate all of those keys on both the developer's and CI's computers.</li>
</ul>


<p>You can now have a consistent signing setup between how you work, and how your CI runs. After understanding this, I migrated
Artsy's app store apps to deploy via <a href="https://circleci.com">Circle CI</a>. We initially gave match a shot, but ended up having issues with supporting
multiple apps. So, I replicated the core ideas in match into our Fastfile. It looked like this:</p>

<pre><code class="ruby">lane :setup_for_app_store do
  app_name = "eigen"
  signing_root = "signing"

  `git clone https://github.com/artsy/mobile_code_signing.git #{signing_root}`

  # prints out the codesigning identities
  system "security find-identity -v -p codesigning"

  # Install the iOS distribution certificate, -A
  system "security import #{signing_root}/ios_distribution.cer  -k ~/Library/Keychains/login.keychain -A"

  # Move our provisioning profile in
  profile_path = File.expand_path("~") + "/Library/MobileDevice/Provisioning Profiles/"
  destination = profile_path + "/" + app_name + ".mobileprovision"
  profile = Dir.glob(signing_root + "/profiles/" + app_name + "/*").first

  # Ensure folder exists
  unless File.directory?(profile_path)
    FileUtils.mkdir_p(profile_path)
  end

  # Migrate it in
  FileUtils.copy profile, destination
  puts "Installed Profile"

  # Install the key
  key = Dir.glob(signing_root + "/keys/" + app_name + "/*").first
  system "security import #{key} -k ~/Library/Keychains/login.keychain -P #{ENV['MATCH_PASSWORD']}  -A "

  # prints out the codesigning identities
  system "security find-identity -v -p codesigning"

  # Clean-up
  `rm -rf #{signing_root}`
end
</code></pre>

<p>Pretty neat, huh? It handles the centralization and migration of certificates. The trade-off against match is:</p>

<ul>
<li>We continue to maintain our own certificates, keys and provisioning profiles.</li>
<li>There is no easy way to update these.</li>
<li>There is tooling which makes it easy to see the state of all the code signing process.</li>
</ul>


<p>A year later, on a project which gets no-where near as much developer attention, I discovered that we had got multiple
parts of the certs, keys and profiles wrong when updating our central repo. So, for <a href="http://folio.artsy.net">this project</a>, I have switched to use match.</p>

<hr />

<a name="So.how.does.it.work.now."></a>
<h1>So how does it work now?</h1>

<p>First, I ran <code>bundle exec fastlane appstore</code> and <code>bundle exec fastlane dev</code>.</p>

<p>This creates the certificates, keys and profiles on iTunes connect and gives you output similar to this:</p>

<pre><code class="sh">
+-----------------------+------------------------------------------------+
|                        Summary for match 2.25.0                        |
+-----------------------+------------------------------------------------+
| readonly              | true                                           |
| git_url               | https://github.com/artsy/mobile_fastlane_match |
| type                  | appstore                                       |
| git_branch            | master                                         |
| app_identifier        | sy.art.folio                                   |
| username              | it@artsymail.com                               |
| keychain_name         | login.keychain                                 |
| team_id               | 23KMWZ572J                                     |
| team_name             | Art.sy Inc.                                    |
| verbose               | false                                          |
| force                 | false                                          |
| skip_confirmation     | false                                          |
| shallow_clone         | false                                          |
| force_for_new_devices | false                                          |
| skip_docs             | false                                          |
| platform              | ios                                            |
+-----------------------+------------------------------------------------+

+-------------------+-----------------------------------------------+
|                       Installed Certificate                       |
+-------------------+-----------------------------------------------+
| User ID           | 23KMWZ572J                                    |
| Common Name       | iPhone Distribution: Art.sy Inc. (23KMWZ572J) |
| Organisation Unit | 23KMWZ572J                                    |
| Organisation      | Art.sy Inc.                                   |
| Country           | US                                            |
| Start Datetime    | Apr  4 13:59:06 2017 GMT                      |
| End Datetime      | Apr  4 13:59:06 2018 GMT                      |
+-------------------+-----------------------------------------------+

+---------------------+-----------------------------------------+-------------------------------------------------------------------------------------------------------------+
|                                                                       Installed Provisioning Profile                                                                        |
+---------------------+-----------------------------------------+-------------------------------------------------------------------------------------------------------------+
| Parameter           | Environment Variable                    | Value                                                                                                       |
+---------------------+-----------------------------------------+-------------------------------------------------------------------------------------------------------------+
| App Identifier      |                                         | sy.art.folio                                                                                                |
| Type                |                                         | appstore                                                                                                    |
| Platform            |                                         | ios                                                                                                         |
| Profile UUID        | sigh_sy.art.folio_appstore              | b045df0f-a691-4b7a-ac34-8349a3684030                                                                        |
| Profile Name        | sigh_sy.art.folio_appstore_profile-name | match AppStore sy.art.folio                                                                                 |
| Profile Path        | sigh_sy.art.folio_appstore_profile-path | /Users/orta/Library/MobileDevice/Provisioning Profiles/b045df0f-a691-4b7a-ac34-8349a3684030.mobileprovision |
| Development Team ID | sigh_sy.art.folio_appstore_team-id      | 23KMWZ572J                                                                                                  |
+---------------------+-----------------------------------------+-------------------------------------------------------------------------------------------------------------+
</code></pre>

<p>Which at a glimpse gives a lot of the most useful information about how all the pieces come together. The new repo looks like this:</p>

<pre><code class="sh">$ tree mobile_fastlane_match

├── README.md
├── certs
│   ├── development
│   │   ├── P4K6FACAUD.cer
│   │   └── P4K6FACAUD.p12
│   └── distribution
│       ├── N5BMJ28RQ2.cer
│       └── N5BMJ28RQ2.p12
├── match_version.txt
└── profiles
    ├── appstore
    │   └── AppStore_sy.art.folio.mobileprovision
    └── development
        └── Development_sy.art.folio.mobileprovision
</code></pre>

<a name="So..what.is.Match.doing.here."></a>
<h2>So, what is Match doing here?</h2>

<ol>
<li><p>match creates a new key (the <code>*.p12</code>) - normally you would generate one of these through Keychain, and the entire team would
to share this. We keep ours in team <a href="http://1password.com">1Password</a>. It needs to be used consistently when request certificates from Apple
though the "Request a Certificate from a Certificate Authority" part of getting your certs set up.</p></li>
<li><p>Using <a href="https://github.com/fastlane/fastlane/tree/master/cert">cert</a>: match will use this key <a href="https://github.com/fastlane/fastlane/blob/14dea61e4c81bf9be13bb86c09aa225c6e572618/cert/lib/cert/runner.rb#L141">to create a signing request</a> for you.</p></li>
<li><p>Using <a href="https://github.com/fastlane/fastlane/tree/master/cert">cert</a>: match will generate a certificate for <a href="https://github.com/fastlane/fastlane/blob/14dea61e4c81bf9be13bb86c09aa225c6e572618/cert/lib/cert/runner.rb#L79">development or distribution</a> for you.</p></li>
<li><p>Using <a href="https://github.com/fastlane/fastlane/tree/master/cert">cert</a>: match will <a href="https://github.com/fastlane/fastlane/blob/14dea61e4c81bf9be13bb86c09aa225c6e572618/match/lib/match/runner.rb#L133">generate a Provisioning Profile</a> using your certificate and data pulled from your Xcode Project.
In my case, for development and distribution.</p>

<p>These profiles are tied directly to one app and the certificate in step 3. For development, all devices in the dev center are also added.</p></li>
<li><p>These files are then installed in their various methods.</p></li>
<li><p>These files are then moved into your git repo, a commit is made for you, then pushed and the repo is removed from your computer.</p></li>
</ol>


<p>This process is nice, because this ^ is a lot of work. I only had to run a command.</p>

<p>It would take at about 30 minutes to do this if I knew exactly what I wanted through the web interface + Keychain.</p>

<p>We currently need to do this for every app. This works fine for the app where we are deploying multiple betas a month,
but for one when we're deploying <em>maybe</em> a beta once a month or two (<em>eek! sorry...</em>) then it feels like every time you've come
back to do some work, the world has shifted a bit.</p>

<p>We do lose the fact that we know someone has specifically set everything up to work right at some point, but given how
Xcode updates, <a href="http://stackoverflow.com/questions/4057241/iphone-what-is-a-wwdr-intermediate-certificate">WWDR updates</a> and certificate expirations tend to crop up - it can be frustrating to maintain.</p>

<p>So would I move <a href="https://github.com/artsy/eigen">Eigen</a> to match? Maybe, next time something breaks. Till then I think new apps, and less-often updated
apps should use match.</p>
]]></content>
  </entry>
  
</feed>
