<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: team | Artsy Engineering]]></title>
  <link href="https://artsy.github.io/blog/categories/team/atom.xml" rel="self"/>
  <link href="https://artsy.github.io/"/>
  <updated>2021-10-06T21:47:56+02:00</updated>
  <id>https://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Strategies For Small, Focused Pull Requests]]></title>
    <link href="https://artsy.github.io/blog/2021/03/09/strategies-for-small-focused-pull-requests/"/>
    <updated>2021-03-09T00:00:00+01:00</updated>
    <id>https://artsy.github.io/blog/2021/03/09/strategies-for-small-focused-pull-requests</id>
    <content type="html"><![CDATA[<p>A common suggestion for improving pull requests (PRs) is to "make your PR small and focused". I myself gave this suggestion in <a href="https://artsy.github.io/blog/2020/08/11/improve-pull-requests-by-including-valuable-context/">a recent article on this very blog about including context in PRs</a>.</p>

<p>Like most internet advice, this can feel like the <a href="https://knowyourmeme.com/memes/how-to-draw-an-owl">"draw the rest of the owl"</a> meme. Even if we're in agreement that I <em>should</em> make a PR smaller...<strong><em>how</em></strong> do I do it? How do I avoid a big PR when there's a lot of cross-cutting changes to make? How do I create small, focused units of work when I'm building a large feature? How can I overcome my perfectionism and submit a PR that feels incomplete to me because the edges aren't all polished?</p>

<!-- more -->


<a name="What.is..small.and.focused.."></a>
<h2>What is "small and focused"?</h2>

<p>Not all small PRs are focused. I might sneak five unrelated one-line changes into a PR. While it feels like that will enable me to move quickly, it also runs the risk of four unrelated changes being held up in review because the other is controversial.</p>

<p>Not all focused PRs are small. I might put an entire feature in one PR, and while it is focused, it's still going to be difficult for you to review the large amount of changes thoroughly.</p>

<p>To make our PR reviewers' jobs easier, we're looking for the intersection of small <em>and</em> focused. Changes that are cohesive and without distractions. Code that accomplishes one small thing.</p>

<p>Note that the recommendation for "small and focused" PRs does <strong>not</strong> include the word "complete". I'm a perfectionist and I like my work to be very polished before it's done, but when we're iterating quickly the polish can come in a follow-up PR. This is the biggest challenge I've had as an Artsy engineer — finding the balance between polish and iteration. Artsy's core values include <a href="https://github.com/artsy/README/blob/ccfbba13ead7cb6586d2d9bf088e5180907be07b/culture/what-is-artsy.md#impact-over-perfection">Impact Over Perfection</a> but my personal values include "make things <em>real good</em>" and it can be hard for me to navigate that tension.</p>

<a name="Integrating.code.a.little.at.a.time"></a>
<h3>Integrating code a little at a time</h3>

<p>A caveat: the recommendations in this article assume you can integrate code a little bit at a time. I've worked on teams and projects where we used very long-lived branches for features or even epic — I know those environments exist. This article is probably not the one that will convince you to move to <a href="https://trunkbaseddevelopment.com/">trunk-based development</a>; it also might be less useful without trunk-based development.</p>

<p>Having said that, even with long-lived feature branches you can introduce code <em>into those branches</em> a little bit at a time. PRs can be opened against <em>any</em> branch, not just <code>main</code>.</p>

<p>A couple strategies we use at Artsy for integrating code a little bit at a time:</p>

<ul>
<li><strong><a href="https://trunkbaseddevelopment.com/feature-flags/">Feature toggles</a></strong>. <a href="https://artsy.github.io/blog/2020/12/31/echo-supporting-old-app-versions/">Ash wrote about Echo</a>, a service for toggling features on mobile devices, but we have additional ways for enabling/disabling features at the system <em>or</em> user level. When we introduce new code we can hide it behind a feature flag until we're ready for everyone to see it.</li>
<li><strong>"Hidden" routes</strong>. Often when we redesign or modernize an existing route on Artsy.net we'll create a <em>second</em> similar route. We hide the in-progress page behind that new route and don't share it until it's ready. 🤫</li>
</ul>


<p>Armed with tools for integrating code incrementally, here are some strategies for reducing the size and scope of a PR. I'm not suggesting you use these strategies universally, but if you think you're headed toward a very large PR, these are some things to try.</p>

<a name="Start.with.small.scope.....slice.your.stories.small"></a>
<h2>Start with small scope — slice your stories small</h2>

<p>One of the most valuable lessons I learned as a consultant with a company focused on agile development is that you can almost always slice a story smaller. You can do this by sacrificing quality, but you can also (and probably should) do it by cutting scope. We can ship a new screen for our app sooner if we focus on building the most absolutely critical features first, and follow up with the valuable-but-not-critical features later.</p>

<p>There are many ways to break a story smaller, and all of them enable you to integrate code sooner in the form of smaller PRs:</p>

<ul>
<li>Separate CRUD (Create, Read, Update, Delete) operations and ship them one at a time</li>
<li>Separate by user role</li>
<li>Separate individual edge cases</li>
<li>Separate a simplified experience from an enhanced version</li>
</ul>


<p>Think of these smaller scoped features as self-contained vertical slices of functionality. As each one is released, users can take advantage of them, and your team can start building the next slice.</p>

<a name="PR.by.architectural.layer"></a>
<h2>PR by architectural layer</h2>

<p>Rather than building an entire feature end-to-end before creating a pull request, consider integrating one layer at a time. Embrace the boundaries between the front and back ends of your code — submit a PR to introduce changes to the API, and once it's merged follow up with another PR to introduce changes to the UI.</p>

<p>Depending on the architecture of your system, you might already be forced to this. At Artsy, our <a href="https://github.com/artsy/force">web app lives in one repo</a>, our <a href="https://github.com/artsy/metaphysics">GraphQL endpoint lives in another</a>, and many services are separated into repositories behind that. We <em>must</em> integrate our features one layer at a time. Here's an example where <a href="https://artsy.github.io/author/matt/">Matt</a> <a href="https://github.com/artsy/metaphysics/pull/2819/files">added a field to our API</a> in one PR, and <a href="https://github.com/artsy/force/pull/6613">propagated it to the UI</a> in a separate PR. Even if you don't have a repository boundary between your API and your UI, splitting PRs at this logical boundary can help make them more digestible.</p>

<p>The suggestion to PR by architectural layer is not in conflict with slicing stories small — in fact, these two strategies complement each other nicely. A PR that contains multiple features but only one layer is probably large enough to be difficult to review; so is a PR that contains one feature end-to-end. A PR containing one layer of one feature can be easier to review.</p>

<a name="Build.a.walking.skeleton"></a>
<h2>Build a walking skeleton</h2>

<p>A <a href="walking-skeleton">walking skeleton</a> is a bare-bones, stripped down implementation of your feature from end-to-end. It connects the UI all the way to the data source. Very little of the feature is presented, but what is there is fully functional.</p>

<p>Start a new feature with a walking skeleton PR to demonstrate connectivity of the pieces involved. It won't do very much — maybe it only displays one field — but that's okay because no one's going to see it yet. The important thing is that the moving pieces are all connected — the database, the API, the UI.</p>

<p>Once a walking skeleton PR is merged, you can start filling in the skeleton. Each new sub-feature can be its own PR.</p>

<p>This is a great approach if your team is looking to swarm on a feature. If we all work on our own sub-features without first merging a walking skeleton, we're likely to face some intense merge conflict headaches when we realize we've all connected the full stack in slightly different ways. Starting with a walking skeleton removes a lot of those merge conflicts, because we're mostly bolting fields on to existing infrastructure along the way.</p>

<p><a href="https://github.com/artsy/relay-workshop/pull/1">This PR</a> is an example of a walking skeleton. My goal was to stand up an app that connected <a href="https://reactjs.org/">React</a>, <a href="https://relay.dev/">Relay</a>, and <a href="https://www.typescriptlang.org/">TypeScript</a>. <a href="https://github.com/artsy/relay-workshop/pull/1/files#diff-26ad4b834941d9b19ebf9db8082bd202aaf72ea0ddea85f5a8a0cb3c729cc6f2R25">The actual app doesn't display very much</a> — just enough to prove that the pieces were all working.</p>

<a name="Separate.risky.controversial.work.from.routine.work"></a>
<h2>Separate risky/controversial work from routine work</h2>

<p>It's not always possible to identify ahead of time which work will prompt more discussion during review, but sometimes it's obvious. Novel work that takes thoughtful consideration of multiple approaches is much more likely to invite feedback than work that follows existing patterns.</p>

<p>Routine implementation can be a noisy distraction in a PR that also contains a unique function that you really want reviewers to see. You should point out the unique bits in the PR body if they're combined, but you also might consider separating the less-interesting implementation into its own PR.</p>

<p>The worst review you can get on a PR that contains both novel and routine work is "LGTM!" (looks good to me). It likely means the reviewer couldn't separate the signal from the noise and overlooked the bits that required more thought and effort.</p>

<a name="Separate.infrastructural.work.from.implementations"></a>
<h2>Separate infrastructural work from implementations</h2>

<p>A <a href="https://en.wikipedia.org/wiki/T-shaped_skills">t-shaped person</a> is someone with a lot of shallow experience in many areas, and deep expertise in one or a few areas. Their skills are wide at the base, and tall and narrow in their area of focus.</p>

<p>Code can have a similar shape. Infrastructural work tends to be wide and shallow — it touches a lot of places in your code, but it doesn't go deep in any of them. Implementation work tends to be the opposite — it doesn't affect the entire app, but it goes very deep for one feature.</p>

<p>We probably review infrastructural changes differently than we review implementation changes:</p>

<ul>
<li><p>Infrastructural work deserves scrutiny for the abstractions it introduces and how it might affect performance or future implementations. These kinds of changes introduce new patterns to the codebase and we want to make sure they're useful and usable patterns.</p></li>
<li><p>An individual implementation gets more scrutiny on user-facing details. It's probably combining <em>existing</em> patterns, so we'll spend less time looking at abstractions. We'll spend more time confirming it works for our users.</p></li>
</ul>


<p>When a large PR combines wide, shallow, abstract work with deep, narrow, concrete work, it requires the reviewer to shift between two different mindsets. You might consider breaking your PR into two: one containing the wide infrastructural work, and one containing the deep implementation work. This allows reviewers to focus on abstractions in one PR and user-facing details in the other.</p>

<p>Some examples of infrastructural changes that could be separated from implementation work:</p>

<ul>
<li>We introduced a seam to the code in order to make room for our implementation.</li>
<li>We updated a dependency to take advantage of a new feature.</li>
<li>We refactored before we started our implementation.</li>
</ul>


<a name="Separating.an.already-large.PR"></a>
<h2>Separating an already-large PR</h2>

<p>It's natural for PRs to grow large. <a href="https://thedecisionlab.com/biases/optimism-bias/">Optimism bias</a> diminishes our ability to estimate work often resulting in more code changes than we expected. A feature seems like it won't take much work until you get deeper and find complexity in places you hadn't considered. There's a lot of uncertainty when you start working on a feature and we'd need to model the entire problem to completion to know what the PR was going to look like before we started. A PR seems like it will be small until suddenly...it isn't anymore.</p>

<p>This is what usually prevents developers from separating PRs — by the time you recognize the PRs could be de-tangled, it seems like a lot of effort to de-tangle them.</p>

<p>When you've got a PR/branch that contains multiple lines of work and you want to separate them, <a href="https://www.atlassian.com/git/tutorials/rewriting-history/git-rebase"><code>git rebase</code></a> is your best friend. Rebasing enables you to rename, reorder, combine, and separate commits. Use <code>git rebase</code> to group your commits into one set for each branch you want to extract, and submit a PR for each smaller set of changes.</p>

<p>Good commit hygiene makes it easier to rebase commits. Commit small units of work so that they can be re-ordered and grouped, and apply clear messages to each commit in case you need to move it. While you might not <em>always</em> separate/rebase PR branches, you'll appreciate small commits with clear messages when you do.</p>

<a name="Small.PRs.start.long.before.the.work.starts"></a>
<h2>Small PRs start long before the work starts</h2>

<p>The size of a pull request can be influenced long before the PR is opened. Slice features small in your product backlog; make small commits along the way; combine small commits into small pull requests. Among other benefits, a focus on breaking work into small parts will make it easier to review your changes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Asking for Help Strengthens Engineering Teams]]></title>
    <link href="https://artsy.github.io/blog/2021/02/11/asking-for-help/"/>
    <updated>2021-02-11T00:00:00+01:00</updated>
    <id>https://artsy.github.io/blog/2021/02/11/asking-for-help</id>
    <content type="html"><![CDATA[<p>I know that for many developers, especially those early in their careers, asking for help can be intimidating. I
often fear wasting someone’s time or exposing myself as less skilled or smart than my team initially thought.</p>

<p>In my first month as a software engineer at Artsy (and barely six months into life as an engineer after
<a href="https://medium.com/swlh/how-losing-my-job-helped-me-find-my-way-back-8c8f86552acc">transitioning from a career in communications</a>), I was struggling
through a ticket assigned to me as a “good first issue.” (The team estimated the task to be straightforward enough
for someone new to the team.) After a few hours stumbling between the ticket, my code, and Google, I made very
little progress.</p>

<!-- more -->


<p>Early and often, my fellow engineers at Artsy encourage me to ask for help when I hit roadblocks. Even with the
support explicitly offered to me, I was shaky. The extra 10 seconds it took to type out my question in Slack was
just enough time for me to chicken out.</p>

<p>Opening up with my team members about my concerns, I learned that asking for help is not just for me but ultimately
benefits my team. Sharing their insights below, I hope other engineers, early-career or not, feel empowered to ask
questions, stay curious, and prioritize learning for themselves and their team — all hallmarks of great engineers.</p>

<a name="Why.It...s.So.Hard.to.Ask.For.Help"></a>
<h2>Why It’s So Hard to Ask For Help</h2>

<p>Working in tech and as an engineer (and even in <a href="https://medium.com/better-programming/why-women-dont-pursue-software-engineering-17d0dead24e9">undergraduate computer science
classes</a>,) I often felt surrounded by people smarter than me.
Operating alongside peers who are excelling motivates me to set the bar higher for myself. But at times, it can
also be intimidating. There is a reason that imposter syndrome is so pervasive in tech industry discourse. (A 2018
study found that <a href="https://www.cnet.com/news/tech-employees-likely-to-suffer-from-impostor-syndrome/">58% of tech workers suffer from
it</a>.) The fear of being “found out” as an imposter,
inadequate, or less impressive can be especially acute for those early in their career and from <a href="https://zora.medium.com/why-imposter-syndrome-is-worse-for-women-of-color-3bcf37335405">underrepresented
groups</a>.</p>

<p>Like other VC-backed companies, Artsy is working toward aggressive business targets and ships software at a high
velocity. At high-growth companies, tight deadlines and high-energy cultures make it tempting to shy away from hard
problems and to let the more senior people tackle the tough challenges. But these moments are critical for growth
and learning across the team.</p>

<p><figure class="illustration">
    <a target="_blank" href="https://www.artsy.net/artwork/pipilotti-rist-help-me">
        <img src="https://d32dm0rphc51dk.cloudfront.net/P24AUuVFX50Tr2Q6w58-fQ/large.jpg">
    </a>
    <figcaption>Pipilotti Rist, Help me, 2016, Hauser &amp; Wirth, available on Artsy
    </figcaption>
</figure></p>

<a name="Rethinking.Productivity"></a>
<h2>Rethinking Productivity</h2>

<p>On Artsy’s engineering team, we put a lot of energy into optimizing developer workflows and communication channels.
While asking for help seemed counter to productivity, my team helped me see that the opposite is true: Encouraging
engineers to support one another is integral to building an effective engineering organization.</p>

<p>Pair programming is growing in popularity, not because society is becoming more kind and patient, but because it’s
good for business. Teams in synergy can <a href="https://martinfowler.com/articles/on-pair-programming.html">ship higher-quality code more quickly</a>.</p>

<p>Because teaching is one of the best ways to become an expert, a more experienced engineer can level up when pairing
with a less experienced engineer. Teaching solidifies understanding, reveals gaps in knowledge, and opens up new
questions for exploration. Recently, a senior engineer shared that they never questioned something in our codebase
until I prompted them to take a closer look. We deepened our understanding together.</p>

<p>Providing help also cultivates an engineer’s mentoring skills, which is especially important if they aim for
management or leadership roles.</p>

<p>Finally, a lot of people enjoy helping others for the pure reason that it feels good. Studies show that a majority
of workers prioritize meaning in their work over salary and that meaningful work translates to greater retention
and productivity. (<a href="https://hbr.org/2018/11/9-out-of-10-people-are-willing-to-earn-less-money-to-do-more-meaningful-work">Harvard Business Review</a> goes
so far as attaching a dollar sign to meaningful work: they estimate highly meaningful work generates an extra
$9,078 per worker per year and saves an average of $6.43 million in annual turnover-related costs for every 10,000
workers.) All good arguments for engaging in collaborative and empathetic workflows.</p>

<a name="Building.Community.and.Scaling.Knowledge"></a>
<h2>Building Community and Scaling Knowledge</h2>

<p>Building a culture of collaboration is particularly challenging, especially for distributed teams and those working
remotely during the pandemic. Pair programming provides opportunities for connecting, which can reverberate
throughout an organization.</p>

<p>Learning also has a network effect, so knowledge scales exponentially. If someone teaches me a new concept, I am
now empowered to share the knowledge with others, and then they can then spread that knowledge even further.</p>

<p>Put simply by one of my coworkers: Learning is contributing.</p>

<p><figure class="illustration">
    <a target="_blank" href="https://www.artsy.net/artwork/richard-artschwager-question-mark">
        <img src="https://d32dm0rphc51dk.cloudfront.net/fccQIzHtxIwf2eHTrEg0Dw/large.jpg">
    </a>
    <figcaption>Richard Artschwager, Question Mark, 2001, Gagosian, available on Artsy
    </figcaption>
</figure></p>

<a name="Why.Prioritizing.Your.Growth.is.Okay"></a>
<h2>Why Prioritizing Your Growth is Okay</h2>

<p>My natural tendency is to want to give more than I ask. But for all early-career engineers, it is also normal to
need a lot of help at the beginning. I need to trust that our recruitment team knew to ask the right questions to
make an informed decision to hire me — the real me, beginner and all. The fastest way to improve is to tackle
difficult problems head-on and ask questions when I need support. Investing in my learning at this point in my
career will pay dividends to my team in the months and years to come.</p>

<p>So yes, I went ahead and pressed send on that Slack to ask for help.</p>

<blockquote><p><em>This post originally appeared on Anna's blog on <a href="https://anna-carey.medium.com/">Medium</a>.</em></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Improve Pull Requests By Including Valuable Context]]></title>
    <link href="https://artsy.github.io/blog/2020/08/11/improve-pull-requests-by-including-valuable-context/"/>
    <updated>2020-08-11T00:00:00+02:00</updated>
    <id>https://artsy.github.io/blog/2020/08/11/improve-pull-requests-by-including-valuable-context</id>
    <content type="html"><![CDATA[<p>Code review is an engineering process that has benefited greatly from a move toward asynchronous communication.
Long ago, engineering teams would sit in a room with code on a projector to review changes together. 😱 For many
teams this led to batching code reviews or even skipping them altogether. 😱😱</p>

<p>Today, most engineering teams use incredible tools like GitHub or GitLab to review changes through Pull Requests
(PRs). The greatest advantage of PRs is that the review can happen when it's convenient for the reviewer:
asynchronously. Asynchronous communication isn't all sunshine and unicorns, though. Notably, it lacks the ability
to course-correct when context is misunderstood.</p>

<!-- more -->


<p>When you're in a synchronous conversation with someone, it doesn't take much time for them to let you know you've
forgotten to include context. Their brow furrows. They look confused. You notice this and quickly add the missing
context to keep the conversation moving forward. It takes a lot longer to identify missing context when
communicating asynchronously. The non-verbal cues are missing.</p>

<p>Worse, lack of context when <em>reviewing code</em> asynchronously has a reverb effect. I create my PR when it's
convenient for me, you ask a clarifying question when it's convenient for you, I respond when it's convenient for
me, etc. Suddenly my PR has been open for three days and we haven't yet made it to a common understanding of why
I've made these changes.</p>

<p>It's extremely important to include all available context when drafting a PR. It saves incredible amounts of time
by cutting out slow round-trip conversations to clarify.</p>

<p>I'm personally proud of and impressed by the job we do at Artsy in including context in our PRs. We start early, by
giving our engineers
<a href="https://github.com/artsy/README/blob/master/playbooks/engineer-workflow.md#pull-requests">some reading about how we work with PRs during their onboarding</a>.</p>

<p>But beyond that our engineers lead by example. This article presents a handful of examples from Artsy repositories
demonstrating how you can add context to your PRs to avoid unnecessary clarifying conversation.</p>

<a name="Explain.Your.Reasoning"></a>
<h2>Explain Your Reasoning</h2>

<p>You've been thinking a lot about the problem you're solving - probably significantly more than your reviewers.
You'll save everyone time by describing the problem and sharing how you're thinking about it.</p>

<a name="Define.the.problem.and.solution"></a>
<h3>Define the problem and solution</h3>

<p>Why does this PR exist? Explain the problem it solves and describe your solution, as
<a href="https://github.com/sweir27">Sarah</a> does <a href="https://github.com/artsy/force/pull/3095">in this PR</a>. For bonus points,
include alternative approaches you considered.</p>

<p>As you are writing up the problem and solution, you might find that you've missed on the scope of your PR. Are
there <em>many</em> problems this PR is solving? Maybe this should be broken into smaller PRs. Is it hard to describe the
problem because it requires multiple other PRs? Maybe those should be consolidated into one cohesive set of
changes.</p>

<a name="Explain.interesting.lines.of.code"></a>
<h3>Explain interesting lines of code</h3>

<p>The reviewers aren't the only ones who can comment on lines of code.
<a href="https://github.com/artsy/emission/pull/2085#discussion_r378228269">Give them</a> some
<a href="https://github.com/artsy/emission/pull/2085#discussion_r378230196">additional information</a> about
<a href="https://github.com/artsy/emission/pull/2085#discussion_r378231974">why a particular line was written</a>, as
<a href="https://github.com/ds300">David</a> does <a href="https://github.com/artsy/emission/pull/2085">in this PR</a>. Maybe you want
feedback focused on that line or maybe the line has side-effects and implications that aren't obvious.</p>

<a name="Give.a.guided.tour.of.the.changes"></a>
<h3>Give a guided tour of the changes</h3>

<p><a href="https://github.com/dblandin">Devon</a> takes the idea of adding context to individual lines to the next level
<a href="https://github.com/artsy/reaction/pull/2774#pullrequestreview-288095754">in this PR</a>. He takes advantage of
markdown to give us a virtual tour of the changes, at each stop providing helpful information and a link to the
next change. It's like he's sitting next to you!</p>

<a name="Show.Your.Work"></a>
<h2>Show Your Work</h2>

<p>If your PR contains work that is beyond trivial, show your reviewers how you thought about the problem. Demonstrate
the effects of the changes. Give them confidence that you've worked through this problem thoroughly, and you've
brought receipts.</p>

<a name="Make.small..self-contained.commits"></a>
<h3>Make small, self-contained commits</h3>

<p>A good PR starts with good commits. Good commits are small, self-contained, and leave the codebase always in a
working state. With good commits, reviewers can see exactly how you worked through the problem you were solving.
<a href="https://github.com/artsy/convection/pull/645">Here's a PR</a> from <a href="https://github.com/jonallured">Jon</a> that
demonstrates the use of small, self-contained commits to describe his approach to refactoring code before fixing a
bug.</p>

<p><em>Bonus tip</em>: it can be easier to review PRs with many small commits via the
<a href="https://github.com/artsy/convection/pull/645/commits"><em>Commits</em></a> tab instead of the
<a href="https://github.com/artsy/convection/pull/645/files"><em>Files changed</em></a> tab.</p>

<a name="Demonstrate.the.results"></a>
<h3>Demonstrate the results</h3>

<p>Pictures are a worth a thousand words. Animated gifs are worth a thousand pictures (uhhhh, in file size too 😬). An
animated gif showing the outcome of your PR gives reviewers a demo, and confidence that you've verified your
changes.</p>

<p><a href="https://github.com/artsy/force/pull/5817">Here's a PR</a> from <a href="https://github.com/ashleyjelks">Ashley</a> that includes
animated gifs of the changes she's made. The effects of the changes might not be obvious by looking only at the
code, but seeing them in action makes it clear.</p>

<a name="Document.the.unseen"></a>
<h3>Document the unseen</h3>

<p>Sometimes a PR's changes have effects outside of the UI. There are still ways to give reviewers proof that the
changes have the desired effects.</p>

<p><a href="https://github.com/artsy/eigen/pull/3206">Here's a PR</a> from <a href="https://github.com/yuki24">Yuki</a> that not only
demonstrates what's happening in the UI, but also assures me that the back-end data is getting updated properly
through a Rails console.</p>

<p><a href="https://github.com/xtina-starr">Christina</a> authored <a href="https://github.com/artsy/reaction/pull/3441">this PR</a> which
shows the UI changes in addition to some output from her browser console, demonstrating that analytics tracking
calls are firing correctly.</p>

<a name="Share.your.progress"></a>
<h3>Share your progress</h3>

<p>One mistake many engineers make with non-trivial pull requests is to wait to open them until they're "done". If
there are changes you'd like to get people's eyes on quickly, open a WIP PR before the work is done: mark it as a
draft in GitHub, or put <code>WIP</code> in the title. Extra work up front avoids rework by starting early discussions about
your approach.</p>

<p>Let reviewers know in the body that your work isn't complete. As you continue your work, use a <code>TODO:</code> list in the
body to illustrate your progress, as in <a href="https://github.com/artsy/palette/pull/464">this PR</a> from
<a href="https://github.com/sepans">Sepand</a>.</p>

<p>Is this PR part of a larger scope of work? Is there followup work that will need to be done after it's merged? Are
there PRs in other systems that need to merge in a specific sequence? Any migration details or timing that should
be known before merging? Call these details out to avoid another round-trip conversation.</p>

<a name="Spread.knowledge"></a>
<h2>Spread knowledge</h2>

<p>Pull requests should not be one-sided - they aren't just about collecting feedback from the reviewer. They're also
an opportunity to spread knowledge from the author.</p>

<a name="Share.your.learnings"></a>
<h3>Share your learnings</h3>

<p>Maybe you learned some things about the system you're working with, or you learned a new feature of the language.
Share this new information with your team. <a href="https://github.com/anandaroop">Roop</a> shares some findings about
disabled tests <a href="https://github.com/artsy/metaphysics/pull/2130">in this PR</a>.</p>

<p>We introduced a new state management library shortly before <a href="https://github.com/pepopowitz">I</a> opened
<a href="https://github.com/artsy/eigen/pull/3526">this PR</a>, and I had to do some reading about how to add types to
something. I <a href="https://github.com/artsy/eigen/pull/3526#discussion_r451161406">shared my learnings with the team</a>.</p>

<a name="Share.development.tips"></a>
<h3>Share development tips</h3>

<p>Did you learn a new technique while building this feature? Share it with your team!</p>

<p>In <a href="https://github.com/artsy/reaction/pull/3279#discussion_r395461329">this PR</a>,
<a href="https://github.com/damassi">Chris</a> shared with us his technique for grabbing fixture data from his locally running
environment.</p>

<hr />

<p>When your team embraces the pull request process, you reap rewards that extend far beyond the lines of code.
Providing context up-front shortens the feedback loop and surfaces important discussions sooner, allowing you to
ship changes more quickly. Sharing knowledge in PRs grows individuals and spreads expertise across your team. Every
PR becomes an artifact for retracing history. You can look back and see not only <em>which</em> decisions were made, but
<em>why</em> they were made.</p>

<p>If you'd like to know more about how we work with pull requests at Artsy, take a look at our
<a href="https://github.com/artsy/README/blob/master/playbooks/engineer-workflow.md#pull-requests">"Engineer workflow" playbook</a>,
or poke around <a href="https://github.com/artsy">our GitHub repositories</a>. Check out
<a href="https://github.com/artsy/artsy.github.io/pull/619">the PR that created this article</a>. And if you've got examples
of great PRs to share with the rest of us, leave a comment!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Team Working Agreements]]></title>
    <link href="https://artsy.github.io/blog/2020/04/01/team-working-agreements/"/>
    <updated>2020-04-01T00:00:00+02:00</updated>
    <id>https://artsy.github.io/blog/2020/04/01/team-working-agreements</id>
    <content type="html"><![CDATA[<p>Good team culture strives for cohesion. Once organizations get large enough, a tension emerges between the culture
of individual teams and the culture of the larger organization. How do you achieve team cohesion across small teams
<em>and</em> the larger organizations they comprise?</p>

<p>The culture at Artsy is driven by every team member, not mandated or handed down from above. This adds another
level of tension, between individuals and their smaller teams. Team working agreements embrace that tension to
provide a framework for converting tension into healthy culture.</p>

<!-- more -->


<p>Artsy Engineering is part of a larger organization we call PDDE (Product, Design, Data, and Engineering). PDDE is
divided into several product teams, and each team contains at least one representative from product, design, data,
and engineering. Each PDDE team delivers product solutions targeted to a specific product need.</p>

<p>Until recently, those teams could expect a significant change in team members at the start of every quarter, as we
encouraged engineers to explore other teams. The purpose of this practice was to spread knowledge throughout the
organization, and give folks the opportunity to keep themselves aligned with projects they found most interesting.</p>

<p>The downside of this practice was that it made teams feel short-lived, impermanent, and unstable. Some teams were
hit harder than others - they'd see their team completely turn over every quarter. This was felt most strongly by
our product managers who would take the time to learn the skills and strengths of each engineer on their team over
the course of a quarter, just to have to start the process all over again, making it difficult to plan projects or
set goals for the following quarter.</p>

<p>To address these challenges, PDDE decided to set the expectation that engineers would stay on the same team each
quarter, with the option to request a team change, when necessary, to fill a skill, capacity, or growth need
elsewhere. This effectively ended the practice of shuffling teams every quarter. It was too much change, too often.</p>

<p>As a result, our teams feel more stable and long-lived. We're able to build deeper team identity. We've found one
tool particularly helpful in finding and building team identity: team working agreements.</p>

<a name="How.did.team.working.agreements.come.about.at.Artsy."></a>
<h2>How did team working agreements come about at Artsy?</h2>

<p>The current breakdown of our PDDE organization is relatively new; it's also an on-going process. We are still
feeling out how these teams will/should work together. One of the core beliefs at Artsy is that when you are a part
of something - a process, a team, a culture - you are empowered to make impactful changes to it.</p>

<p><aside class="dialogue">
  <div class="answer">
    <img src="/images/dialogue/adam.jpg">
    <p class="intro">Adam Iskounen says...</p>
    <p>
      Team cohesion and unity was a common theme that kept surfacing during the retrospective meeting that led to
      PDDE ending the quarterly shuffling of teams. During my onboarding, I noticed in retros that teams were
      strong on "what went well" and light on "what could be improved." We'd have 1 or 2 "didn't go well" tickets,
      but they were usually something light-hearted/benign like "team lunch was cancelled". One team in particular
      seemed like they were dancing around each other a bit, and important things like "not getting stuff done"
      wasn't being brought up.
    </p>
    <p>I remembered that team working agreements were a tool used by
      a scrum master at my previous job to help a particular team that was struggling to gel, and brought it up
      without really knowing what was involved in the process. Fortunately my product manager - who was eager to
      form a team where each member felt empowered and excited to take ownership of our work - encouraged me to
      research and share the process for coming up with a team working agreement. At first I was nervous that some
      team members, especially those who I perceived to be more interested in technical challenges than on team-building,
      would not be interested in this and find that it was a waste of time. I was pleasantly surprised that not only did
      everyone on the team participate, but that those team members ended up being some of the more enthusiastic
      proponents for following-up on the team working agreement after our initial brainstorm.
    </p>
  </div>
</aside></p>

<p>Since being pioneered by Adam's team, team working agreements have spread to most of our engineering teams. They've
been a learning opportunity for all of us, and a chance for our team members to share experiences and practices
with each other.</p>

<a name="What.s.a.team.working.agreement."></a>
<h2>What's a team working agreement?</h2>

<p>A team working agreement is a written set of guidelines for an engineering team. It enumerates the habits and
practices that the team requires to be productive and successful. The agreement is a living document, and every
member of the team has a part in shaping it.</p>

<p><a href="https://en.wikipedia.org/wiki/Tuckman%27s_stages_of_group_development">According to Bruce Tuckman, a team moves through four phases of development: forming, storming, norming, and performing</a>.
Team working agreements can help a team move more quickly through the stages. A team in the "forming" stage will
quickly uncover areas of disagreement and move to "storming" when they attempt to align on a working agreement. A
"storming" team might move to "norming" more quickly when their points of friction are arbitrated in a working
agreement.</p>

<p>Examples of habits or practices on a team working agreement might include:</p>

<ul>
<li>Any change to the sprint backlog requires product manager approval.</li>
<li>Everyone owns the backlog and should add tickets for untracked work.</li>
<li>Update the backlog before each day’s standup.</li>
</ul>


<p>We've been using a fairly consistent process to develop team working agreements at Artsy.</p>

<a name="Step.1:.Educate.the.team.about.team.working.agreements"></a>
<h3>Step 1: Educate the team about team working agreements</h3>

<p>We want every team member to recognize the importance of creating an agreement.</p>

<p>Each team reviews
<a href="https://github.com/artsy/README/blob/master/playbooks/agile/team-working-agreement.md">our docs on the process of creating a working agreement</a>
before creating one. They might also review an existing working agreement.</p>

<a name="Step.2:.Conduct.a.brainstorming.meeting"></a>
<h3>Step 2: Conduct a brainstorming meeting</h3>

<p>The team meets for an hour to brainstorm ideas that promote success from each individual or the team as a whole.
Some of our teams have met fully in-person and used physical sticky notes for brainstorming; many have used an
online tool like <a href="https://miro.com/">Miro</a> to include remote members.</p>

<p>It's vital that <em>all</em> members of the team attend the brainstorm. For us, that includes engineers and product
managers, but also designers and data analysts. This is a discussion of how the entire team works together -
everyone's voice should be heard.</p>

<p>A sample brainstorm agenda is
<a href="https://github.com/artsy/README/blob/master/playbooks/agile/team-working-agreement.md#sample-meeting-agenda">shared in our docs</a>.
The output of the brainstorm is a set of ideas that everyone has contributed to.</p>

<a name="Step.3:.Distill.brainstorming.ideas.into.discrete..digestible.habits"></a>
<h3>Step 3: Distill brainstorming ideas into discrete, digestible habits</h3>

<p>The ideas from the brainstorming process can be sorted into themes. Within themes, we work to condense ideas into
habits and practices that are agreeable to the entire team. We have found success in keeping the language for these
habits small, discrete, and slogan-like.</p>

<p>The distillation step might take several round-trips of gathering feedback and wordsmith-ing.</p>

<a name="Step.4:.Commit.the.most.important.habits.to.a..Team.Working.Agreement..document"></a>
<h3>Step 4: Commit the most important habits to a "Team Working Agreement" document</h3>

<p>The team votes on which habits should be included in the agreement and a document is circulated.</p>

<p>It's not done, though. Remember: it's a living document.</p>

<a name="Step.5:.Revisit.the.working.agreement"></a>
<h3>Step 5: Revisit the working agreement</h3>

<p>As a team, decide how often the agreement should be revisited, and what "revisiting the agreement" means. When
should we amend it? When should we do another brainstorm? It probably doesn't make sense to scrap the old agreement
when one new team member joins, but how much change on a team would inspire us to recreate our agreement?</p>

<a name="Why.establish.a.team.working.agreement."></a>
<h2>Why establish a team working agreement?</h2>

<a name="The.brainstorm.itself.is.incredibly.valuable."></a>
<h3>The brainstorm itself is incredibly valuable.</h3>

<p>Dedicated time to talk about values, habits, and processes is incredibly helpful to a team, yet rarely scheduled.
The brainstorm for a team working agreement can fill this void.</p>

<p>During the team agreement brainstorm the team looks at <em>how</em> they work, instead of looking at <em>what</em> work they're
doing. It's similar to what you might get out of a retro but at a higher level. It offers time to discuss "soft"
skills that you don't often discuss, in a context that you don't usually discuss them - with other individual
contributors, and with your closest collaborators.</p>

<p><aside class="dialogue">
  <div class="answer">
    <img src="/images/dialogue/steve.jpg">
    <p class="intro">Steve Hicks says...</p>
    <p>
      When joining a new team, there's often a period of "feeling it out" - where I'm afraid to verbalize an
      opinion because I'm not sure how the team feels about it. The team working agreement process has definitely
      helped lessen this feeling.
    </p>
    <p>
      There's a <a href="https://www.youtube.com/watch?v=FxTXf6qyaGk">great talk by Katherine Wu named "Ask vs Guess Culture"</a>.
      "Guess" culture is when you try to guess what a person wants or is thinking; "Ask" culture is when you flat out
      ask them. Team agreement brainstorms are a really neat way to <em>ask</em> your team how they want to work, instead of
      spending many sprints trying to guess.
    </p>
    <p>
      So far, I have seen the most value out of <em>the actual brainstorm</em> than the working agreement itself. My teams
      have learned so much about each others' habits and values.
    </p>
  </div>
  <div class="answer">
    <img src="/images/dialogue/adam.jpg">
    <p class="intro">Adam Iskounen says...</p>
    <p>
      The process has helped confirm that the team shared interest in team dynamics &amp; the process of collaboration
      across the team. As a new member it's nice to know that information.
    </p>
    <p>
      It's been great to see teammates bring up the team agreement in different contexts. It wasn't just a one-hour
      brainstorm, it's something our team is living. Hearing our slogan-like habits recited during team meetings
      long after the brainstorm is a testament to the value of the agreement.
    </p>
  </div>
</aside></p>

<a name="It.can.lead.to.better.engagement.in.sprint.activities."></a>
<h3>It can lead to better engagement in sprint activities.</h3>

<p>One of our teams established in their working agreement that sprint meetings were valuable. This might seem too
obvious to put in a team working agreement, but it portrays clearly to everyone that they should attend all sprint
meetings and be actively engaged.</p>

<p>The same team got a lot out of making slogans for the items in their working agreement. Phrases like "Pair by
default" and "Incremental improvement over consistency" were introduced during the brainstorm. They've since become
mantras for the team to refer to during sprint work and ceremonies. Team values and habits solidify through this
kind of repetition.</p>

<a name="The.team.working.agreement.provides.on-boarding.documentation."></a>
<h3>The team working agreement provides on-boarding documentation.</h3>

<p>When new members join a team, it takes time for them to adjust. A team working agreement provides an up-to-date
reference on the team's preferred methods of working. The working agreement isn't set in stone, and as the team
changes it's important to update it... but having it in writing helps new members acclimate quickly.</p>

<a name="What.are.some.challenges.with.team.working.agreements."></a>
<h2>What are some challenges with team working agreements?</h2>

<a name="Uncertainty.about.what.the.team.agreement.should.include."></a>
<h3>Uncertainty about what the team agreement should include.</h3>

<p>Some teams have struggled to identify what belongs on a team working agreement. Should it describe our team values?
Habits? Procedures? Rules? Favorite afternoon snacks?</p>

<p>It likely varies from team to team what you want here. Some teams might require guidance around working with JIRA;
others might be more focused on taking ownership of problems. These differences are likely a reflection of the
problems the team is currently facing or has recently faced.</p>

<p>It's definitely important that you identify what you're looking for up front, and make it clear heading into the
brainstorm. Suggest categories, sample habits, &amp; questions to ask heading into the brainstorm, and keep them
visible during the meeting.</p>

<p>Take notice of known problem areas: are they addressed or avoided in the agreement? It is easy for a team to avoid
confrontation at their own expense.</p>

<p>Also be cautious about introducing individual bias.</p>

<p><aside class="dialogue">
  <div class="answer">
    <img src="/images/dialogue/steve.jpg">
    <p class="intro">Steve Hicks says...</p>
    <p>
      During my first team agreement brainstorm, I felt like we spent a lot of time talking about details
      related to specific incidents. On my next team, I made a strong effort to constrain the suggestions
      to avoid this. To me, team values were really important for this new team - and I did such a good
      job of encouraging those types of suggestions that it's pretty much all we ended up with.
    </p>
    <p>
      As a result, our initial working agreement lacked important procedural and tactical definition. We've
      been adding things like JIRA hygiene and responsibilities of project leaders as they come up, but I would
      not push a working agreement brainstorm so strongly in one direction again.
    </p>
  </div>
</aside></p>

<p>Remember that the working agreement is a living document. If the team learns that it missed something in the
brainstorm, don't hesitate to update the agreement. Team retros are a great time to make updates.</p>

<a name="Working.agreements.are.hard.to.define.for.teams.without.a.well-established.identity."></a>
<h3>Working agreements are hard to define for teams without a well-established identity.</h3>

<p>For a team that has a strong and cohesive identity, the agreement is likely to affirm many things the team is
already believing and doing. For a less cohesive team the agreement is harder to pin down. Many opinions will
surface, and they may be in conflict with each other.</p>

<p>While this is indeed challenging, it is also important to note that teams that lack identity benefit <em>greatly</em> from
the team agreement brainstorm. Provided there is
<a href="https://github.com/artsy/README/blob/master/culture/engineering-principles.md#psychological-safety">psychological safety</a>,
this is a really great time for the team to learn about what matters to each other, and move toward establishing an
identity.</p>

<a name="Facilitating.the.brainstorm.can.be.difficult.on.a.distributed.team."></a>
<h3>Facilitating the brainstorm can be difficult on a distributed team.</h3>

<p>Some of our teams were able to brainstorm with everyone on-site. They were able to rely on post-it notes and
in-person conversations, and read each other's non-verbal communication. Other teams have a mix of on-site and
remote members, and used tools like <a href="http://miro.com/">Miro</a> to facilitate. This <em>can</em> present a challenge...but if
you're already a distributed team, they are likely the same types of challenges you've worked to overcome for <em>all</em>
meetings.</p>

<p>The differences are worth noting, though. The importance of reading each other's non-verbal communication is
magnified when you're having conversations about identity. It's quicker to organize and re-organize real-life
post-its than virtual post-its in an online tool. These are all opportunities to get better at being a distributed
team.</p>

<a name="It.takes.effort.to.make.sure.one.person.isn.t.introducing.their.bias.into.the.working.agreement."></a>
<h3>It takes effort to make sure one person isn't introducing their bias into the working agreement.</h3>

<p>It's important for the team agreement brainstorm to provide an environment in which every team member is heard.
Even if your team is successful at this, there are still opportunities for individual bias to affect the working
agreement.</p>

<p>We saw earlier how bias can appear when the examples provided for the brainstorm are too narrowly scoped.</p>

<p>We recognized another bias vector in the distillation of the brainstorm into an actual agreement. If this is
handled by a single person, it's very possible for them to produce a working agreement that misrepresents <em>the
rest</em> of the team. To counter this, we've had multiple team members pair on the distillation process. Feedback on
the initial draft of the agreement is also important to ensure it does not misrepresent the team's ideas.</p>

<p>The problem of introducing bias to the distillation process is most challenging with topics that are disputed
across the team. One of our teams spent a lot of time talking about meetings in their brainstorm, but struggled to
come to consensus on them. No single person, or even a pair, could add a disputed topic like this to the working
agreement without introducing their personal bias. In this specific case, the team chose to leave meetings off the
working agreement until they could reach consensus. Topics that are disputed across the team are important to talk
about at <em>some</em> point, but the brainstorm is probably not the time.</p>

<a name="Team.health.is.easy.to.postpone.when.you.have.important.product.work.to.do."></a>
<h3>Team health is easy to postpone when you have important product work to do.</h3>

<p>One of our teams put the act of distilling the brainstorm notes into an agreement on one person. That person became
busier than expected, didn't have time to write the agreement, and the team's agreement stalled.</p>

<p>Just as personal self-care gets put on the back burner during stressful times, creating a working agreement is easy
to bump down the backlog during intense periods of sprint work. The longer a team drags out the working agreement
process, the more context is lost from the original brainstorm. We recommend not letting your working agreement
linger.</p>

<p>It's also important to revisit the working agreement often. It is a living document, not one-and-done. Review the
agreement as a team occasionally; update the agreement as your team learns how to collaborate better; cultivate the
agreement. If an agreement gets stale, it will become inaccurate, meaningless, and unused.</p>

<a name="What.does.it.even.mean.to.have.a.team.working.agreement."></a>
<h3>What does it even mean to have a team working agreement?</h3>

<p>A team working agreement is a neat artifact. The brainstorm process has great value. But there is non-obvious work
involved in turning a team working agreement into the team culture. We have many questions that we aren't sure how
to answer:</p>

<ul>
<li>How do you enforce the agreement?</li>
<li><em>Should</em> you enforce the agreement?</li>
<li>How do you get the entire team to embrace it?</li>
<li>What happens when the agreement is violated or disrespected?</li>
</ul>


<p>If you're using working agreements on your team and you've got answers for us, or you want to start using them and
have more questions, we'd love to hear from you!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Diagnosing our Radiation Problems]]></title>
    <link href="https://artsy.github.io/blog/2019/11/14/diagnosing-our-radiation-problems/"/>
    <updated>2019-11-14T00:00:00+01:00</updated>
    <id>https://artsy.github.io/blog/2019/11/14/diagnosing-our-radiation-problems</id>
    <content type="html"><![CDATA[<p>Email! Electronic mail! What a concept! Like many companies, Artsy has built products on top of email, but this is
a decision that (like many companies) Artsy periodically regrets. But overall, our email systems work well!</p>

<p>But what about when it doesn't? Well that's what today's blog post is about: what happens when things break and you
don't know why?</p>

<!-- more -->


<p>I have learned a lot
<a href="https://artsy.github.io/blog/2018/05/30/my-first-week-on-call/">since my first on-call shift</a>, but going on call
still gives me a little stage fright. As I start a shift, I'm on the look-out for things that might break, and soon
after starting a recent on-call shift, "breaking" is exactly what things did.</p>

<p><img src="/images/2019-11-07-diagnosing-our-radiation-problems/alert.png" alt="Screenshot of Slack alert" /></p>

<p>We got an automated alert on Slack that one of our email services, code-named "Radiation", had really high response
times. We <em>then</em> received an alert that too many requests to Radiation were failing completely. Yikes. The next
twenty two hours was a deep dive into Heroku, New Relic, Rails, and PostgreSQL, all to isolate the problem and
produce a solution.</p>

<p>The nice thing about email, as a protocol, is that it's based on a store-and-forward concept. That means that if a
message delivery fails, email servers will try again later (typically with an exponential backoff). SendGrid, our
email processor, has built their REST API around this same store-and-forward concept. While the Radiation server
was unresponsive, SendGrid wouldn't receive successful HTTP responses from the webhook deliveries, so it would
attempt to re-deliver the failing emails later. Email deliveries would be delayed, but the emails themselves would
not be dropped. We wasted no time addressing the problem, but we were also confident that once we fixed the issue,
the data would be okay.</p>

<p>After the alert, Ashkan (Radiation's point-person) and I communicated with our colleagues (engineers and affected
non-engineers) about the problem. With the help of Chung-Yi, we began investigating the immediate problem (with a
focus on <em>mitigating</em> it, rather than necessarily <em>fixing</em> it). Oh, we tried it all: spinning up more Heroku Dynos
to handle requests, increasing concurrency on the individual Dynos, restarting Redis and PostgreSQL stores. Each
time, things would work briefly before the Radiation API would begin timing out again. More accurately, the
requests sent to Radiation were taking longer than the Heroku router was giving them (30 seconds) before the router
gave up and timed out the request. We started examining the Radiation code and database (keeping our <em>ion the
prize</em>: mitigation).</p>

<p>Ashkan investigated slow database queries. We added new PostgreSQL indexes to speed up queries, and restructured
others to avoid expensive joins. Unfortunately, all this accomplished was extending the time after a Dyno reboot
that things would work (before beginning to timeout again). Because
<a href="https://artsy.github.io/blog/2017/05/30/database-encryption/">Artsy stores emails as encrypted-at-rest</a>, it was
difficult to pinpoint which exact message could be causing the timeouts. And Radiation itself didn't have much in
the way of logging, which would normally help us debug the problem.</p>

<p>It was frustrating to try to fix something but only manage to improve how long it took to break again. We had
enhanced Radiation's performance to the point where it was taking 10 minutes after a Dyno reboot to begin timing
out again, up from 30 seconds at the beginning of the incident. Despite an afternoon and evening spent trying to
fix the problem, we were stuck. We decided that the best course of action was a good night's sleep; we would ask
for help in the morning.</p>

<p>The next day, Ashkan and I got <em>up and atom</em> to address the problem. We brought my on-call partner Devon up to
speed, detailing the incident symptoms and what we had tried so far. While Devon and Ashkan worked on additional
logging and new timeout strategies, I took another approach.</p>

<p>Artsy has been moving to <a href="https://www.datadoghq.com">DataDog</a> for server performance monitoring, but Radiation was
still using <a href="https://newrelic.com">New Relic</a>. My background is in iOS app development and I had never really dug
into New Relic before, but I <em>am</em> very experienced at profiling iOS applications, and the Ruby and Objective-C
runtimes have more in common than they have have differences. I used New Relic to profile a production Radiation
Dyno for five minutes and, to our collective surprise, we found that more than 90% of CPU time was being spent in
<a href="https://github.com/thoughtbot/griddler/blob/ff2ad16949bf5190f93df1a3e83eb0192f136c6d/app/controllers/griddler/emails_controller.rb#L4-L10">an innocuous function of a dependency</a>,
the open source library <a href="https://github.com/thoughtbot/griddler">Griddler</a>.</p>

<p>Artsy uses Griddler to parse and sanitize emails that we receive from <a href="https://sendgrid.com">SendGrid</a>. Griddler
contained the problematic code, which was responsible for parsing email responses from threaded replies. So if an
email body received by Radiation looks like this:</p>

<pre><code>This is the most recent reply in this email conversation.

On September 28th, 2019, Someone Else Wrote:

[The rest of the email thread]
</code></pre>

<p>Then Griddler parses out the string "This is the most recent reply in this email conversation." for Radiation to
process. This is really important because some of the threads in Radiation are <em>thousands</em> of emails long. In fact,
I learned that Radiation has Artsy's largest production database.</p>

<p>Griddler does this processing via regular expressions. Ashkan had the insight to look for existing issues from
other Griddler users who ran into similar problems, and to our delight,
<a href="https://github.com/thoughtbot/griddler/pull/310">we found a pull request</a> that appeared to address the <em>exact</em>
issue that we were having.</p>

<p>It turns out that emails with large amounts of repeated newline characters would totally stall Griddler's regex.
Heroku's router would timeout any request after 30 seconds, but would leave the Ruby code churning on that regex.
That would leave the Rails server unable to respond to subsequent HTTP requests, causing more timeouts. And because
of email's store-and-forward nature, SendGrid would begin sending more problematic emails pretty quickly after any
Radiation reboot. A small change to add a regex group was all that was necessary to fix the issue.</p>

<p>Phew! We forked Griddler to Artsy's GitHub organization and applied the change from the pull request. We were
concerned about security implications of using a different regex, but my
<a href="https://artsy.github.io/blog/2018/02/06/apogee-technical-retrospective/">previous work in regular expressions</a>
helped me vet the change. We pointed Radiation's Gemfile to Artsy's fork and deployed the change.</p>

<p><img src="/images/2019-11-07-diagnosing-our-radiation-problems/heroku.png" alt="Screenshot of Heroku Dashboard, indicating a drop in load" /></p>

<p>Then, we waited. Would the system start timing out again? It took a half hour for any of us to breathe a sigh of
relief. But things appeared to be stable: response times were normal and Dyno load dropped precipitously. Our
<em>Curie</em> worked. (Okay, enough radiation puns.)</p>

<p>During our weekly incident review, Devon guided the rest of our team through our incident response and what we
learned. Radiation is now in a much better state, so that future problems will be easier to track down. We
responded to the Griddler pull request, encouraging the maintainers to merge the commit so other teams would avoid
this problem. The incident review meeting explored a number of options to mitigate future issues, including
migrating Radiation to our Kubernetes cluster, and Sam (our VP of Engineering) suggested writing this post. So here
we are.</p>

<p>Ashkan also followed up with peer feedback for Devon, Chung-Yi, and myself. In part, it read:</p>

<blockquote><p>It's rare and odd to say dealing with incident was fun, but with your help it actually was productive and fun.</p></blockquote>

<p>Which, honestly? One of my proudest accomplishments at Artsy.</p>

<p>In the end, we solved the problem and restored access to our email systems in under 24 hours. We kept our cool, we
communicated effectively with our non-engineering colleagues, and we learned a lot. What more could you want from a
Radiation incident?</p>
]]></content>
  </entry>
  
</feed>
