<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: eslint | Artsy Engineering]]></title>
  <link href="https://artsy.github.io/blog/categories/eslint/atom.xml" rel="self"/>
  <link href="https://artsy.github.io/"/>
  <updated>2021-10-06T21:47:56+02:00</updated>
  <id>https://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[From TSLint to ESLint, or How I Learned to Lint GraphQL Code]]></title>
    <link href="https://artsy.github.io/blog/2019/01/29/from-tslint-to-eslint/"/>
    <updated>2019-01-29T00:00:00+01:00</updated>
    <id>https://artsy.github.io/blog/2019/01/29/from-tslint-to-eslint</id>
    <content type="html"><![CDATA[<p>At the beginning of January we discovered an interesting note in <a href="https://github.com/Microsoft/TypeScript/issues/29288">TypeScript's roadmap</a> about linting:</p>

<blockquote><p>In a survey we ran in VS Code a few months back, the most frequent theme we heard from users was that the linting
experience left much to be desired. Since part of our team is dedicated to editing experiences in JavaScript, our
editor team set out to add support for both TSLint and ESLint. However, we noticed that there were a few
architectural issues with the way TSLint rules operate that impacted performance. Fixing TSLint to operate more
efficiently would require a different API which would break existing rules (unless an interop API was built like
what wotan provides).</p>

<p>Meanwhile, ESLint already has the more-performant architecture we're looking for from a linter. Additionally,
different communities of users often have lint rules (e.g. rules for React Hooks or Vue) that are built for
ESLint, but not TSLint.</p>

<p>Given this, our editor team will be focusing on leveraging ESLint rather than duplicating work. For scenarios
that ESLint currently doesn't cover (e.g. semantic linting or program-wide linting), we'll be working on sending
contributions to bring ESLint's TypeScript support to parity with TSLint. As an initial testbed of how this works
in practice, we'll be switching the TypeScript repository over to using ESLint, and sending any new rules
upstream.</p></blockquote>

<p>At Artsy we've been using TSLint for a few years now; it's worked well for us, and we've even written our own
<a href="https://github.com/relay-tools/tslint-plugin-relay">custom rules</a>. However, given the vastness of the JS ecosystem
and how fast it moves, it's easy to recognize this announcement as an exciting moment for tooling simplicity.</p>

<!-- more -->


<p>To give an example, anyone who has built a culture around Airbnb's
<a href="https://github.com/airbnb/javascript">JavaScript style guide</a> will instantly recognize the conundrum they're in
when migrating to TypeScript:</p>

<p><img width="100%" alt="a reddit user discovers their linting rules no longer work" src="https://user-images.githubusercontent.com/236943/51884369-d845b380-233b-11e9-9d2f-102cc8a3a78b.png"></p>

<p>This means that teams maintaining legacy JavaScript codebases will no longer have to <em>also</em> maintain
<a href="https://github.com/palantir/tslint-react">two</a> <a href="https://github.com/yannickcr/eslint-plugin-react">versions</a> of often nearly <a href="https://github.com/prettier/tslint-plugin-prettier">identical</a>
<a href="https://github.com/prettier/prettier-eslint">rule-sets</a>. All of the aggregate culture that builds up around linting can now be shared in a
forward and backward facing way, making the often-daunting process of migrating a codebase from JavaScript to
TypeScript a much easier sell.</p>

<p>With this in mind we wanted to give the new officially-sanctioned <a href="https://github.com/typescript-eslint/typescript-eslint">typescript-eslint</a> project a
spin and document our findings.</p>

<a name="Setup"></a>
<h3>Setup</h3>

<p>To get started, install the necessary dependencies:</p>

<pre><code class="sh">$ yarn install -D eslint typescript @typescript-eslint/eslint-plugin
</code></pre>

<p>Then create a new <code>.eslintrc.js</code> and add a bit of setup:</p>

<pre><code class="js">module.exports = {
  parser: "@typescript-eslint/parser",
  plugins: ["@typescript-eslint"],
  extends: ["eslint:recommended", "plugin:@typescript-eslint/recommended"],
  parserOptions: {
    ecmaVersion: 6,
    project: "./tsconfig.json",
    sourceType: "module"
  }
}
</code></pre>

<p>Note that <code>parserOptions.project</code> points to your <code>tsconfig.json</code> file:</p>

<pre><code class="json">{
  "compilerOptions": {}
}
</code></pre>

<p>Next, add a bit of TypeScript to a file</p>

<pre><code class="sh">$ echo "export const foo: any = 'bar'" &gt; index.ts
</code></pre>

<p>and run the linter:</p>

<pre><code class="sh">$ yarn eslint . --ext .ts,.tsx

~/index.ts
  1:12  warning  Unexpected any. Specify a different type  @typescript-eslint/no-explicit-any

✖ 1 problem (0 errors, 1 warnings)
</code></pre>

<p>Very nice!</p>

<p>Now lets expand the example a bit and add something more sophisticated, which in Artsy's use-case is commonly
GraphQL:</p>

<pre><code class="sh">$ yarn add -D eslint-plugin-graphql graphql-tag apollo
</code></pre>

<p>Update <code>tsconfig.json</code> and let it know we'll be using <code>node</code> for imports:</p>

<pre><code class="json">{
  "compilerOptions": {
    "moduleResolution": "node"
  }
}
</code></pre>

<p>In <code>.eslintrc.js</code> add these rules (while noting the addition of <code>graphql</code> to <code>plugins</code> and
<code>graphql/template-strings</code> under <code>rules</code>):</p>

<pre><code class="js">const path = require("path")

module.exports = {
  parser: "@typescript-eslint/parser",
  plugins: ["@typescript-eslint", "graphql"],
  extends: ["eslint:recommended", "plugin:@typescript-eslint/recommended"],
  parserOptions: {
    ecmaVersion: 6,
    project: "./tsconfig.json",
    sourceType: "module"
  },
  rules: {
    "graphql/template-strings": [
      "error",
      {
        schemaJsonFilepath: path.resolve(__dirname, "./schema.json"),
        tagName: "graphql"
      }
    ]
  }
}
</code></pre>

<p>For GraphQL to know what to lint, we'll need a schema. Thankfully the
<a href="https://etmdb.com/graphql">Ethiopian Movie Database</a> has our back :)</p>

<pre><code class="sh">$ yarn apollo service:download --endpoint https://etmdb.com/graphql
  ✔ Loading Apollo Project
  ✔ Saving schema to schema.json
✨  Done in 2.18s.
</code></pre>

<p>Back in <code>index.ts</code>, add this bit of code:</p>

<pre><code class="js">import graphql from "graphql-tag"

export const MovieQuery = graphql`
  query MoveQuery {
    allCinemaDetails(before: "2017-10-04", after: "2010-01-01") {
      edges {
        nodez {
          slug
          hallName
        }
      }
    }
  }
`
</code></pre>

<p>And run the linter:</p>

<pre><code class="sh">$ yarn eslint . --ext .ts,.tsx

~/index.ts
  7:9  error  Cannot query field "nodez" on type "CinemaDetailNodeEdge". Did you mean "node"?  graphql/template-strings

✖ 1 problem (1 error, 0 warnings)
</code></pre>

<p>Ahh yes, I meant <a href="https://i.redd.it/tfugj4n3l6ez.png"><code>node</code></a>.</p>

<a name="Bonus:.VSCode.Integration"></a>
<h3>Bonus: VSCode Integration</h3>

<p>As developers, we like our tools to work for us, and in 2019 the tool that <em>seems</em> to do that best just happens to
be a brilliant open source product from Microsoft. There were a couple unexpected configuration issues when we were
setting this up, but thankfully they're easy fixes.</p>

<pre><code class="sh">$ mkdir .vscode &amp;&amp; touch .vscode/settings.json
</code></pre>

<p>Then add a couple settings:</p>

<pre><code class="json">{
  "editor.formatOnSave": true,
  "eslint.autoFixOnSave": true,
  "eslint.validate": [
    {
      "language": "javascript",
      "autoFix": true
    },
    {
      "language": "javascriptreact",
      "autoFix": true
    },
    {
      "language": "typescript",
      "autoFix": true
    },
    {
      "language": "typescriptreact",
      "autoFix": true
    }
  ],
  "tslint.enable": false
}
</code></pre>

<p>Format on save, fix on save, <em>autofix</em> on save, tell ESLint to recognize <code>.ts</code> (and <code>.tsx</code>, for the React folks)
then disable <code>tslint</code> so that <code>eslint</code> can do its thing:</p>

<p><img width="698" alt="eslint displaying graphql error in VSCode IDE" src="https://user-images.githubusercontent.com/236943/51884366-d380ff80-233b-11e9-8128-6c39e210dd31.png"></p>

<p>Now ESLint will show you right where your GraphQL error is from within VSCode. Pretty sweet.</p>

<p>Be sure to read <a href="https://eslint.org/blog/2019/01/future-typescript-eslint">The future of TypeScript on ESLint</a> for more details.</p>
]]></content>
  </entry>
  
</feed>
