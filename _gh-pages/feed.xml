<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Artsy Engineering</title>
    <description></description>
    <link>https://artsy.github.io/</link>
    <atom:link href="https://artsy.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 06 Oct 2021 21:47:56 +0200</pubDate>
    <lastBuildDate>Wed, 06 Oct 2021 21:47:56 +0200</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>What JavaScript Tests Could Learn From RSpec</title>
        <description>&lt;p&gt;When I started at Artsy a few years ago, I&#39;d never written a line of Ruby. I feel at home with JavaScript — it&#39;s
been my buddy since I started my career over 20 years ago. I&#39;ve written enough tests in JavaScript that I sometimes
feel like I can write them in my sleep (as long as they don&#39;t involve async React events 😅).&lt;/p&gt;

&lt;p&gt;Most of the code I write at Artsy is still JavaScript, but now I write some Ruby code too, and I&#39;ve written enough
RSpec tests that I&#39;m starting to form opinions about what I think they should look like.&lt;/p&gt;

&lt;p&gt;My most recent work has been JavaScript again. I&#39;ve been writing Jest tests against one of our React apps. But
rather than reaching for the testing patterns I&#39;d become accustomed to over my years of JavaScripting, I&#39;m finding
that something&#39;s missing in my Jest tests! My experiences with RSpec have me longing for two features in Jest:&lt;/p&gt;

&lt;!-- more --&gt;


&lt;ol&gt;
&lt;li&gt;&lt;code&gt;context&lt;/code&gt; blocks&lt;/li&gt;
&lt;li&gt;&lt;code&gt;let&lt;/code&gt; blocks&lt;/li&gt;
&lt;/ol&gt;


&lt;a name=&quot;L1...code.context..code..blocks&quot;&gt;&lt;/a&gt;
&lt;h2&gt;1. &lt;code&gt;context&lt;/code&gt; blocks&lt;/h2&gt;

&lt;p&gt;A &lt;a href=&quot;https://relishapp.com/rspec/rspec-core/v/2-11/docs/example-groups/basic-structure-describe-it&quot;&gt;&lt;code&gt;context&lt;/code&gt; block&lt;/a&gt;
in an RSpec test is, as I understand it, literally the same thing as a &lt;code&gt;describe&lt;/code&gt; block. Like it&#39;s just an alias of
&lt;code&gt;describe&lt;/code&gt;. What&#39;s the point, you ask?&lt;/p&gt;

&lt;p&gt;The difference is in, well, context. Well-organized RSpec tests use &lt;code&gt;describe&lt;/code&gt; to describe what&#39;s being
tested...and &lt;code&gt;context&lt;/code&gt; to describe scenarios of the thing being tested.&lt;/p&gt;

&lt;p&gt;For example, if I wanted to test the &lt;code&gt;multiply&lt;/code&gt; method of a &lt;code&gt;Calculator&lt;/code&gt; class, I might write some test scenarios
that look like this:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;rb&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Calculator&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;.multiply&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;when the first value is negative&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;when the second value is negative&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;returns a positive number&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;when the second value is positive&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;returns a negative number&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;See the difference in those test cases between &lt;code&gt;describe&lt;/code&gt; and &lt;code&gt;context&lt;/code&gt;? The way I think about it is: if the
statement coming after my &lt;code&gt;describe&lt;/code&gt;/&lt;code&gt;context&lt;/code&gt; describes a pre-condition for the test, it&#39;s a &lt;code&gt;context&lt;/code&gt;; otherwise
it&#39;s a &lt;code&gt;describe&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;context&lt;/code&gt; wouldn&#39;t be hard to implement in JavaScript — I&#39;d bet there are test frameworks that have it. It&#39;d just
be an alias of &lt;code&gt;describe&lt;/code&gt;.&lt;/p&gt;

&lt;a name=&quot;L2...code.let..code..blocks&quot;&gt;&lt;/a&gt;
&lt;h2&gt;2. &lt;code&gt;let&lt;/code&gt; blocks&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://relishapp.com/rspec/rspec-core/v/2-11/docs/helper-methods/let-and-let&quot;&gt;&lt;code&gt;let&lt;/code&gt; blocks&lt;/a&gt; are used in an RSpec
test to set things up for your test scenario.&lt;/p&gt;

&lt;p&gt;Here&#39;s a test for a &lt;code&gt;Counter&lt;/code&gt; class, verifying that when I call the &lt;code&gt;increment&lt;/code&gt; method on an instance, its stored
value becomes &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;rb&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;counter&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;increment&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;increments by 1&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;increment&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;If you&#39;re new to Ruby, the only line that doesn&#39;t translate almost directly to a similar JavaScript expression is
the &lt;code&gt;let&lt;/code&gt; statement.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;let&lt;/code&gt; statement in RSpec &lt;a href=&quot;https://medium.com/@tomkadwill/all-about-rspec-let-a3b642e08d39&quot;&gt;creates a method with a specified name, which lazily evaluates to the result of a
block&lt;/a&gt;. In this case, we get a method named &lt;code&gt;counter&lt;/code&gt;, which is evaluated to a new instance of the
&lt;code&gt;Counter&lt;/code&gt; class. There are a few important things to note about &lt;code&gt;let&lt;/code&gt; blocks:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;They&#39;re evaluated lazily (by default). That &lt;code&gt;counter&lt;/code&gt; doesn&#39;t actually get created until I reference it.&lt;/li&gt;
&lt;li&gt;They&#39;re memoized. Wherever I reference &lt;code&gt;counter&lt;/code&gt; within that &lt;code&gt;describe &quot;counter&quot;&lt;/code&gt; block, I&#39;m getting the same
instance. It&#39;s initialized to whatever I return inside the &lt;code&gt;let&lt;/code&gt; block.&lt;/li&gt;
&lt;li&gt;I can override a &lt;code&gt;let&lt;/code&gt; block deeper inside the tree of tests, by declaring another &lt;code&gt;let(:counter)&lt;/code&gt; later. When I
do this, the closest &lt;code&gt;let&lt;/code&gt; block in the tree for that thing is the one that gets used.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;I don&#39;t think it&#39;s possible to implement &lt;code&gt;let&lt;/code&gt; in JavaScript — at least not in the way it exists in RSpec. It
relies on
&lt;a href=&quot;https://www.leighhalliday.com/ruby-metaprogramming-method-missing&quot;&gt;Ruby meta-programming to intercept calls to missing methods&lt;/a&gt;,
which just doesn&#39;t exist in JavaScript. The &lt;a href=&quot;https://github.com/enova/givens&quot;&gt;givens&lt;/a&gt; library does something pretty
close, but it relies on string keys to define things, and there&#39;s a bit of extra work when working with TypeScript.&lt;/p&gt;

&lt;a name=&quot;What.s.the.big.deal.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;What&#39;s the big deal?&lt;/h2&gt;

&lt;p&gt;On the surface these two features don&#39;t seem like much, but they provide a really powerful framework for organizing
test cases and the associated test setup.&lt;/p&gt;

&lt;p&gt;With the &lt;code&gt;let&lt;/code&gt; blocks being lazily evaluated, and override-able, I can set up data at the exact level of tests that
I need it. When I need to override it for a certain set of tests, I can put another &lt;code&gt;let&lt;/code&gt; block in that set. In
JavaScript I can define functions to set up my data for me with just the changes I need at each test level, or I
can use &lt;code&gt;beforeEach&lt;/code&gt; blocks, but all that can get pretty noisy.&lt;/p&gt;

&lt;p&gt;And with &lt;code&gt;context&lt;/code&gt; blocks, I can more clearly lay out the scenarios of my tests. Yes, I &lt;em&gt;could&lt;/em&gt; just do this with
more &lt;code&gt;describe&lt;/code&gt; blocks in JavaScript, but how often have you found JavaScript tests that actually do this? I&#39;ve
personally seen/written too many tests to count named something like
&lt;code&gt;it(&quot;returns false when the flag is enabled, they&#39;re located in the US, but they have brown hair.&quot;)&lt;/code&gt;. That&#39;s three
scenarios rolled into one test name. It works, but being able to nest different &lt;code&gt;context&lt;/code&gt; blocks to define my
complex scenarios is much easier to read.&lt;/p&gt;

&lt;a name=&quot;Examples&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Examples&lt;/h2&gt;

&lt;p&gt;Here&#39;s an example of some tests I could write in RSpec with &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;context&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;20&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;21&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;22&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;23&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;24&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;25&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;26&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;27&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;rb&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Calculator&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:calculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calculator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;.multiply&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calculator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;when the first value is negative&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;when the second value is negative&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;returns a positive number&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;          &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;when the second value is positive&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;returns a negative number&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;          &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;HOW COOL IS THAT! Every &lt;code&gt;describe&lt;/code&gt;/&lt;code&gt;context&lt;/code&gt; block has &lt;em&gt;exactly&lt;/em&gt; the setup data it needs defined clearly inside it.
And each block has very little noise to distract you.&lt;/p&gt;

&lt;p&gt;Here&#39;s what I&#39;d do in JavaScript/Jest to accomplish something similar:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;20&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;21&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;22&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;23&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;24&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;25&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;26&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;27&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;28&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;29&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;30&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;31&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;JavaScript&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Calculator&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;calculator&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;calculator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Calculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;.multiply&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;second&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;calculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;when the first value is negative&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;when the second value is negative&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;returns a positive number&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;          &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;when the second value is positive&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;returns a negative number&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;          &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;There&#39;s definitely a bit more noise here, especially with the &lt;code&gt;beforeEach&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt; statements. It&#39;s not a &lt;em&gt;lot&lt;/em&gt;
more noise, but it is definitely more noise.&lt;/p&gt;

&lt;p&gt;In real life I wouldn&#39;t expect to find tests like the above JavaScript example. I&#39;d expect to find the tests in
JavaScript looking more like this:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;JavaScript&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Calculator&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;calculator&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;calculator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Calculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;.multiply&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;returns a positive number when the first number is negative and the second number is negative&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;calculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;returns a negative number when the first number is negative and the second number is positive&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;calculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;You could certainly make the case for this contrived example that &lt;em&gt;this&lt;/em&gt; is actually the most readable set of
tests, because there&#39;s less code. I would have a hard time arguing. But most real-life tests are more complex than
these examples, with state and side-effects to mock out, and more scenarios and edge cases worth testing. Each test
case here includes multiple conditions, but there are only two permutations represented. Once things get a little
more complicated than these contrived examples, the RSpec tests become the clear winner for me — they&#39;re easier to
read and manage, with their &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;context&lt;/code&gt; blocks more discretely describing your test scenarios.&lt;/p&gt;

&lt;p&gt;You could also argue that the bigger win here would be breaking scenarios into individual &lt;code&gt;describe&lt;/code&gt; blocks in
JavaScript tests, instead of cramming the entire scenario into one long &lt;code&gt;it(&quot;...&quot;)&lt;/code&gt; statement. I wouldn&#39;t argue
that either.&lt;/p&gt;

&lt;a name=&quot;Caveats&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Caveats&lt;/h2&gt;

&lt;p&gt;The day after I wrote this article, a conversation started in the Artsy slack about how confusing &lt;code&gt;let&lt;/code&gt; was because
it moved variable initializations far away from where the tests used them.&lt;/p&gt;

&lt;p&gt;This makes sense! I think it points to two truths in software development:&lt;/p&gt;

&lt;a name=&quot;Code.readability.is.subjective&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Code readability is subjective&lt;/h3&gt;

&lt;p&gt;For years I was convinced that practices like small functions or long and descriptive function names were
&lt;em&gt;objectively&lt;/em&gt; more readable. I leaned into this, and my code reviews almost always included comments on what I
thought would make the code more readable.&lt;/p&gt;

&lt;p&gt;As more people pushed back on my feedback over time, I realized that the feedback I was giving was &lt;em&gt;subjective&lt;/em&gt;. I
still like code that uses many short functions wired together, but not everyone finds that more readable! I&#39;ve
stopped giving readability feedback on PRs, unless I can provide nearly-objective facts or scenarios that point to
a readability improvement.&lt;/p&gt;

&lt;p&gt;In this article, I find the RSpec &lt;code&gt;let&lt;/code&gt; examples to be much more readable than the JavaScript examples. But you and
your team might not! Maybe the distance between a &lt;code&gt;let&lt;/code&gt; block&#39;s definition and its method&#39;s usage makes it hard for
you to follow the test. That&#39;s cool!&lt;/p&gt;

&lt;a name=&quot;Any.cool.thing.can.be.abused&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Any cool thing can be abused&lt;/h3&gt;

&lt;p&gt;Earlier in this article I linked to &lt;a href=&quot;https://medium.com/@tomkadwill/all-about-rspec-let-a3b642e08d39&quot;&gt;an article that describes &lt;code&gt;let&lt;/code&gt; blocks in more detail&lt;/a&gt;. It includes
&lt;a href=&quot;https://www.rubydoc.info/github/rspec/rspec-core/RSpec%2FCore%2FMemoizedHelpers%2FClassMethods%3Alet&quot;&gt;a warning from the actual &lt;code&gt;let&lt;/code&gt; docs&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Note: &lt;code&gt;let&lt;/code&gt; can enhance readability when used sparingly (1,2, or maybe 3 declarations) in any given example
group, but that can quickly degrade with overuse. YMMV.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&#39;ve definitely seen code where I had a hard time following a stream of &lt;code&gt;let&lt;/code&gt; blocks. The RSpec example I gave
above reads nicely to me — but it&#39;s probably teetering on the edge of where &lt;code&gt;let&lt;/code&gt; usage becomes confusing. I&#39;m
guessing I have a slightly higher tolerance for this particular abstraction than my friends who don&#39;t like
it...again pointing to readability being subjective.&lt;/p&gt;

&lt;p&gt;Having said all that — lately every time I try to write JavaScript tests, I find myself trying (unsuccessfully) to
recreate that RSpec example above. It represents exactly how I want to think about complex test scenarios. Each
level of the tests has exactly the setup that is unique to that level. There&#39;s very little distraction or noise at
each &lt;code&gt;context&lt;/code&gt; and &lt;code&gt;it&lt;/code&gt;. It totally aligns with
&lt;a href=&quot;https://www.stevenhicks.me/blog/2018/01/chekhovs-gun-and-better-unit-tests/&quot;&gt;my desire to minimize irrelevant test setup&lt;/a&gt;.
I&#39;m in ❤️ ❤️ ❤️ ❤️ ❤️.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;This post originally appeared on
&lt;a href=&quot;https://www.stevenhicks.me/blog/2021/09/what-javascript-tests-could-learn-from-rspec/&quot;&gt;Steve&#39;s blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;
</description>
        <pubDate>Fri, 10 Sep 2021 00:00:00 +0200</pubDate>
        <link>https://artsy.github.io/blog/2021/09/10/what-javascript-tests-could-learn-from-rspec/</link>
        <guid isPermaLink="true">https://artsy.github.io/blog/2021/09/10/what-javascript-tests-could-learn-from-rspec/</guid>
        
        
        <category>jest</category>
        
        <category>rspec</category>
        
        <category>testing</category>
        
      </item>
    
      <item>
        <title>Unstructured Knowledge Sharing</title>
        <description>&lt;p&gt;We have a handful of regularly scheduled meetings in place at Artsy devoted to knowledge sharing.&lt;/p&gt;

&lt;p&gt;But what about the &lt;em&gt;unstructured&lt;/em&gt; ways in which we share knowledge? If structured sharing time demonstrates that a
team is &lt;em&gt;interested&lt;/em&gt; in spreading knowledge, &lt;em&gt;unstructured&lt;/em&gt; sharing time demonstrates that spreading knowledge is
the default mode for the team. Instead of the team forming habits of working in isolation or hoarding expertise,
they&#39;ve formed habits of learning from and teaching each other.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;Regularly scheduled meetings we have for knowledge sharing include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Team-based knowledge share meetings&lt;/li&gt;
&lt;li&gt;Open office hours for anyone to bring questions&lt;/li&gt;
&lt;li&gt;Lunch &amp;amp; learns for presenting across all of Artsy engineering&lt;/li&gt;
&lt;li&gt;Show &amp;amp; tell, where attendees bring recent learnings or explorations to demo to the group&lt;/li&gt;
&lt;li&gt;Peer learning groups that are dedicated to learning a specific topic in development&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;As &lt;a href=&quot;https://twitter.com/ashfurrow&quot;&gt;Ash&lt;/a&gt; mentioned in &lt;a href=&quot;https://artsy.github.io/blog/2020/12/09/share-your-knowledge/&quot;&gt;his article on knowledge shares&lt;/a&gt;, these are all great opportunities
for us to share knowledge. Learning is easy to de-prioritize in the face of shipping features, and scheduling these
meetings reinforces learning as a priority.&lt;/p&gt;

&lt;p&gt;Recently &lt;a href=&quot;https://github.com/damassi&quot;&gt;Chris Pappas&lt;/a&gt; pointed out the incredible value we get out of one specific Slack channel:&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Shortest blog post of all time:&lt;br&gt;“Add a &lt;a href=&quot;https://twitter.com/hashtag/dev?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#dev&lt;/a&gt;-help channel to your slack where devs can pose questions to the wider team. You won’t regret it!”&lt;br&gt;-- Chris Pappas&lt;/p&gt;&amp;mdash; Artsy Open Source (@ArtsyOpenSource) &lt;a href=&quot;https://twitter.com/ArtsyOpenSource/status/1357819867638812672?ref_src=twsrc%5Etfw&quot;&gt;February 5, 2021&lt;/a&gt;&lt;/blockquote&gt;


&lt;p&gt; &lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;This piqued my interest. What unstructured/unscheduled things do we do at Artsy to demonstrate our emphasis on
learning?&lt;/p&gt;

&lt;a name=&quot;The..dev-help.Slack.Channel&quot;&gt;&lt;/a&gt;
&lt;h2&gt;The #dev-help Slack Channel&lt;/h2&gt;

&lt;p&gt;We have many dev-specific channels set up in the Artsy Slack, but one in particular has become a massively
important knowledge-base for the entire team: the #dev-help channel.&lt;/p&gt;

&lt;p&gt;This channel is a place for engineers to post when they&#39;re stuck. All engineers watch the #dev-help channel (to
some degree) and offer support when they can. Each issue is threaded to avoid noise in the channel. When the
question is answered, it gets marked as &quot;solved&quot; by applying a ✅ reaction. &lt;a href=&quot;https://github.com/pvinis&quot;&gt;Pavlos&lt;/a&gt; set up a Slack app
that auto-applies the ✅ reaction when someone says &quot;solved&quot; in the thread.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2021-05-11-unstructured-knowledge-sharing/dev-help.png&quot; alt=&quot;A question asked and answered in our #dev-help slack&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The cumulative result of the questions asked and answered in this channel is an incredible knowledge base for all
engineers. When I run into a new issue, the first place I search is #dev-help. More often than not I find my exact
problem already solved.&lt;/p&gt;

&lt;p&gt;This knowledge base is so important and powerful that it&#39;s no longer only a place to &lt;em&gt;ask&lt;/em&gt; for help. Engineers will
also share problems they&#39;ve &lt;em&gt;already solved&lt;/em&gt; in a new thread in the channel, in case someone else runs into the
problem. Usually we&#39;ll tag these problems up front with &lt;code&gt;[already solved]&lt;/code&gt; or similar, to make it obvious no one
should spend cycles trying to solve this problem.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2021-05-11-unstructured-knowledge-sharing/already-solved.png&quot; alt=&quot;An already-solved thread in our #dev-help slack&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One other important thing to say about the #dev-help channel: as engineers it&#39;s tempting to solve problems with new
and novel tooling, but in the case of #dev-help we found a way to use our existing tooling in a slightly different
way. Sometimes the best solution is one you already have. We could have investigated dedicated software like Stack
Overflow for Teams, or we could have built our own knowledge-base tool. Instead we put some rules around how we
would use a Slack channel, and gained a huge benefit at a fraction of the cost.&lt;/p&gt;

&lt;a name=&quot;Internal.Live-Streaming&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Internal Live-Streaming&lt;/h2&gt;

&lt;p&gt;Occasionally an Artsy engineer will broadcast that they&#39;re taking on work that is ripe for knowledge-sharing, and
they&#39;ll spin up a Zoom call for others to join. It might be something they know how to solve — like when
&lt;a href=&quot;https://github.com/anandaroop&quot;&gt;Roop&lt;/a&gt; spun up a call to walk through how he&#39;d use &lt;a href=&quot;https://observablehq.com/&quot;&gt;Observable&lt;/a&gt; to explore search index
weighting. There might be more uncertainty to the problem, like when &lt;a href=&quot;https://github.com/pvinis&quot;&gt;Pavlos&lt;/a&gt; started up a call to
investigate a CI build failure using &lt;a href=&quot;https://git-scm.com/docs/git-bisect&quot;&gt;&lt;code&gt;git bisect&lt;/code&gt;&lt;/a&gt;. It might be somewhere in between, like when
&lt;a href=&quot;https://github.com/admbtlr&quot;&gt;Adam&lt;/a&gt; was doing some refactoring of our React Native navigation.&lt;/p&gt;

&lt;p&gt;Sometimes this looks like a pairing or mobbing session, but sometimes it looks more like live-streaming. An
engineer is demonstrating by solving a real problem. If audience members can contribute, great — but they are also
welcome to tag along and learn.&lt;/p&gt;

&lt;a name=&quot;Pairing&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Pairing&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/yuki24&quot;&gt;Yuki&lt;/a&gt; wrote on this blog &lt;a href=&quot;https://artsy.github.io/blog/2018/10/19/pair-programming/&quot;&gt;about pair-programming at Artsy&lt;/a&gt;. Pairing isn&#39;t an unusual practice
for development teams....but there is something notable in regards to knowledge-sharing.&lt;/p&gt;

&lt;p&gt;We&#39;re somewhere in the middle on the pairing frequency spectrum at Artsy. We don&#39;t have dedicated pairs working on
problems together all day/every day. But we also don&#39;t only pair when we&#39;re stuck.&lt;/p&gt;

&lt;p&gt;Pairing when you&#39;re stuck is great, and it can help move you forward on a problem. If that&#39;s the only time you
pair, though, you&#39;re missing out on a massive learning opportunity.&lt;/p&gt;

&lt;p&gt;Pairing to build a feature gives you exposure to an entire toolbox you might never have used before. How does your
pair approach a problem? How do they manage their time? What development tools do they use? What techniques do they
use for testing and debugging? How do they tighten their feedback loop? This is knowledge-sharing beyond the code
or the product you&#39;re building — it&#39;s knowledge-sharing of tools, skills, and habits.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;What are the unstructured/unscheduled ways in which your team shares knowledge? Leave us a note in the comments!&lt;/p&gt;
</description>
        <pubDate>Tue, 11 May 2021 00:00:00 +0200</pubDate>
        <link>https://artsy.github.io/blog/2021/05/11/unstructured-knowledge-sharing/</link>
        <guid isPermaLink="true">https://artsy.github.io/blog/2021/05/11/unstructured-knowledge-sharing/</guid>
        
        
        <category>culture</category>
        
        <category>people</category>
        
        <category>teams</category>
        
      </item>
    
      <item>
        <title>Testing React Tracking with Jest and Enzyme</title>
        <description>&lt;p&gt;Recently, I needed to test a button that would make an analytics tracking call using
&lt;a href=&quot;https://github.com/NYTimes/react-tracking&quot;&gt;react-tracking&lt;/a&gt; and then navigate to a new page in a callback. This
presented some challenges - I wasn&#39;t sure how to create a mocked version of react-tracking that would allow a
callback to be passed.&lt;/p&gt;

&lt;p&gt;With some help from fellow Artsy engineers &lt;a href=&quot;https://github.com/damassi&quot;&gt;Christopher Pappas&lt;/a&gt; and
&lt;a href=&quot;https://twitter.com/pvinis&quot;&gt;Pavlos Vinieratos&lt;/a&gt;, I got the tracking and testing to work. Here&#39;s how we did it.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;A.little.context&quot;&gt;&lt;/a&gt;
&lt;h1&gt;A little context&lt;/h1&gt;

&lt;p&gt;This work took place in Volt, our partner CMS (it&#39;s sadly a private repository, but I&#39;ll do my best to paste in
relevant code snippets so you&#39;re not totally in the dark). Volt has been around for a long time and has had several
different client-side tracking implementations over the years. In this case, I wanted to take the opportunity to
bring Volt up to standard with our other big apps, &lt;a href=&quot;https://github.com/artsy/force/&quot;&gt;Force&lt;/a&gt; and
&lt;a href=&quot;https://github.com/artsy/eigen&quot;&gt;Eigen&lt;/a&gt;. They both use react-tracking and
&lt;a href=&quot;https://github.com/artsy/cohesion/&quot;&gt;Cohesion&lt;/a&gt;, our centralized analytics schema.&lt;/p&gt;

&lt;p&gt;Our use-case was a button that would navigate the user to a new page. The button had been implemented in a previous
PR, and now we wanted to make it execute a tracking call before navigating.&lt;/p&gt;

&lt;p&gt;We use Segment for tracking, and their tracking setup relies on a JS snippet being available on your pages. That
snippet sets a &lt;code&gt;window.analytics&lt;/code&gt; property, which in turn
&lt;a href=&quot;https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/#track&quot;&gt;has a&lt;/a&gt; &lt;code&gt;.track()&lt;/code&gt;
method. On a fundamental level, all of our tracking calls boil down to a call to &lt;code&gt;window.analytics.track()&lt;/code&gt;. We
pass a list of properties to &lt;code&gt;.track()&lt;/code&gt;, Segment receives the event and properties, and the resulting JSON is
stored in our data warehouse.&lt;/p&gt;

&lt;a name=&quot;Adding.react-tracking&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Adding react-tracking&lt;/h1&gt;

&lt;p&gt;First, there was a bit of setup required to get react-tracking working. The react-tracking package
&lt;a href=&quot;https://github.com/NYTimes/react-tracking#custom-optionsdispatch-for-tracking-data&quot;&gt;assumes you&#39;re using Google Tag Manager by default&lt;/a&gt;,
but allows you to override that behavior with a custom &lt;code&gt;dispatch&lt;/code&gt; function. In our case, we wrap our React apps in
a &lt;code&gt;&amp;lt;BaseApp&amp;gt;&lt;/code&gt; component, so we added a new &lt;code&gt;&amp;lt;TrackerContextCohesion&amp;gt;&lt;/code&gt; component with a custom &lt;code&gt;dispatch&lt;/code&gt; that would
be available to all of our React apps:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;20&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ts&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;react&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;track&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;react-tracking&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// We&amp;#39;re following the instructions from react-tracking&amp;#39;s README on overriding the dispatch function&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TrackerContextCohesion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;track&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;c1&quot;&gt;// This is blank because we&amp;#39;re not actually tracking a specific event here, just modifying dispatch&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;c1&quot;&gt;// so that all components in the tree can use it&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;trackEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;analytics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;track&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BaseApp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TrackerContextCohesion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/TrackerContextCohesion&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;This allows us to make tracking calls in our components, including the passing of custom callback functions:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;20&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;21&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;22&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;23&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;24&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ts&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useTracking&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;react-tracking&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;@artsy/palette&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// Assumes that MyComponent is wrapped in &amp;lt;BaseApp&amp;gt; wherever it&amp;#39;s used, giving&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// it access to tracking context&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyComponent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;trackEvent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useTracking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;trackEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Click&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;somePropToTrack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;andy-warhol&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Additional Segment options, e.g. integrations: { &amp;#39;Intercom&amp;#39;: false, }&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/artworks&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Track&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;navigate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/Button&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/Box&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Being able to pass a callback was especially important in our case. We realized that if we needed to track &lt;em&gt;and
then navigate&lt;/em&gt;, the callback was necessary. In our testing, we saw that if we simply tried to fire the tracking
call then run &lt;code&gt;window.location.assign()&lt;/code&gt; synchronously, the tracking call might not get executed before the
navigation started, so we would effectively lose that event. Segment specifically
&lt;a href=&quot;https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/#track&quot;&gt;allows you to pass a callback&lt;/a&gt;
to their tracking function to their track function for this situation. They describe the optional &lt;code&gt;callback&lt;/code&gt;
parameter as:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;A function that is executed after a short timeout, giving the browser time to make outbound requests first.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Thus, we pass the tracking data and the callback to the custom &lt;code&gt;track&lt;/code&gt; call we implemented, and we&#39;re good to go.&lt;/p&gt;

&lt;a name=&quot;The.problem.with.testing&quot;&gt;&lt;/a&gt;
&lt;h1&gt;The problem with testing&lt;/h1&gt;

&lt;p&gt;Our use-case is simple enough, but we wanted to make sure that when the button was pressed, we would both execute
the tracking call and then navigate. A test checking that the navigation worked had already been implemented.
However, after moving the &lt;code&gt;window.location.assign&lt;/code&gt; call into a callback, our test started failing because our
component was trying to execute a tracking call before navigating.&lt;/p&gt;

&lt;p&gt;The test that predated the addition of tracking looked like this:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ts&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;react&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;enzyme&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyComponent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;./MyComponent&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TestApp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;testing/components/TestApp&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assign&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Navigates to artworks page&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TestApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MyComponent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/TestApp&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Button&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;simulate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;click&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBeCalledWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/artworks&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;So we were rendering our button, clicking on it, and expecting to try to navigate. How could we mock our tracking
call while still executing a passed callback?&lt;/p&gt;

&lt;a name=&quot;The.final.solution&quot;&gt;&lt;/a&gt;
&lt;h1&gt;The final solution&lt;/h1&gt;

&lt;p&gt;Our mock ended up looking like this:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ts&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;analytics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;track&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;jest.fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;react-tracking&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;useTracking&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;jest.fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;track&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;trackEvent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;useTracking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mockImplementation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;trackEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Let&#39;s break that down section by section. First:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ts&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;analytics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;track&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;jest.fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;As noted above, all of our tracking calls assume &lt;code&gt;window.analytics&lt;/code&gt; exists and that it has a &lt;code&gt;.track()&lt;/code&gt; method. We
started by mocking that setup.&lt;/p&gt;

&lt;p&gt;Next:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ts&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;react-tracking&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;useTracking&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;jest.fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;track&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Here we mock the &lt;code&gt;react-tracking&lt;/code&gt; package and two specific methods it exports, &lt;code&gt;useTracking&lt;/code&gt; and &lt;code&gt;track&lt;/code&gt;. We made
&lt;code&gt;useTracking&lt;/code&gt; a Jest function - we&#39;ll flesh it out further a few lines farther down in the file.&lt;/p&gt;

&lt;p&gt;Then there&#39;s the mocking of &lt;code&gt;track&lt;/code&gt;. To put it in words, our mock is: a function that returns a function that takes
in &lt;code&gt;children&lt;/code&gt; and returns those &lt;code&gt;children&lt;/code&gt;. That might sound like gibberish at first blush, but essentially what
we&#39;re doing is mocking the function composition we performed earlier when creating &lt;code&gt;TrackerContextCohesion&lt;/code&gt;. We
needed something that was the same shape as &lt;code&gt;react-tracking&lt;/code&gt;&#39;s &lt;code&gt;track()&lt;/code&gt;, but we don&#39;t care about overriding
&lt;code&gt;dispatch&lt;/code&gt; in our mocks.&lt;/p&gt;

&lt;p&gt;Last:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ts&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;trackEvent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;useTracking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mockImplementation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;trackEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;trackEvent&lt;/code&gt; is a mock function that takes in an &lt;code&gt;args&lt;/code&gt; object and executes &lt;code&gt;args.callback()&lt;/code&gt;. We then update our
&lt;code&gt;useTracking&lt;/code&gt; mock to make it return a function that returns an object with a &lt;code&gt;trackEvent&lt;/code&gt; property. What a
mouthful! That sounds super confusing, but remember that we&#39;re trying to mock something that we actually use like
this:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ts&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;trackEvent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useTracking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;So basically, our goal was to mock &lt;code&gt;trackEvent&lt;/code&gt; and we needed to emulate the shape it has when it&#39;s exported by
&lt;code&gt;react-tracking&lt;/code&gt;. Hopefully that makes things a little clearer.&lt;/p&gt;

&lt;p&gt;After some tinkering and eventually getting the mocks to work in a single test file, we moved these mocked
functions to a &lt;code&gt;setup.ts&lt;/code&gt; file that all of our Jest tests load automatically. We chose to make these mocks
available to all tests because then we wouldn&#39;t get surprising test failures if we, say, forgot that we were making
a tracking call in a component and didn&#39;t explicitly mock the tracking calls in those tests.&lt;/p&gt;

&lt;p&gt;At the end of the day, we can use these mocked calls in our test files by doing the following:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;20&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;21&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;22&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;23&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;24&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;25&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ts&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;react&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;enzyme&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyComponent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;./MyComponent&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TestApp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;testing/components/TestApp&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useTracking&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;react-tracking&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// This only works because we mock tracking in setup.ts, and we only need to&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// declare it because we want to check how many times it was called. Also, it&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// would break the rules of hooks (https://reactjs.org/docs/hooks-rules.html)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// if it wasn&amp;#39;t mocked. Tread cautiously!&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;trackEvent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useTracking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assign&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Calls tracking and navigates to artworks page&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TestApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MyComponent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/TestApp&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Button&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;simulate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;click&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trackEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toHaveBeenCalledTimes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBeCalledWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/artworks&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;That&#39;s it! If you&#39;re trying to test something similar and found this post, I hope it helps you out. If so, or if
you&#39;re still confused, leave a comment!&lt;/p&gt;
</description>
        <pubDate>Thu, 15 Apr 2021 00:00:00 +0200</pubDate>
        <link>https://artsy.github.io/blog/2021/04/15/testing-react-tracking-with-jest-and-enzyme/</link>
        <guid isPermaLink="true">https://artsy.github.io/blog/2021/04/15/testing-react-tracking-with-jest-and-enzyme/</guid>
        
        
        <category>cms</category>
        
        <category>enzyme</category>
        
        <category>react-tracking</category>
        
        <category>testing</category>
        
        <category>tracking</category>
        
        <category>volt</category>
        
      </item>
    
      <item>
        <title>Accessing the Relay Store Without a Mutation</title>
        <description>&lt;p&gt;I recently encountered a problem where client-side data (returned from a Relay query) became out of sync after a
user interaction. How can we make sure our data is consistent while maintaining a single source of truth? This post
explores why a developer might want to update client-side data locally, the basics of Relay and its store, and how
to delete records in the store when you&#39;re not using a mutation.&lt;/p&gt;

&lt;a name=&quot;Relay.x.Artsy.x.Me&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Relay x Artsy x Me&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://relay.dev/&quot;&gt;Relay&lt;/a&gt; is a GraphQL client library maintained by Facebook engineers and enables rapid client-side data
fetching in React applications. &lt;a href=&quot;https://artsy.github.io/blog/2019/04/10/omakase-relay/&quot;&gt;Artsy&#39;s adoption of Relay&lt;/a&gt; coincided with our move
toward using React Native for our mobile work around 2016. I joined Artsy as an engineer in November of 2020 (after
&lt;a href=&quot;https://medium.com/swlh/how-losing-my-job-helped-me-find-my-way-back-8c8f86552acc&quot;&gt;transitioning to engineering from a non-technical role at the
company&lt;/a&gt;.) When I joined, I was about a year into React development
and completely new to Relay.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;I work on the Partner Experience (PX) team at Artsy. We build and maintain software used by our gallery and auction
house partners to sell artwork on Artsy. Although Relay is not new to Artsy, it’s relatively new to our team’s main
repository, Volt. (Volt is Artsy’s CMS used by gallery partners to manage their presences on the platform.) A topic
for another blog post, but Volt’s structure is worth noting here: Volt is a collection of mini React apps injected
into HAML views—our way of incrementally converting the codebase to our new stack.&lt;/p&gt;

&lt;p&gt;Relay’s biggest advantage in my eyes is how it tightly couples the client view and API call (in our case, to the
GraphQL layer of our stack, which we call Metaphysics.) In addition to performance and other benefits, colocating a
component with its data requirements creates a pretty seamless developer experience.&lt;/p&gt;

&lt;a name=&quot;Building.an.Artwork.Checklist&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Building an Artwork Checklist&lt;/h2&gt;

&lt;p&gt;On the PX team, we recently launched a checklist feature aimed at empowering our gallery partners to be more
self-sufficient and find the greatest success possible on Artsy. The checklist prompts galleries to add specific
metadata to artworks that we know (because of our awesome data team) will make the work more likely to sell. The
new feature gathers a list of five high-priority artworks (meaning they are published, for-sale, and by a
top-selling artist) that are missing key pieces of metadata. The checklist prompts users to add the missing
metadata. Users also have the ability to click a button to “snooze” works, which removes them from the list for the
day.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&quot;illustration&quot;&gt;
    &lt;img src=&quot;https://user-images.githubusercontent.com/9466631/114630150-28886200-9c77-11eb-9f04-461101496ee0.png&quot;&gt;
&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;The feature makes use of &lt;a href=&quot;https://redis.io/&quot;&gt;Redis&lt;/a&gt;, a key-value store used for in-memory cache, to store two lists:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;includeIDs&lt;/code&gt; to store the five artworks in the list, so users see a consistent list of artworks whenever they
log in and load the page&lt;/li&gt;
&lt;li&gt;&lt;code&gt;excludeIDs&lt;/code&gt; or “snoozed” IDs which Redis will store for 24 hours and ensure the user does not see&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;When a user presses the “snooze” button, the ID for the artwork is added to the snoozed list in Redis. The list of
&lt;code&gt;includeIDs&lt;/code&gt; and the list of &lt;code&gt;excludeIDs&lt;/code&gt; are passed down from Rails controllers to our HAML views and then passed
as props into our React &lt;code&gt;HomePageChecklist&lt;/code&gt; app. In our Checklist component, we use both the &lt;code&gt;includeIDs&lt;/code&gt; and the
&lt;code&gt;excludeIDs&lt;/code&gt; as arguments passed to our Relay query to determine what is returned from Metaphysics (Artsy&#39;s GraphQL
layer).&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;20&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;21&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;fragment&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ArtworksMissingMetadata_partner&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Partner&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;argumentDefinitions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Int&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;defaultValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;String&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;includeIDs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;[String!]&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;excludeIDs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;[String!]&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;artworksConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$first&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$after&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;includeIDs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$includeIDs&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;excludeIDs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$excludeIDs&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;ArtworksMissingMetadata_partner_artworksConnection&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;edges&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;          &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ArtworksMissingMetadataItem_artwork&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;a name=&quot;Problem:.How.to.Change.the.Data.Displayed.When.a.User.Interacts.with.the.Page&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Problem: How to Change the Data Displayed When a User Interacts with the Page&lt;/h2&gt;

&lt;p&gt;The problem we were running into occurs when the user presses “snooze” on an item. We successfully update Redis
with the new snoozed item, but the UI still renders the item on the page. (This is because the response from Relay
becomes stale.) If the user refreshes the page, the list is correct: The up-to-date Redis &lt;code&gt;excludeIDS&lt;/code&gt; list will be
passed into our component and used in the Relay query. But without refreshing the page, we need to make sure that
the list in the UI updates when the user snoozes an item.&lt;/p&gt;

&lt;p&gt;The initial fix was to use a local state variable to keep track of which items were snoozed. We defined the following variable in the parent
React component that renders the list:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;localSnoozedItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setLocalSnoozedItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([])&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;We passed &lt;code&gt;localSnoozedItems&lt;/code&gt; and &lt;code&gt;setLocalSnoozedItems&lt;/code&gt; down to each of the children items. When the “snooze”
button was pressed on an item, the &lt;code&gt;localSnoozedItems&lt;/code&gt; in the parent was updated with the complete list of snoozed
items. The parent then controls which items get rendered. We used the &lt;code&gt;localSnoozedItems&lt;/code&gt; list to filter the connection
returned from our Relay query (which remember, is already filtered based on our Redis &lt;code&gt;excludeIDs&lt;/code&gt; from Redis.)&lt;/p&gt;

&lt;p&gt;This worked, but it definitely did not feel great to have two sources of truth for snoozing: The Redis key and the
local state variable.&lt;/p&gt;

&lt;a name=&quot;Solution:.Deleting.a.Record.From.the.Relay.Store&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Solution: Deleting a Record From the Relay Store&lt;/h2&gt;

&lt;p&gt;Cue the &lt;a href=&quot;https://relay.dev/docs/api-reference/store/&quot;&gt;RelayModernStore&lt;/a&gt;! I learned that Relay keeps track of the GraphQL
data returned by each query in a store on the client. Each record in the store has a unique ID, and the store can be
changed, added to, and deleted from. There are a couple of helpful blog posts (like
&lt;a href=&quot;https://yashmahalwal.medium.com/a-deep-dive-into-the-relay-store-9388affd2c2b&quot;&gt;this&lt;/a&gt; and
&lt;a href=&quot;https://medium.com/entria/wrangling-the-client-store-with-the-relay-modern-updater-function-5c32149a71ac&quot;&gt;this&lt;/a&gt;) that explain the store and how to
interact with it.&lt;/p&gt;

&lt;p&gt;In most of the Relay documentation, blog posts, and Artsy’s uses cases, the store is accessed through an &lt;code&gt;updater&lt;/code&gt;
function via &lt;a href=&quot;https://relay.dev/docs/guided-tour/updating-data/graphql-mutations/&quot;&gt;mutations&lt;/a&gt;. &lt;a href=&quot;https://relay.dev/docs/guided-tour/updating-data/graphql-mutations/#updater-functions&quot;&gt;Updater functions&lt;/a&gt;
that return the store in the first argument can optionally be added to Relay mutations. Inside that function, you can access
the store to modify the records you need.&lt;/p&gt;

&lt;p&gt;Here&#39;s an example:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;commitMutation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;defaultEnvironment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;mutation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;graphql&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;mutation&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SomeMutation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;updater&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;c1&quot;&gt;// Do something with the store&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;In my use case, I was not using a Relay mutation because I did not need to modify anything on the server. Since
Redis is keeping track of our &lt;code&gt;excludeIDs&lt;/code&gt; for us, any round trip to the server will be up-to-date. We just need to
modify our local data store.&lt;/p&gt;

&lt;p&gt;Relay provides a &lt;a href=&quot;https://relay.dev/docs/guided-tour/updating-data/local-data-updates/&quot;&gt;separate API method to make local updates&lt;/a&gt; to the Relay
store: &lt;code&gt;commitLocalUpdate&lt;/code&gt;. &lt;code&gt;commitLocalUpdate&lt;/code&gt; takes two arguments: the first is the Relay environment, which you
can easily access from the parent Relay fragment or refetch container. The second is an &lt;code&gt;updater&lt;/code&gt; callback function
that returns the store in the first argument. We now have access to the store!&lt;/p&gt;

&lt;a name=&quot;Deleting.a.Connection.Node.with.ConnectionHandler&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Deleting a Connection Node with ConnectionHandler&lt;/h2&gt;

&lt;p&gt;My main hurdle during this journey was finding an appropriate way to hook into the store for our specific use case—when we do
not require an update to server data.&lt;/p&gt;

&lt;p&gt;But to close us out: Let&#39;s finish the job and delete the item from the connection in the store.&lt;/p&gt;

&lt;p&gt;When an item is snoozed, we call &lt;code&gt;commitLocalUpdate&lt;/code&gt;, pass in the Relay environment, and then pass in the &lt;code&gt;updater&lt;/code&gt;
function. Once we have access to the store, our goal is to delete this particular item from the
&lt;code&gt;artworksConnection&lt;/code&gt;, which is the GraphQL object returned by our original Relay query.&lt;/p&gt;

&lt;p&gt;Because we are dealing with connections, we want to use the &lt;a href=&quot;https://relay.dev/docs/api-reference/store/#connectionhandler&quot;&gt;ConnectionHandler
API&lt;/a&gt; provided by Relay. &lt;code&gt;ConnectionHandler.getConnection&lt;/code&gt; takes in the
connection&#39;s parent record (which we can find using the GraphQL ID added as a field on our query for the
connection) as the first argument and the connection key which can be provided through &lt;a href=&quot;https://www.prisma.io/blog/relay-moderns-connection-directive-1ecd8322f5c8&quot;&gt;Relay’s @connection
directive&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once we have the connection, we will use &lt;code&gt;ConnectionHandler.deleteNode&lt;/code&gt; which takes the connection as the first
argument and the id to be deleted, which we can also easily access using the GraphQL ID added as a field to the
query for the item.&lt;/p&gt;

&lt;p&gt;Bonus: Because &lt;code&gt;commitLocalUpdate&lt;/code&gt; works anywhere in Relay land, we got to perform this deletion exactly where the
&quot;snooze&quot; action is happening: in the child item component. (In our previous solution, we had to manage the state of
the children from their parent component, which wasn&#39;t as intuitive.)&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;commitLocalUpdate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;relay-runtime&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;commitLocalUpdate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;relay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parentRecord&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentRecord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;artworksConnection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ConnectionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;parentRecord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;s2&quot;&gt;&amp;quot;ArtworksMissingMetadata_partner_artworksConnection&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;artworksConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;ConnectionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;deleteNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;artworksConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;a name=&quot;Key.Takeaways&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Key Takeaways&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Relay is great because it colocates a component with its data requirements.&lt;/li&gt;
&lt;li&gt;The Relay store allows us to access and modify data that we are using on the client.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;commitLocalUpdate&lt;/code&gt; provides us access to the store if we just need to modify local data and aren’t using a
mutation to update server-side data.&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Thu, 15 Apr 2021 00:00:00 +0200</pubDate>
        <link>https://artsy.github.io/blog/2021/04/15/accessing-the-relay-store/</link>
        <guid isPermaLink="true">https://artsy.github.io/blog/2021/04/15/accessing-the-relay-store/</guid>
        
        
        <category>graphql</category>
        
        <category>react</category>
        
        <category>redis</category>
        
        <category>relay</category>
        
        <category>tooling</category>
        
      </item>
    
      <item>
        <title>Strategies For Small, Focused Pull Requests</title>
        <description>&lt;p&gt;A common suggestion for improving pull requests (PRs) is to &quot;make your PR small and focused&quot;. I myself gave this suggestion in &lt;a href=&quot;https://artsy.github.io/blog/2020/08/11/improve-pull-requests-by-including-valuable-context/&quot;&gt;a recent article on this very blog about including context in PRs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Like most internet advice, this can feel like the &lt;a href=&quot;https://knowyourmeme.com/memes/how-to-draw-an-owl&quot;&gt;&quot;draw the rest of the owl&quot;&lt;/a&gt; meme. Even if we&#39;re in agreement that I &lt;em&gt;should&lt;/em&gt; make a PR smaller...&lt;strong&gt;&lt;em&gt;how&lt;/em&gt;&lt;/strong&gt; do I do it? How do I avoid a big PR when there&#39;s a lot of cross-cutting changes to make? How do I create small, focused units of work when I&#39;m building a large feature? How can I overcome my perfectionism and submit a PR that feels incomplete to me because the edges aren&#39;t all polished?&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;What.is..small.and.focused..&quot;&gt;&lt;/a&gt;
&lt;h2&gt;What is &quot;small and focused&quot;?&lt;/h2&gt;

&lt;p&gt;Not all small PRs are focused. I might sneak five unrelated one-line changes into a PR. While it feels like that will enable me to move quickly, it also runs the risk of four unrelated changes being held up in review because the other is controversial.&lt;/p&gt;

&lt;p&gt;Not all focused PRs are small. I might put an entire feature in one PR, and while it is focused, it&#39;s still going to be difficult for you to review the large amount of changes thoroughly.&lt;/p&gt;

&lt;p&gt;To make our PR reviewers&#39; jobs easier, we&#39;re looking for the intersection of small &lt;em&gt;and&lt;/em&gt; focused. Changes that are cohesive and without distractions. Code that accomplishes one small thing.&lt;/p&gt;

&lt;p&gt;Note that the recommendation for &quot;small and focused&quot; PRs does &lt;strong&gt;not&lt;/strong&gt; include the word &quot;complete&quot;. I&#39;m a perfectionist and I like my work to be very polished before it&#39;s done, but when we&#39;re iterating quickly the polish can come in a follow-up PR. This is the biggest challenge I&#39;ve had as an Artsy engineer — finding the balance between polish and iteration. Artsy&#39;s core values include &lt;a href=&quot;https://github.com/artsy/README/blob/ccfbba13ead7cb6586d2d9bf088e5180907be07b/culture/what-is-artsy.md#impact-over-perfection&quot;&gt;Impact Over Perfection&lt;/a&gt; but my personal values include &quot;make things &lt;em&gt;real good&lt;/em&gt;&quot; and it can be hard for me to navigate that tension.&lt;/p&gt;

&lt;a name=&quot;Integrating.code.a.little.at.a.time&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Integrating code a little at a time&lt;/h3&gt;

&lt;p&gt;A caveat: the recommendations in this article assume you can integrate code a little bit at a time. I&#39;ve worked on teams and projects where we used very long-lived branches for features or even epic — I know those environments exist. This article is probably not the one that will convince you to move to &lt;a href=&quot;https://trunkbaseddevelopment.com/&quot;&gt;trunk-based development&lt;/a&gt;; it also might be less useful without trunk-based development.&lt;/p&gt;

&lt;p&gt;Having said that, even with long-lived feature branches you can introduce code &lt;em&gt;into those branches&lt;/em&gt; a little bit at a time. PRs can be opened against &lt;em&gt;any&lt;/em&gt; branch, not just &lt;code&gt;main&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A couple strategies we use at Artsy for integrating code a little bit at a time:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://trunkbaseddevelopment.com/feature-flags/&quot;&gt;Feature toggles&lt;/a&gt;&lt;/strong&gt;. &lt;a href=&quot;https://artsy.github.io/blog/2020/12/31/echo-supporting-old-app-versions/&quot;&gt;Ash wrote about Echo&lt;/a&gt;, a service for toggling features on mobile devices, but we have additional ways for enabling/disabling features at the system &lt;em&gt;or&lt;/em&gt; user level. When we introduce new code we can hide it behind a feature flag until we&#39;re ready for everyone to see it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&quot;Hidden&quot; routes&lt;/strong&gt;. Often when we redesign or modernize an existing route on Artsy.net we&#39;ll create a &lt;em&gt;second&lt;/em&gt; similar route. We hide the in-progress page behind that new route and don&#39;t share it until it&#39;s ready. 🤫&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Armed with tools for integrating code incrementally, here are some strategies for reducing the size and scope of a PR. I&#39;m not suggesting you use these strategies universally, but if you think you&#39;re headed toward a very large PR, these are some things to try.&lt;/p&gt;

&lt;a name=&quot;Start.with.small.scope.....slice.your.stories.small&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Start with small scope — slice your stories small&lt;/h2&gt;

&lt;p&gt;One of the most valuable lessons I learned as a consultant with a company focused on agile development is that you can almost always slice a story smaller. You can do this by sacrificing quality, but you can also (and probably should) do it by cutting scope. We can ship a new screen for our app sooner if we focus on building the most absolutely critical features first, and follow up with the valuable-but-not-critical features later.&lt;/p&gt;

&lt;p&gt;There are many ways to break a story smaller, and all of them enable you to integrate code sooner in the form of smaller PRs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Separate CRUD (Create, Read, Update, Delete) operations and ship them one at a time&lt;/li&gt;
&lt;li&gt;Separate by user role&lt;/li&gt;
&lt;li&gt;Separate individual edge cases&lt;/li&gt;
&lt;li&gt;Separate a simplified experience from an enhanced version&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Think of these smaller scoped features as self-contained vertical slices of functionality. As each one is released, users can take advantage of them, and your team can start building the next slice.&lt;/p&gt;

&lt;a name=&quot;PR.by.architectural.layer&quot;&gt;&lt;/a&gt;
&lt;h2&gt;PR by architectural layer&lt;/h2&gt;

&lt;p&gt;Rather than building an entire feature end-to-end before creating a pull request, consider integrating one layer at a time. Embrace the boundaries between the front and back ends of your code — submit a PR to introduce changes to the API, and once it&#39;s merged follow up with another PR to introduce changes to the UI.&lt;/p&gt;

&lt;p&gt;Depending on the architecture of your system, you might already be forced to this. At Artsy, our &lt;a href=&quot;https://github.com/artsy/force&quot;&gt;web app lives in one repo&lt;/a&gt;, our &lt;a href=&quot;https://github.com/artsy/metaphysics&quot;&gt;GraphQL endpoint lives in another&lt;/a&gt;, and many services are separated into repositories behind that. We &lt;em&gt;must&lt;/em&gt; integrate our features one layer at a time. Here&#39;s an example where &lt;a href=&quot;https://artsy.github.io/author/matt/&quot;&gt;Matt&lt;/a&gt; &lt;a href=&quot;https://github.com/artsy/metaphysics/pull/2819/files&quot;&gt;added a field to our API&lt;/a&gt; in one PR, and &lt;a href=&quot;https://github.com/artsy/force/pull/6613&quot;&gt;propagated it to the UI&lt;/a&gt; in a separate PR. Even if you don&#39;t have a repository boundary between your API and your UI, splitting PRs at this logical boundary can help make them more digestible.&lt;/p&gt;

&lt;p&gt;The suggestion to PR by architectural layer is not in conflict with slicing stories small — in fact, these two strategies complement each other nicely. A PR that contains multiple features but only one layer is probably large enough to be difficult to review; so is a PR that contains one feature end-to-end. A PR containing one layer of one feature can be easier to review.&lt;/p&gt;

&lt;a name=&quot;Build.a.walking.skeleton&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Build a walking skeleton&lt;/h2&gt;

&lt;p&gt;A &lt;a href=&quot;walking-skeleton&quot;&gt;walking skeleton&lt;/a&gt; is a bare-bones, stripped down implementation of your feature from end-to-end. It connects the UI all the way to the data source. Very little of the feature is presented, but what is there is fully functional.&lt;/p&gt;

&lt;p&gt;Start a new feature with a walking skeleton PR to demonstrate connectivity of the pieces involved. It won&#39;t do very much — maybe it only displays one field — but that&#39;s okay because no one&#39;s going to see it yet. The important thing is that the moving pieces are all connected — the database, the API, the UI.&lt;/p&gt;

&lt;p&gt;Once a walking skeleton PR is merged, you can start filling in the skeleton. Each new sub-feature can be its own PR.&lt;/p&gt;

&lt;p&gt;This is a great approach if your team is looking to swarm on a feature. If we all work on our own sub-features without first merging a walking skeleton, we&#39;re likely to face some intense merge conflict headaches when we realize we&#39;ve all connected the full stack in slightly different ways. Starting with a walking skeleton removes a lot of those merge conflicts, because we&#39;re mostly bolting fields on to existing infrastructure along the way.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/artsy/relay-workshop/pull/1&quot;&gt;This PR&lt;/a&gt; is an example of a walking skeleton. My goal was to stand up an app that connected &lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt;, &lt;a href=&quot;https://relay.dev/&quot;&gt;Relay&lt;/a&gt;, and &lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt;. &lt;a href=&quot;https://github.com/artsy/relay-workshop/pull/1/files#diff-26ad4b834941d9b19ebf9db8082bd202aaf72ea0ddea85f5a8a0cb3c729cc6f2R25&quot;&gt;The actual app doesn&#39;t display very much&lt;/a&gt; — just enough to prove that the pieces were all working.&lt;/p&gt;

&lt;a name=&quot;Separate.risky.controversial.work.from.routine.work&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Separate risky/controversial work from routine work&lt;/h2&gt;

&lt;p&gt;It&#39;s not always possible to identify ahead of time which work will prompt more discussion during review, but sometimes it&#39;s obvious. Novel work that takes thoughtful consideration of multiple approaches is much more likely to invite feedback than work that follows existing patterns.&lt;/p&gt;

&lt;p&gt;Routine implementation can be a noisy distraction in a PR that also contains a unique function that you really want reviewers to see. You should point out the unique bits in the PR body if they&#39;re combined, but you also might consider separating the less-interesting implementation into its own PR.&lt;/p&gt;

&lt;p&gt;The worst review you can get on a PR that contains both novel and routine work is &quot;LGTM!&quot; (looks good to me). It likely means the reviewer couldn&#39;t separate the signal from the noise and overlooked the bits that required more thought and effort.&lt;/p&gt;

&lt;a name=&quot;Separate.infrastructural.work.from.implementations&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Separate infrastructural work from implementations&lt;/h2&gt;

&lt;p&gt;A &lt;a href=&quot;https://en.wikipedia.org/wiki/T-shaped_skills&quot;&gt;t-shaped person&lt;/a&gt; is someone with a lot of shallow experience in many areas, and deep expertise in one or a few areas. Their skills are wide at the base, and tall and narrow in their area of focus.&lt;/p&gt;

&lt;p&gt;Code can have a similar shape. Infrastructural work tends to be wide and shallow — it touches a lot of places in your code, but it doesn&#39;t go deep in any of them. Implementation work tends to be the opposite — it doesn&#39;t affect the entire app, but it goes very deep for one feature.&lt;/p&gt;

&lt;p&gt;We probably review infrastructural changes differently than we review implementation changes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Infrastructural work deserves scrutiny for the abstractions it introduces and how it might affect performance or future implementations. These kinds of changes introduce new patterns to the codebase and we want to make sure they&#39;re useful and usable patterns.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An individual implementation gets more scrutiny on user-facing details. It&#39;s probably combining &lt;em&gt;existing&lt;/em&gt; patterns, so we&#39;ll spend less time looking at abstractions. We&#39;ll spend more time confirming it works for our users.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;When a large PR combines wide, shallow, abstract work with deep, narrow, concrete work, it requires the reviewer to shift between two different mindsets. You might consider breaking your PR into two: one containing the wide infrastructural work, and one containing the deep implementation work. This allows reviewers to focus on abstractions in one PR and user-facing details in the other.&lt;/p&gt;

&lt;p&gt;Some examples of infrastructural changes that could be separated from implementation work:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We introduced a seam to the code in order to make room for our implementation.&lt;/li&gt;
&lt;li&gt;We updated a dependency to take advantage of a new feature.&lt;/li&gt;
&lt;li&gt;We refactored before we started our implementation.&lt;/li&gt;
&lt;/ul&gt;


&lt;a name=&quot;Separating.an.already-large.PR&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Separating an already-large PR&lt;/h2&gt;

&lt;p&gt;It&#39;s natural for PRs to grow large. &lt;a href=&quot;https://thedecisionlab.com/biases/optimism-bias/&quot;&gt;Optimism bias&lt;/a&gt; diminishes our ability to estimate work often resulting in more code changes than we expected. A feature seems like it won&#39;t take much work until you get deeper and find complexity in places you hadn&#39;t considered. There&#39;s a lot of uncertainty when you start working on a feature and we&#39;d need to model the entire problem to completion to know what the PR was going to look like before we started. A PR seems like it will be small until suddenly...it isn&#39;t anymore.&lt;/p&gt;

&lt;p&gt;This is what usually prevents developers from separating PRs — by the time you recognize the PRs could be de-tangled, it seems like a lot of effort to de-tangle them.&lt;/p&gt;

&lt;p&gt;When you&#39;ve got a PR/branch that contains multiple lines of work and you want to separate them, &lt;a href=&quot;https://www.atlassian.com/git/tutorials/rewriting-history/git-rebase&quot;&gt;&lt;code&gt;git rebase&lt;/code&gt;&lt;/a&gt; is your best friend. Rebasing enables you to rename, reorder, combine, and separate commits. Use &lt;code&gt;git rebase&lt;/code&gt; to group your commits into one set for each branch you want to extract, and submit a PR for each smaller set of changes.&lt;/p&gt;

&lt;p&gt;Good commit hygiene makes it easier to rebase commits. Commit small units of work so that they can be re-ordered and grouped, and apply clear messages to each commit in case you need to move it. While you might not &lt;em&gt;always&lt;/em&gt; separate/rebase PR branches, you&#39;ll appreciate small commits with clear messages when you do.&lt;/p&gt;

&lt;a name=&quot;Small.PRs.start.long.before.the.work.starts&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Small PRs start long before the work starts&lt;/h2&gt;

&lt;p&gt;The size of a pull request can be influenced long before the PR is opened. Slice features small in your product backlog; make small commits along the way; combine small commits into small pull requests. Among other benefits, a focus on breaking work into small parts will make it easier to review your changes.&lt;/p&gt;
</description>
        <pubDate>Tue, 09 Mar 2021 00:00:00 +0100</pubDate>
        <link>https://artsy.github.io/blog/2021/03/09/strategies-for-small-focused-pull-requests/</link>
        <guid isPermaLink="true">https://artsy.github.io/blog/2021/03/09/strategies-for-small-focused-pull-requests/</guid>
        
        
        <category>community</category>
        
        <category>engineering</category>
        
        <category>github</category>
        
        <category>team</category>
        
        <category>tools</category>
        
      </item>
    
      <item>
        <title>Why Asking for Help Strengthens Engineering Teams</title>
        <description>&lt;p&gt;I know that for many developers, especially those early in their careers, asking for help can be intimidating. I
often fear wasting someone’s time or exposing myself as less skilled or smart than my team initially thought.&lt;/p&gt;

&lt;p&gt;In my first month as a software engineer at Artsy (and barely six months into life as an engineer after
&lt;a href=&quot;https://medium.com/swlh/how-losing-my-job-helped-me-find-my-way-back-8c8f86552acc&quot;&gt;transitioning from a career in communications&lt;/a&gt;), I was struggling
through a ticket assigned to me as a “good first issue.” (The team estimated the task to be straightforward enough
for someone new to the team.) After a few hours stumbling between the ticket, my code, and Google, I made very
little progress.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;Early and often, my fellow engineers at Artsy encourage me to ask for help when I hit roadblocks. Even with the
support explicitly offered to me, I was shaky. The extra 10 seconds it took to type out my question in Slack was
just enough time for me to chicken out.&lt;/p&gt;

&lt;p&gt;Opening up with my team members about my concerns, I learned that asking for help is not just for me but ultimately
benefits my team. Sharing their insights below, I hope other engineers, early-career or not, feel empowered to ask
questions, stay curious, and prioritize learning for themselves and their team — all hallmarks of great engineers.&lt;/p&gt;

&lt;a name=&quot;Why.It...s.So.Hard.to.Ask.For.Help&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Why It’s So Hard to Ask For Help&lt;/h2&gt;

&lt;p&gt;Working in tech and as an engineer (and even in &lt;a href=&quot;https://medium.com/better-programming/why-women-dont-pursue-software-engineering-17d0dead24e9&quot;&gt;undergraduate computer science
classes&lt;/a&gt;,) I often felt surrounded by people smarter than me.
Operating alongside peers who are excelling motivates me to set the bar higher for myself. But at times, it can
also be intimidating. There is a reason that imposter syndrome is so pervasive in tech industry discourse. (A 2018
study found that &lt;a href=&quot;https://www.cnet.com/news/tech-employees-likely-to-suffer-from-impostor-syndrome/&quot;&gt;58% of tech workers suffer from
it&lt;/a&gt;.) The fear of being “found out” as an imposter,
inadequate, or less impressive can be especially acute for those early in their career and from &lt;a href=&quot;https://zora.medium.com/why-imposter-syndrome-is-worse-for-women-of-color-3bcf37335405&quot;&gt;underrepresented
groups&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Like other VC-backed companies, Artsy is working toward aggressive business targets and ships software at a high
velocity. At high-growth companies, tight deadlines and high-energy cultures make it tempting to shy away from hard
problems and to let the more senior people tackle the tough challenges. But these moments are critical for growth
and learning across the team.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&quot;illustration&quot;&gt;
    &lt;a target=&quot;_blank&quot; href=&quot;https://www.artsy.net/artwork/pipilotti-rist-help-me&quot;&gt;
        &lt;img src=&quot;https://d32dm0rphc51dk.cloudfront.net/P24AUuVFX50Tr2Q6w58-fQ/large.jpg&quot;&gt;
    &lt;/a&gt;
    &lt;figcaption&gt;Pipilotti Rist, Help me, 2016, Hauser &amp; Wirth, available on Artsy
    &lt;/figcaption&gt;
&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;a name=&quot;Rethinking.Productivity&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Rethinking Productivity&lt;/h2&gt;

&lt;p&gt;On Artsy’s engineering team, we put a lot of energy into optimizing developer workflows and communication channels.
While asking for help seemed counter to productivity, my team helped me see that the opposite is true: Encouraging
engineers to support one another is integral to building an effective engineering organization.&lt;/p&gt;

&lt;p&gt;Pair programming is growing in popularity, not because society is becoming more kind and patient, but because it’s
good for business. Teams in synergy can &lt;a href=&quot;https://martinfowler.com/articles/on-pair-programming.html&quot;&gt;ship higher-quality code more quickly&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Because teaching is one of the best ways to become an expert, a more experienced engineer can level up when pairing
with a less experienced engineer. Teaching solidifies understanding, reveals gaps in knowledge, and opens up new
questions for exploration. Recently, a senior engineer shared that they never questioned something in our codebase
until I prompted them to take a closer look. We deepened our understanding together.&lt;/p&gt;

&lt;p&gt;Providing help also cultivates an engineer’s mentoring skills, which is especially important if they aim for
management or leadership roles.&lt;/p&gt;

&lt;p&gt;Finally, a lot of people enjoy helping others for the pure reason that it feels good. Studies show that a majority
of workers prioritize meaning in their work over salary and that meaningful work translates to greater retention
and productivity. (&lt;a href=&quot;https://hbr.org/2018/11/9-out-of-10-people-are-willing-to-earn-less-money-to-do-more-meaningful-work&quot;&gt;Harvard Business Review&lt;/a&gt; goes
so far as attaching a dollar sign to meaningful work: they estimate highly meaningful work generates an extra
$9,078 per worker per year and saves an average of $6.43 million in annual turnover-related costs for every 10,000
workers.) All good arguments for engaging in collaborative and empathetic workflows.&lt;/p&gt;

&lt;a name=&quot;Building.Community.and.Scaling.Knowledge&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Building Community and Scaling Knowledge&lt;/h2&gt;

&lt;p&gt;Building a culture of collaboration is particularly challenging, especially for distributed teams and those working
remotely during the pandemic. Pair programming provides opportunities for connecting, which can reverberate
throughout an organization.&lt;/p&gt;

&lt;p&gt;Learning also has a network effect, so knowledge scales exponentially. If someone teaches me a new concept, I am
now empowered to share the knowledge with others, and then they can then spread that knowledge even further.&lt;/p&gt;

&lt;p&gt;Put simply by one of my coworkers: Learning is contributing.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&quot;illustration&quot;&gt;
    &lt;a target=&quot;_blank&quot; href=&quot;https://www.artsy.net/artwork/richard-artschwager-question-mark&quot;&gt;
        &lt;img src=&quot;https://d32dm0rphc51dk.cloudfront.net/fccQIzHtxIwf2eHTrEg0Dw/large.jpg&quot;&gt;
    &lt;/a&gt;
    &lt;figcaption&gt;Richard Artschwager, Question Mark, 2001, Gagosian, available on Artsy
    &lt;/figcaption&gt;
&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;a name=&quot;Why.Prioritizing.Your.Growth.is.Okay&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Why Prioritizing Your Growth is Okay&lt;/h2&gt;

&lt;p&gt;My natural tendency is to want to give more than I ask. But for all early-career engineers, it is also normal to
need a lot of help at the beginning. I need to trust that our recruitment team knew to ask the right questions to
make an informed decision to hire me — the real me, beginner and all. The fastest way to improve is to tackle
difficult problems head-on and ask questions when I need support. Investing in my learning at this point in my
career will pay dividends to my team in the months and years to come.&lt;/p&gt;

&lt;p&gt;So yes, I went ahead and pressed send on that Slack to ask for help.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;This post originally appeared on Anna&#39;s blog on &lt;a href=&quot;https://anna-carey.medium.com/&quot;&gt;Medium&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 11 Feb 2021 00:00:00 +0100</pubDate>
        <link>https://artsy.github.io/blog/2021/02/11/asking-for-help/</link>
        <guid isPermaLink="true">https://artsy.github.io/blog/2021/02/11/asking-for-help/</guid>
        
        
        <category>community</category>
        
        <category>culture</category>
        
        <category>learning</category>
        
        <category>teaching</category>
        
        <category>team</category>
        
      </item>
    
      <item>
        <title>Introducing Artsy Engineering Radio</title>
        <description>&lt;p&gt;Available now on &lt;a href=&quot;https://podcasts.apple.com/us/podcast/artsy-engineering-radio/id1545870104&quot;&gt;Apple Podcasts&lt;/a&gt;, &lt;a href=&quot;https://open.spotify.com/show/0gJYxpqN6P11dbjNw8VT2a?si=L4TWDrQETwuVO6JR1SOZTQ&quot;&gt;Spotify&lt;/a&gt;, and coming soon elsewhere, is Artsy
Engineering Radio!&lt;/p&gt;

&lt;p&gt;Solving problems in the world of software engineering can mean a lot of different things, and this podcast will
explore what that looks like at Artsy. If you&#39;ve followed our blog, you can expect a podcast that sounds like it.
There are a ton of amazing engineers here at Artsy and we&#39;re excited for you to hear their voices and stories. Our
hope is that this podcast will make it easy for more engineers at Artsy to contribute to the public persona of
Artsy Engineering.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;We&#39;ll release new episodes every other week. Our target episode length is 30 minutes. Some episodes will be
technical and others less so. Because
&lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/engineering-principles.md#open-source-by-default&quot;&gt;we work in the open&lt;/a&gt;
it&#39;s easy for us to talk about our work in public.&lt;/p&gt;

&lt;p&gt;This isn&#39;t the first attempt at an Artsy engineering podcast! Our engineering team has attempted multiple times to
start one. When &lt;a href=&quot;https://artsy.github.io/author/jonallured/&quot;&gt;Jon&lt;/a&gt; went to create new Slack and Notion hubs, he found that both already existed. The
&lt;a href=&quot;https://github.com/artsy/artsy.github.io/pull/368&quot;&gt;PR for the podcast RSS feed&lt;/a&gt; was opened in July, 2017!&lt;/p&gt;

&lt;p&gt;We&#39;re beating the fizzle this time, though. We&#39;ve got momentum and enthusiasm on our side — several episodes are
already published and we&#39;ve got more lined up. Instead of tinkering with tooling we&#39;re focusing on making episodes,
even if they aren&#39;t perfect. Like the software we build, the podcast will get better over time as we iterate.&lt;/p&gt;

&lt;p&gt;What do we have so far? In
&lt;a href=&quot;https://podcasts.apple.com/us/podcast/0-introducing-artsy-engineering-radio/id1545870104?i=1000503035175&quot;&gt;episode 0&lt;/a&gt;,
&lt;a href=&quot;https://artsy.github.io/author/jonallured/&quot;&gt;Jon&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/author/matt-dole/&quot;&gt;Matt&lt;/a&gt;, and &lt;a href=&quot;https://artsy.github.io/author/steve-hicks/&quot;&gt;Steve&lt;/a&gt; introduced the podcast and talked about what you can expect from
future episodes. &lt;a href=&quot;https://podcasts.apple.com/us/podcast/1-how-to-have-good-meetings/id1545870104?i=1000503035176&quot;&gt;Episode 1&lt;/a&gt; features a conversation with &lt;a href=&quot;https://artsy.github.io/author/ash/&quot;&gt;Ash&lt;/a&gt; about facilitating meaningful and
inclusive team meetings, and how meetings are part of building teams, trust, and systems. &lt;a href=&quot;https://podcasts.apple.com/us/podcast/2-how-artsy-hires-engineers/id1545870104?i=1000504558896&quot;&gt;Episode 2&lt;/a&gt; is
a conversation between &lt;a href=&quot;https://artsy.github.io/author/steve-hicks/&quot;&gt;Steve&lt;/a&gt; and &lt;a href=&quot;https://artsy.github.io/author/ash/&quot;&gt;Ash&lt;/a&gt; about how Artsy hires engineers.&lt;/p&gt;

&lt;p&gt;Find the first few episodes right now in your podcast player. Watch for future episodes in your feed and we&#39;ll
announce them &lt;a href=&quot;https://twitter.com/artsyopensource&quot;&gt;on Twitter&lt;/a&gt; when they&#39;re released.&lt;/p&gt;
</description>
        <pubDate>Wed, 06 Jan 2021 00:00:00 +0100</pubDate>
        <link>https://artsy.github.io/blog/2021/01/06/introducing-artsy-engineering-radio/</link>
        <guid isPermaLink="true">https://artsy.github.io/blog/2021/01/06/introducing-artsy-engineering-radio/</guid>
        
        
        <category>community</category>
        
        <category>learning</category>
        
        <category>podcast</category>
        
      </item>
    
      <item>
        <title>Echoes From the Past: Supporting Old App Versions</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://artsy.github.io/blog/2020/03/02/ios-deploys-super-weird-totally-normal/&quot;&gt;In, a recent blog post&lt;/a&gt;, I discussed a fundamental difference between web and iOS deployments. Web software is deployed to servers that are under your control, while iOS software is deployed to users&#39; devices that you have &lt;em&gt;no&lt;/em&gt; control over. This distinction really changes how you think about the code that you ship, because that code could be running indefinitely on devices that never get updated.&lt;/p&gt;

&lt;p&gt;The previous post focused on this distinction through the lens of accidentally shipping (and then fixing) a bug. This focus on bugs is important, but focusing &lt;em&gt;only&lt;/em&gt; on bugs left me unable to articulate an important, nuanced distinction between hosting code and shipping app binaries. So let&#39;s dive in.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;Software, ideally, is made up of more than just bugs; it has working code, too! Just like with (accidentally) shipping bugs, you need to be aware that the working code you ship is &lt;em&gt;also&lt;/em&gt; going to be running indefinitely. That puts pressure on developers to make sure that the code in their apps will continue to function correctly, even as (for example) the web APIs that the apps rely on get updated over time.&lt;/p&gt;

&lt;a name=&quot;A.Case.Study&quot;&gt;&lt;/a&gt;
&lt;h2&gt;A Case Study&lt;/h2&gt;

&lt;p&gt;Artsy&#39;s iOS app relies on a services we call &quot;&lt;a href=&quot;https://github.com/artsy/echo&quot;&gt;Echo&lt;/a&gt;&quot; to serve remote configuration. This lets Artsy do things like selectively disable features (for example, to make non-backwards-compatible API changes), provide changes to URL-routing (to match corresponding changes to web URLs), or even to &lt;em&gt;require&lt;/em&gt; users on older versions of the app to update (which we have never had to do). Echo has helped Artsy meet its business goals and building this remote configuration for the app was a great idea.&lt;/p&gt;

&lt;p&gt;However... Echo was built as a general-purpose remote-configuration-as-a-service, in anticipation of being used by other apps. That use never materialized. It had a web portal and a database and an API, all to only ever serve a single JSON response to the app. That&#39;s fine, sometimes engineers build things that don&#39;t end up getting used widely as we expected. Echo did one thing, and it did it really well. It ran on a Hobby Dyno on Heroku without incident for years.&lt;/p&gt;

&lt;p&gt;If you think about what I&#39;ve discussed so far in this post, you may realize that the app &lt;em&gt;depends&lt;/em&gt; on Echo. If Echo changes in some non-backwards-compatible way, then the app could break. For example, if Echo happened to stop working entirely, then the app could stop working too.&lt;/p&gt;

&lt;p&gt;The Echo service went without being deployed for several years. It worked, so why update it? The problem was that at some point, its major dependencies got yanked, so we could no longer build it locally or even deploy it at all. Yikes. I asked a web colleague for help and our conclusion was that it would take more effort to get Echo working with its existing code than it would be to rebuild the whole thing. Double yikes. And finally, Echo was running on the &lt;a href=&quot;https://devcenter.heroku.com/articles/cedar-14-stack&quot;&gt;Cedar-14 Heroku stack&lt;/a&gt;, which was already at end-of-life and had stopped receiving security updates. Triple yikes.&lt;/p&gt;

&lt;p&gt;(I have to note here that most of services at Artsy are deployed almost constantly – Echo was an odd one out. Echo never needed any updates, so it never needed to be deployed. However, we should have been keeping its dependencies up to date and deploying it regularly, which would have uncovered its problems sooner when they were still easily fixed. Anyway!)&lt;/p&gt;

&lt;p&gt;So we have a service, Echo, that we can&#39;t develop, and can&#39;t deploy, and isn&#39;t getting security updates from our cloud provider. And the app depends on it. Since Echo had always been a bit over-engineered for what it ended up being, I wondered what the minimal replacement could be. My plan was to replace the Echo server with an S3 bucket, an Artsy-controlled CNAME DNS record, and a small shell script that runs automatically on CI.&lt;/p&gt;

&lt;p&gt;Seriously! &lt;a href=&quot;https://github.com/artsy/echo/pull/39&quot;&gt;It worked&lt;/a&gt;! I made a proof-of-concept and then another engineer, &lt;a href=&quot;https://github.com/pvinis&quot;&gt;Pavlos&lt;/a&gt;, finished building the new infrastructure. Changes to the app&#39;s configuration are now done via GitHub pull requests (&lt;a href=&quot;https://github.com/artsy/echo/pull/63&quot;&gt;here is an example PR&lt;/a&gt;), which we can track over time (unlike the old web interface).&lt;/p&gt;

&lt;p&gt;I can&#39;t stress enough how much worry I had had about Echo&#39;s degrading status and the app&#39;s dependency on it. But! Everything about the change to S3 went smoothly.&lt;/p&gt;

&lt;p&gt;Okay, so new versions of app are now referring to the S3 bucket instead of the old Echo API. Great! But what about the older versions of the app that are still out there? They&#39;re still hitting the Echo API as intended, right?&lt;/p&gt;

&lt;a name=&quot;The.Problem&quot;&gt;&lt;/a&gt;
&lt;h2&gt;The Problem&lt;/h2&gt;

&lt;p&gt;Echo&#39;s API was still functioning, albeit on an EOL stack that we couldn&#39;t make any changes to. Since we can&#39;t rely on Heroku continuing to run the Echo API indefinitely, what could we do? Well, the easiest way to fix this would be to change Echo&#39;s Artsy-controlled CNAME record to point from the old Cedar-14 Heroku app to a new server app, which could pretend to be the old API for the sake of older app versions.&lt;/p&gt;

&lt;p&gt;This leads me to one of the most scary lines of code in the entire Artsy iOS codebase. See if you can spot the problem.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objc&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;bp&quot;&gt;NSURL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;initWithString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;https://echo-api-production.herokuapp.com/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;For whatever reason, we never created an Artsy-controlled CNAME DNS record for Echo. We were just hitting the bare Heroku URL directly. That means that there are &lt;em&gt;seven years&#39;&lt;/em&gt; worth of Artsy app versions out there that &lt;em&gt;need&lt;/em&gt; to be able to continue hitting &lt;em&gt;that specific&lt;/em&gt; Heroku URL.&lt;/p&gt;

&lt;p&gt;😬&lt;/p&gt;

&lt;p&gt;This is what I meant earlier about how you need to think about properly-working code differently when you develop software that runs on someone else&#39;s hardware. If this was a server, this whole problem of old-code-hitting-outdated-APIs wouldn&#39;t exist. But because we ship apps as binaries that get ran on someone &lt;em&gt;else&#39;s&lt;/em&gt; hardware, we need to be aware of this kind of issue.&lt;/p&gt;

&lt;p&gt;That URL was fine when the code was written and it worked as intended for years. No one could have predicted, when it was added, that it would cause us headaches much later. Nor could we have anticipated that the Echo server&#39;s codebase would end up in such a state.&lt;/p&gt;

&lt;a name=&quot;The.Solution&quot;&gt;&lt;/a&gt;
&lt;h2&gt;The Solution&lt;/h2&gt;

&lt;p&gt;This is the part of the blog post where I get to be a hero (at least in my head). The Heroku app running Echo was on Cedar-14 and while we couldn&#39;t make any changes to its code, we &lt;em&gt;could&lt;/em&gt; replace the code entirely. This would give us a new server running at the old URL. So I wrote up a small Express server to proxy HEAD and GET API requests from old iOS app versions to return the response body and headers that were expected. &lt;a href=&quot;https://github.com/artsy/echo/pull/59#&quot;&gt;The work is here&lt;/a&gt; if you&#39;re curious. The nice thing about Heroku, at least, is that if this had gone horribly wrong we still could have reverted back to the Cedar-14 app while we figured out our next steps.&lt;/p&gt;

&lt;p&gt;We will still need to keep this Heroku app running, indefinitely, which isn&#39;t ideal. Perhaps Artsy&#39;s migration to Kubernetes will never be &lt;em&gt;quite&lt;/em&gt; 100% complete, but that&#39;s a small price to pay for keeping users of our app happy.&lt;/p&gt;

&lt;a name=&quot;Conclusion&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;It&#39;s not just bugs that you need to be aware of &lt;em&gt;accidentally&lt;/em&gt; shipping in your app binaries. You have to think about how the code that&#39;s running &lt;em&gt;as intended today&lt;/em&gt;, because it will continue to run for the foreseeable future. This means adding checks for non-200 response codes from APIs, being careful about third-party APIs, and thinking carefully about everything you ship. Apps are more than just their code; apps are everything that their code depends on, too.&lt;/p&gt;

&lt;p&gt;This is a lesson that I&#39;ve been teaching engineers for a long time, but it&#39;s only with our recent Echo changes that I&#39;ve come to understand, at a deeper level, what it means to take ownership of code. Yes, the bugs, and of course, the happy little accidents, but also the mundane interconnected dependencies that make software systems so complex. And, if I&#39;m being honest, that make software systems so much fun to work on, too.&lt;/p&gt;
</description>
        <pubDate>Thu, 31 Dec 2020 00:00:00 +0100</pubDate>
        <link>https://artsy.github.io/blog/2020/12/31/echo-supporting-old-app-versions/</link>
        <guid isPermaLink="true">https://artsy.github.io/blog/2020/12/31/echo-supporting-old-app-versions/</guid>
        
        
        <category>ios</category>
        
        <category>mobile</category>
        
        <category>teams</category>
        
      </item>
    
      <item>
        <title>Knowledge Shares For Great Good</title>
        <description>&lt;p&gt;Sharing knowledge! What a concept! &lt;a href=&quot;/blog/2020/09/29/becoming-mobile-first-at-artsy/&quot;&gt;In my recent blog post&lt;/a&gt;, I discussed &quot;Knowledge Share&quot; meetings (also known simply as &quot;Knowledge Shares&quot;, or abbreviated &quot;KS&quot;) and I want to dive deeper into them today. Last time, I described them as follows:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Knowledge Shares are a &lt;u&gt;structured&lt;/u&gt; time to facilitate &lt;u&gt;unstructured learning&lt;/u&gt;. Anyone can bring a topic to Knowledge Share, from a ticket that they&#39;re stuck on to an idea they have to a neat trick they recently learned.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;These meetings were really instrumental in ramping up the Mobile Experience team, but their history goes back a bit further. Today, we&#39;re going to discuss the origins of Knowledge Shares at Artsy, how they&#39;ve evolved, the value they provide us as engineers, and how I&#39;d recommend you adopt them on your team.&lt;/p&gt;

&lt;p&gt;Let&#39;s go!&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;To my recollection, the Auctions team was the first at Artsy to start doing &quot;Knowledge Share&quot; meetings. It was late 2016, I think. We were a small team of about five engineers, but were spread across many different front-end apps and back-end microservices. To make sure Artsy&#39;s nascent auction business was a success, every engineer on the team had to have a working understanding of every one of our codebases. The team&#39;s lead, Alan, suggested that devote an hour each week to sharing knowledge so no one person would become a silo.&lt;/p&gt;

&lt;p&gt;The idea is simple enough: spend time working on something together. Kind of like pair programming, but with a slightly bigger group. Maybe there would be a ticket someone had that we would start together. Or maybe there had been a production incident that we wanted to investigate together. Maybe someone had an idea for a new technical approach to some problem and they wanted early feedback.&lt;/p&gt;

&lt;p&gt;I think this forum worked well for us because our team was small and had a high level of interpersonal trust. Leading a five-person &lt;a href=&quot;https://en.wikipedia.org/wiki/Mob_programming&quot;&gt;mobbing session&lt;/a&gt; could be really intimidating, and later I&#39;ll discuss how I&#39;ve since structured the Knowledge Shares that I lead to make everyone feel welcome contributing.&lt;/p&gt;

&lt;p&gt;And they worked great! Other engineers learned about the iOS front-end code that I had written, and I learned about the back-end systems that powered that front-end. This was important for the team because our response time to production incidents was critical – one extra minute of looking up docs or finding a specific URL could make the difference between a happy user winning their lot, or an unhappy user taking their business elsewhere.&lt;/p&gt;

&lt;p&gt;As time went on, other product teams started their own Knowledge Shares. They proliferated naturally throughout Artsy Engineering. When I started the Mobile Experience team in 2019, Knowledge Shares were one of the first recurring team meetings I scheduled. After a few months, I got really positive feedback about them. In fact, engineers wanted more of them. So I scheduled a second hour-long Knowledge Share each week.&lt;/p&gt;

&lt;p&gt;Today, Knowledge Shares are for more than just engineers. They are for product managers, designers, data analysts, and other team stakeholders. Sometimes engineers from other teams even join my team&#39;s Knowledge Shares, though scheduling becomes a hassle at a certain scale. We start each Knowledge Share with team-wide topics that apply to more than only engineers; we then move on to engineering-specific topics. This lets non-engineers still contribute while also letting them drop off so the engineers can dig into code.&lt;/p&gt;

&lt;p&gt;Here are some examples of things that we have used Knowledge Shares for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sharing early designs for upcoming project work.&lt;/li&gt;
&lt;li&gt;Going over work-in-progress pull requests and soliciting feedback on the technical approach.&lt;/li&gt;
&lt;li&gt;Spiking on big-picture projects together, to help us plan what work needs to happen and in which order.&lt;/li&gt;
&lt;li&gt;Exploring anonymized user sessions to learn more about how our product actually gets used in the real world.&lt;/li&gt;
&lt;li&gt;Investigating small quality-of-life problems with our codebase&#39;s developer experience and working on solutions.&lt;/li&gt;
&lt;li&gt;Brainstorming about how to address specific pieces of technical debt.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Topics range from the technical to the product-focused, from what has already shipped to what is still on the drawing board. This breadth of focus helps everyone on the team feel like they can contribute. We keep a shared document of evergreen topic ideas and everyone is encouraged to add to it. As Tech Lead, I also send Slack reminders before each meeting to solicit for timely topics.&lt;/p&gt;

&lt;p&gt;Throughout the normal course of our week, topics will naturally come up for discussion – topics that would normally need their own meeting to be scheduled. But instead, we can use the time we already have scheduled. For example: if an engineer has feedback on a new feature&#39;s design, we don&#39;t need to schedule a dedicated meeting for that conversation – we can use a Knowledge Share. It might feel like having recurring &quot;Knowledge Share&quot; meetings only adds more meetings to everyone&#39;s already-busy calendars. But in our experience, these Knowledge Shares prevent us from scheduling &lt;em&gt;yet more&lt;/em&gt; one-off meetings, so it balances out as a time-saver.&lt;/p&gt;

&lt;p&gt;As a Tech Lead, I like to use Knowledge Shares as an opportunity to reinforce the shared understanding that &lt;em&gt;learning&lt;/em&gt; is our paramount goal. That is to say, our goal isn&#39;t to &lt;em&gt;build&lt;/em&gt; some new feature, but is rather to &lt;em&gt;learn &lt;strong&gt;how&lt;/strong&gt; to build&lt;/em&gt; that new feature. That&#39;s why I emphasize in our Knowledge Shares that &lt;em&gt;learning is contributing&lt;/em&gt; (language which I added to our engineering onboarding docs). New team members might not have topics of their own, but they&#39;re encouraged to contribute by learning and by asking questions.&lt;/p&gt;

&lt;p&gt;When I described the origins of Knowledge Shares above, I said that they worked well on the early Auctions team because the team already had a high level of interpersonal trust. But looking back at those early days, I have to admit that I&#39;m not sure which came first: the Knowledge Shares, or the trust? Having now bootstrapped two product teams at Artsy, I can tell you that Knowledge Shares are a key tool I use as Tech Lead to get teams working well together, quickly. The experience of being confused (together) and then gaining understanding (together) is great for building up &lt;a href=&quot;https://ashfurrow.com/blog/building-better-software-by-building-better-teams/&quot;&gt;the interpersonal trust that makes teams perform well&lt;/a&gt;. I just can&#39;t recommend Knowledge Shares enough!&lt;/p&gt;

&lt;p&gt;Today, Knowledge Shares at Artsy provide a variety of benefits. Among others, those benefits are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;De-siloing information, to prevent any one engineer from becoming a single-point-of-failure for Artsy&#39;s systems.&lt;/li&gt;
&lt;li&gt;Getting the team used to working together, used to communicating with one another, and used to providing and accepting feedback.&lt;/li&gt;
&lt;li&gt;Surfacing problems developers commonly run into during day-to-day work – and then fixing them permanently, together.&lt;/li&gt;
&lt;li&gt;Fostering a sense that everyone &quot;owns&quot; this meeting (and, by extension, everyone &quot;owns&quot; the team&#39;s culture).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Okay, so, let&#39;s imagine I&#39;ve sold you on the idea of Knowledge Shares. Great! So where do you start? How do you get your team on board?&lt;/p&gt;

&lt;p&gt;If you are the team&#39;s lead then adopting Knowledge Shares is quite easy: send your team this blog post, tell them you want to try Knowledge Shares, try them out, and discuss what everyone thinks in an upcoming retrospective. Whether you make the Knowledges Shares mandatory, or just encourage everyone&#39;s participation, is up to you. They are mandatory for engineers on my team, but I accept the responsibility of making sure the meetings providing value to all engineers. I trust you to make these work well for however your team works.&lt;/p&gt;

&lt;p&gt;What if you&#39;re &lt;em&gt;not&lt;/em&gt; the team lead? That&#39;s okay, you have options. If you&#39;re comfortable, I would recommend following the same steps as above. Send your team this blog post, express interest in trying out a weekly Knowledge Share, and schedule something. (By showing this kind of leadership initiative, it won&#39;t be long before you find yourself leading your own team!) But if you want to avoid stepping on toes, you can also discuss this with your team&#39;s lead privately. Every team is different and I trust you to navigate your own team best.&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Dec 2020 00:00:00 +0100</pubDate>
        <link>https://artsy.github.io/blog/2020/12/09/share-your-knowledge/</link>
        <guid isPermaLink="true">https://artsy.github.io/blog/2020/12/09/share-your-knowledge/</guid>
        
        
        <category>culture</category>
        
        <category>people</category>
        
        <category>teams</category>
        
      </item>
    
      <item>
        <title>Becoming Mobile First</title>
        <description>&lt;p&gt;It was a Wednesday, mid-summer 2019. I don&#39;t know which Wednesday specifically, but I know that it was &lt;em&gt;a&lt;/em&gt;
Wednesday because I was attending Artsy&#39;s weekly all-hands meeting. Two hundred colleagues were also there (many
dialing in remotely) and we were all listening to
&lt;a href=&quot;https://files.artsy.net/documents/artsy-names-new-ceo.pdf&quot;&gt;Artsy&#39;s new CEO&lt;/a&gt; talk about the company&#39;s direction.
Mike Steib had only been around for a few months at that point, getting to know the business. He was talking about
the product direction, and I was listening intently.&lt;/p&gt;

&lt;p&gt;With Artsy&#39;s iOS app, I knew there were only really two directions we could go. As I listened, I reflected on how
we had gotten here.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;When I joined Artsy in 2014, I joined the Mobile Team. It was an amazing team. While we were called the &quot;mobile&quot;
team, we only worked on Artsy&#39;s iOS apps and not the mobile website.&lt;/p&gt;

&lt;p&gt;By 2016, Artsy Engineering had grown to the size that having only a &quot;mobile team&quot; and a &quot;web team&quot; was no longer
working well. We dissolved both teams and distributed the engineers into
&lt;a href=&quot;https://artsy.github.io/blog/2016/03/28/artsy-engineering-organization-stack/&quot;&gt;new product teams&lt;/a&gt;, focused on
vertical aspects of Artsy&#39;s business. Auctions. Partner Success. Editorial. And so on. The idea was that each team
would have total autonomy over building products to support their slice of the business, and each would have the
engineering and design resources to build new features across both our web and iOS canvases.&lt;/p&gt;

&lt;p&gt;That structure worked well, and continues to work well today (we have continued re-organizing ourselves into new
teams to better meet business goals). But once we dissolved the mobile team, there was no longer anyone looking at
our iOS software holistically. The app had become a series of silos – each silo was internally consistent, but
distinct from each other. Often each silo was written in distinct programming languages (we had also started
adopting React Native).&lt;/p&gt;

&lt;p&gt;New iOS technologies had been created by Apple, but our teams weren&#39;t taking full advantage of them. We would
update to support the latest versions of Xcode and iOS in the free time between other tickets. It wasn&#39;t ideal. Of
the &lt;a href=&quot;https://github.com/artsy/mobile&quot;&gt;five original members of the Mobile Team&lt;/a&gt;, everyone else had moved on except
me.&lt;/p&gt;

&lt;p&gt;As a product, the app was languishing.&lt;/p&gt;

&lt;p&gt;Yet despite this, it was also hugely popular among our users and very important to Artsy&#39;s business. Art collectors
love our app! It gets a large percentage of our total sessions. Also, users place an outsized number of auction
bids and artwork inquiries using our app relative to the number of sessions on our website. In fact, the highest
value artwork transaction &lt;em&gt;ever&lt;/em&gt; to take place on Artsy was made on an iPad, running software that I helped build.
I&#39;m still pretty proud of that.&lt;/p&gt;

&lt;p&gt;So, Wednesday all-hands. I stood there, not sure of what would happen next. I could see Artsy either making a
massive investment in the app, or I could see Artsy cutting its losses and focusing on the software that we already
knew how to build. Which direction we took largely depended on this new CEO, who was now standing in front of us
all and describing the direction Artsy&#39;s product would take next.&lt;/p&gt;

&lt;a name=&quot;The.Dream&quot;&gt;&lt;/a&gt;
&lt;h2&gt;The Dream&lt;/h2&gt;

&lt;p&gt;Mike said something that caused a lot of raised eyebrows in the crowd. People were excited. &lt;em&gt;I&lt;/em&gt; was excited.
Artsy&#39;s product organization would shift to adopt a &quot;mobile-first strategy.&quot;&lt;/p&gt;

&lt;p&gt;Someone asked &quot;does this mean the app will reach feature parity with Artsy&#39;s website?&quot;&lt;/p&gt;

&lt;p&gt;Mike responded: &quot;No. It means that features are going to launch &lt;em&gt;first&lt;/em&gt; on the app. If anything, it&#39;s the &lt;em&gt;website&lt;/em&gt;
that will be catching up &lt;em&gt;to the app&lt;/em&gt;.&quot;&lt;/p&gt;

&lt;p&gt;I was kind of blown away! I mean, this had been the spirit of our original re-org in 2016, but that hadn&#39;t really
materialized. The app had continued to trail the website. At most, only one product team was ever building new
features for the app (usually which ever team I happened to be on). Shifting to this mobile-first strategy would be
a &lt;em&gt;massive&lt;/em&gt; undertaking, but I was keen.&lt;/p&gt;

&lt;p&gt;In August, an email landed in my inbox from Artsy&#39;s head of software. He wanted to spin up a new team to focus on
the app: the team would be responsible for supporting Artsy&#39;s new mobile-first product strategy. He wanted to know
what I thought, and he wanted to know if I was interested in leading the team.&lt;/p&gt;

&lt;p&gt;Honestly, it was a dream come true.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-09-29-becoming-mobile-first-at-artsy/rfc.png&quot; alt=&quot;Screenshot of the RFC for creating the Mobile Experience team&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here we are, a year later. This is the story of how Artsy created its Mobile Experience team. How we recovered a
languishing iOS app. How engineers helped shift the product organization to a mobile-first product strategy. And
how Artsy grew from &lt;em&gt;sometimes&lt;/em&gt; having &lt;em&gt;a&lt;/em&gt; team working on the app, to usually having &lt;em&gt;every&lt;/em&gt; team working on it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-09-29-becoming-mobile-first-at-artsy/faq.png&quot; alt=&quot;Another screenshot of the RFC for creating the Mobile Experience team, describing frequently asked questions&quot; /&gt;&lt;/p&gt;

&lt;a name=&quot;Getting.Our.Bearings&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Getting Our Bearings&lt;/h2&gt;

&lt;p&gt;When Artsy created its new Mobile Experience team, we were already resource-constrained and so the new team would
need to be nimble. We had three full-time engineers (myself as tech lead, and two others), assisted by a designer,
product manager, and data analyst, who would each be spending only half their work time on the Mobile Experience
team. We needed to be scrappy. I&#39;m really proud of the work that that early team accomplished, and I look back
fondly on those first few months working with Sam, Joanna, David, Kieran, and Ani.&lt;/p&gt;

&lt;p&gt;The first thing we did was define our own mandate. What was this team responsible for? What was it &lt;em&gt;not&lt;/em&gt;
responsible for? &quot;Mobile Experience&quot; is pretty vague, and we had to answer a lot of upfront questions. Would we be
responsible for &lt;em&gt;all&lt;/em&gt; of Artsy&#39;s iOS software? No, just the main collector app. Would we be responsible for Artsy&#39;s
mobile website? No, that&#39;s too far-reaching. What about Android? Well, yes, eventually...&lt;/p&gt;

&lt;p&gt;After we decided on our mandate, the next step was to get really familiar with the existing app. We storyboarded
out all the existing screens and their connections to one another.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-09-29-becoming-mobile-first-at-artsy/walkthrough.png&quot; alt=&quot;Screenshot of all the screens in our app laid out to discuss&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-09-29-becoming-mobile-first-at-artsy/brainstorm.png&quot; alt=&quot;Screenshot of a brainstorm for app ideas&quot; /&gt;&lt;/p&gt;

&lt;p&gt;No one on our team had complete knowledge of every screen in the app, not even me, so exploring it together was a
great way to uncover what needed immediate attention. One example was our partner page, which displayed information
to our users about Artsy&#39;s partners: galleries, museums, auction houses, etc. We learned that the app actually used
an ancient web view, and it didn&#39;t even show the partner&#39;s &lt;em&gt;artworks&lt;/em&gt;. The artworks! Probably the most important
thing for it to do!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-09-29-becoming-mobile-first-at-artsy/old_partner.png&quot; alt=&quot;Screenshot of a presentation showing the old partner page&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-09-29-becoming-mobile-first-at-artsy/new_partner.png&quot; alt=&quot;Screenshot of a presentation showing the new partner page, which looks much nicer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is where &quot;being scrappy&quot; started to take root. Usually when developing new features, Artsy designers iterate
on a design before we plan on execution, then we implement, test, and deploy. The nice part of replacing something
that was &lt;em&gt;obviously broken&lt;/em&gt; was that we didn&#39;t feel beholden to this usual process; whatever we built would be
better than what we had. One engineer and our designer started the new partner page with a quick pencil sketch,
using the app&#39;s existing UI abstractions to design something that we could quickly build. Once we had a prototype,
the engineer and designer iterated. The whole project took only about three weeks.&lt;/p&gt;

&lt;a name=&quot;Early.Wins&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Early Wins&lt;/h2&gt;

&lt;p&gt;Learning about the app itself was critical, but equally important was learning about how our users &lt;em&gt;used&lt;/em&gt; the app.
We scheduled user interviews and, in the mean time, looked into our anonymized user analytics. Our data analyst
found a few representative sessions and we walked through each action that a user took. One big lesson here was how
much our app users relied on the app&#39;s search feature, which was still written in Objective-C and hadn&#39;t been
updated in a long time. We found that users would often search for the same query several times in the same
session. For example, users would search for &quot;banksy&quot;, wander off exploring some art, and then return to search for
&quot;bansky&quot; again. And again. And again.&lt;/p&gt;

&lt;p&gt;Our search implementation didn&#39;t show users their own recent searches, which would have greatly reduced the amount
of friction users experienced while exploring the art world in the app. Our other engineer took point working with
our designer to migrate the app&#39;s search to React Native. We also added some other features to our search page,
like adding entity subtitles so users would know if the result they were tapping on was an artwork, and artist, a
gallery, and so on. The whole project took about a month to complete, and we have continued to iterate on the app&#39;s
search.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-09-29-becoming-mobile-first-at-artsy/new_search.png&quot; alt=&quot;Screenshot of a presentation showing the new search&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In early conversations with company leadership, the Mobile Experience team settled on an... interesting strategy to
what we would prioritize. Our mission was &quot;to make the app not suck.&quot; This might seem harsh! But it came from a
place of caring. We knew how much better the app could be and we were motivated to make that a reality. In the
spring of 2020, the team felt like we had reached a point where the app no longer &quot;sucked&quot; – our goal now was &quot;to
make the app amazing.&quot;&lt;/p&gt;

&lt;p&gt;During 2020, we made a lot of changes to the app. We had built a new home page, a profile tab for users, granular
push notification settings, Sign In with Apple, and more.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-09-29-becoming-mobile-first-at-artsy/new_home.png&quot; alt=&quot;Screenshot of a presentation showing the new home page&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It was really exciting to show off our progress to the rest of the company at our monthly Demo Day, especially in
those early months. The product team makes up only a quarter of our company and it was really cool to hear gallery
liaisons complementing our new partner page, or sales people complementing our refreshed home feed. I think that
people had gotten so used to the app not moving much at all that this sudden high velocity of development was as
exciting for them as it was for us.&lt;/p&gt;

&lt;a name=&quot;Setting.Up.Others.To.Succeed&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Setting Up Others To Succeed&lt;/h2&gt;

&lt;p&gt;Artsy&#39;s goal for the Mobile Experience team was explicitly &lt;em&gt;not&lt;/em&gt; to centralize all our iOS feature development, and
so our mandate included much more that just working on iOS software ourselves. We wanted to sit between a typical
product team and a &quot;platform&quot; team, to provide infrastructure and assistance so any team at Artsy could develop
their own iOS feature. This was a big challenge, and required work at the individual and team levels.&lt;/p&gt;

&lt;p&gt;The first step was apparent before we even created the Mobile Experience team. Artsy Engineering runs skills
surveys every six months, and we knew that building iOS software in React Native was something Artsy engineers
weren&#39;t really familiar with, but that they really wanted to learn more about. I worked with the Engineering team&#39;s
Peer Learning Working Group to design a curriculum – big shout out to Christina and Adam for their help here!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://artsy.github.io/blog/2019/12/03/ios-learning-group/&quot;&gt;The iOS Learning Group took four weeks to deliver four lessons&lt;/a&gt;.
The learners were mostly web engineers, so I emphasized the familiar parts of writing React Native software. I also
provided weekly office hours for learners to get assistance with homework. I even stretched my wings as an
educator, developing new skills around curriculum design and delivery. After the course, learners responded
positively to the experience and we have integrated lessons learned from the iOS Learning Group into subsequent
peer learning groups.&lt;/p&gt;

&lt;a name=&quot;Aligning.Product.Releases&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Aligning Product Releases&lt;/h2&gt;

&lt;p&gt;Now that engineers had a solid grasp of how to build software in our application, we could re-align our product
development process around iOS. I can&#39;t speak to the design side of this, but from a product perspective the most
critical milestone was defining a regular 2-week app release cadence. Let me explain.&lt;/p&gt;

&lt;p&gt;Prior to the Mobile Experience team, we released the app pretty irregularly. We would release whenever we had
something big to release, basically. There are two major flaws with that approach. The first problem is that since
each release was bigger, each release was scarier. No one really felt confident releasing app updates. The second
problem was that large pieces of work tended to get coupled together. This came to a head last summer when we were
blocked from releasing an redesigned artwork view because we were waiting for a major overhaul to Artsy&#39;s GraphQL
API to be completed. Without guidance or structure, different teams were building big projects and both had their
changes in our default branch – it was a bit chaotic.&lt;/p&gt;

&lt;p&gt;These two problems are incidental to how we worked at Artsy but there is another, inherent problem to developing
mobile apps:
&lt;a href=&quot;https://artsy.github.io/blog/2020/03/02/ios-deploys-super-weird-totally-normal/&quot;&gt;deploying iOS software is weird&lt;/a&gt;.
Engineers, designers, and product managers at Artsy are used to being able to quickly and cheaply deploy software
to the &lt;em&gt;web&lt;/em&gt;, not the App Store. iOS software is deployed to our user&#39;s hardware, not to servers we control, which
introduces the possibility that users might not upgrade. Software we shipped years ago is still being run today –
we have the analytics to prove it. Not to mention that every app update has to go through Apple&#39;s App Store review
process. Getting our product team aligned on a release schedule might also help us get aligned on the weirdness of
deploying iOS software.&lt;/p&gt;

&lt;center&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;iOS developers! I have a question for you. I hear a lot about teams releasing app updates on a 2-week cadence, to increase user confidence/App Store ranking/team morale/etc.&lt;br&gt;&lt;br&gt;Have any teams shared their experiences with this? Bonus points for any quantitative data. Thanks!! 🤗&lt;/p&gt;&amp;mdash; Ash Furrow (@ashfurrow) &lt;a href=&quot;https://twitter.com/ashfurrow/status/1184845989510811649?ref_src=twsrc%5Etfw&quot;&gt;October 17, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/center&gt;


&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;As the Mobile Experience team formed, I reached out to other mobile teams to find out about how they structured
regular releases. &lt;a href=&quot;https://twitter.com/Cform&quot;&gt;Matt Greenwell&lt;/a&gt; from BuzzFeed was really helpful in particular,
outlining their experience of the pros and cons of a regular release cadence. We implemented a two-week release
cadence so that all product teams could align their own feature development and testing around this predictable
structure. We also created documentation for teams to hide their in-progress work behind feature flags. And
finally, we refined our app QA process; teams would QA their own features and bug fixes while the Mobile Experience
team would used a QA script to test the app &lt;em&gt;generally&lt;/em&gt;, every other Monday, before submitting an update to the App
Store.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-09-29-becoming-mobile-first-at-artsy/cadence.png&quot; alt=&quot;Calendar describing our cadence on an example sprint&quot; /&gt;&lt;/p&gt;

&lt;a name=&quot;Making.Deploys.Not.Scary&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Making Deploys Not Scary&lt;/h2&gt;

&lt;p&gt;To further help teams get into the habit of developing and releasing iOS software often, we created nightly betas.
We also adopted a clever idea from our web colleagues: deploy blocks. In case of a technical reason to not release
a beta, we create a block and the CI job that deploys the beta would fail with a descriptive message. This reduced
a lot of chatter in Slack where engineers would ask &quot;could I make a new beta?&quot; Instead, engineers usually just wait
for the nightly beta. And if they get impatient, they now default to action (their beta deploy will fail if we set
up a block).&lt;/p&gt;

&lt;p&gt;All of this was automated through &lt;a href=&quot;https://fastlane.tools&quot;&gt;fastlane&lt;/a&gt; on our CI provider. We had been using fastlane
for a long time at Artsy, but the Mobile Experience team took the time to share knowledge of how it worked. Any
engineer at Artsy can now make a beta (&lt;code&gt;make deploy&lt;/code&gt;) or promote the latest beta to an App Store submission
(&lt;code&gt;make promote_beta_to_submission&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;We deploy more often and, consequently, each deploy is less scary. And everyone is aware of the need to hide
in-progress work behind feature flags. At this point, updates to our app are mundane, predictable, and boring. Just
the way we like them.&lt;/p&gt;

&lt;a name=&quot;Being.Generous.With.Our.Time&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Being Generous With Our Time&lt;/h2&gt;

&lt;p&gt;Our QA and deploy process touches on something I want to go into more detail about, which is how the Mobile
Experience team helped support other product teams. I described earlier how Mobile Experience sits somewhere
between a normal product team and a platform team, and we leveraged that to our advantage. It would have been easy
to become primarily a supportive team, and leave feature development up to others. However, that would leave us
unaware of how day-to-day development &lt;em&gt;feels&lt;/em&gt; in the app. We own the platform, and that includes the developer
experience. By sitting in this ambiguous in-between state, we stayed aware of both the needs of everyday
developers, and the needs of our platform.&lt;/p&gt;

&lt;p&gt;I would encourage engineers from other teams to ask us for help, which led to a lot of pairing sessions. To be
honest, I think it probably interfered with our productivity, but it was worth it. A half hour of my time spent
pairing with a colleague might save them three hours of banging their head against Xcode. But it&#39;s not the time
saved that I care about, it&#39;s the head-banging. I want engineers at Artsy to feel empowered to build their own iOS
software, and that&#39;s only going to happen if they feel comfortable and supported.&lt;/p&gt;

&lt;p&gt;When the Galleries team kicked off their ambitious Viewing Rooms project, we helped them get started by lending an
engineer to them for a few sprints. When they ran into problems, we were generous with our time by pairing with
them. When they were nearing completion, we helped them test the new feature. This all culminated in a smooth
release.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-09-29-becoming-mobile-first-at-artsy/new_loader.png&quot; alt=&quot;Screenshot of a presentation showing the new home page&#39;s new loading indicator&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Speaking of Developer Experience, we took a keen interest in standardizing our best practices and modernizing the
codebase. We
&lt;a href=&quot;https://github.com/artsy/eigen/blob/dc81bbc9cd33d51d10054a6c57e61a1bd0ee3e75/docs/preferred_practices.md&quot;&gt;documented how we wanted the app&#39;s codebase to look&lt;/a&gt;
and set up
&lt;a href=&quot;https://github.com/artsy/eigen/blob/dc81bbc9cd33d51d10054a6c57e61a1bd0ee3e75/tslint-rules/useWrappedComponentsRule.js&quot;&gt;processes like lint rules&lt;/a&gt;
to encourage developers to follow our best practices. We also invited any engineer at Artsy to join our
twice-weekly Knowledge Share meetings (I&#39;ll discuss these in-depth shortly). We looked for bottle necks in the
development process and found many problems, which we addressed.
&lt;a href=&quot;https://github.com/artsy/eigen/pull/3022&quot;&gt;We combined the Native iOS and React Native repositories&lt;/a&gt; (which had
historically been separated). &lt;a href=&quot;https://github.com/artsy/eigen/pull/3105&quot;&gt;We overhauled the CI configuration&lt;/a&gt; to
leverage heavy caching – average build times dropped from fifteen minutes to less than five.
&lt;a href=&quot;https://github.com/artsy/eigen/pull/3210&quot;&gt;And we adopted stricter TypeScript compiler settings&lt;/a&gt; so that engineers
would be forced to deal with nullability and other causes of bugs. (Hey, sometimes you need a carrot and sometimes
you need a stick.)&lt;/p&gt;

&lt;p&gt;The React Native community has grown a lot since 2016. If Artsy were to begin our adoption of React Native today,
we would be really well-supported by a community that has defined best practices, documented standard approaches to
problems, and a consolidated opinion on what a React Native codebase should &quot;feel&quot; like. None of that existed in
2016, and our early architectural decisions don&#39;t really reflect contemporary best practices. We continue working
to bring our codebase closer to resembling a fresh project created with &lt;code&gt;react-native init&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I&#39;m extraordinarily happy with how things have shaped up, and in the direction we continue to move. This is all an
ongoing process, and should remain an ongoing process. For example, engineers were still facing a bottleneck with
core parts of our app&#39;s routing logic that were in Objective-C, so we recently
&lt;a href=&quot;https://github.com/artsy/eigen/pull/3771&quot;&gt;moved all routing to TypeScript&lt;/a&gt;. Not only does moving code out of
Objective-C make it easier for everyone to build, but it also ladders up to a cross-platform Artsy app.&lt;/p&gt;

&lt;p&gt;We still have older practices in the app that we want to migrate away from, like testing with Enzyme. But overall,
things are looking good!&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;400&quot; src=&quot;https://www.youtube.com/embed/IEn2_WSKFHw&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;


&lt;a name=&quot;Knowledge.Shares&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Knowledge Shares&lt;/h2&gt;

&lt;p&gt;We achieved most of these big, infrastructural changes in meetings called &lt;em&gt;Knowledge Shares&lt;/em&gt;, which I mentioned
earlier. I should write a dedicated blog post on these (update: &lt;a href=&quot;/blog/2020/12/09/share-your-knowledge/&quot;&gt;I did write one&lt;/a&gt;), but in short: Knowledge Shares are a &lt;em&gt;structured&lt;/em&gt; time to
facilitate &lt;em&gt;unstructured learning&lt;/em&gt;. Anyone can bring a topic to Knowledge Share, from a ticket that they&#39;re stuck
on to an idea they have to a neat trick they recently learned. We set aside these two hours a week to discuss
whatever the team wants, and we don&#39;t only invite engineers.&lt;/p&gt;

&lt;p&gt;New feature designs, product roadmaps, and data analyses are often brought up by our non-engineering colleagues; we
discuss these at the beginning of the meetings to make sure everyone&#39;s time is respected. Throughout the week,
someone will raise a question in Slack. Before we had Knowledge Share meetings, we might schedule a dedicated
half-hour meeting to discussing this question. But instead, we now say &quot;alright let&#39;s chat about this at tomorrow&#39;s
KS.&quot; Usually the discussion lasts a lot less than a half hour, so we save time and needless context-switching.&lt;/p&gt;

&lt;p&gt;Knowledge Shares are also a manifestation of my philosophy of tech leadership, which is this: none of us have built
an Artsy before, so instead of optimizing for building an Artsy, let&#39;s optimize for &lt;em&gt;learning&lt;/em&gt; how to build an
Artsy. The best Artsy we can build. And as a natural byproduct, an Artsy gets built. But it&#39;s the &lt;em&gt;learning&lt;/em&gt; that
is treated as the paramount goal.&lt;/p&gt;

&lt;p&gt;Like I said, I owe you a whole blog post on Knowledge Share meetings. I hope I have conveyed how important these
scheduled &quot;structured unstructured learning&quot; times have been for us.&lt;/p&gt;

&lt;a name=&quot;The.Results&quot;&gt;&lt;/a&gt;
&lt;h2&gt;The Results&lt;/h2&gt;

&lt;p&gt;So where does that leave us? It&#39;s been a year and change, where are we now? Well I&#39;m happy to say that we&#39;ve made a
huge impact. We&#39;ve gone from only having (at most) one product team writing iOS software at a time to having nearly
&lt;em&gt;every&lt;/em&gt; product team building iOS software. Artsy is through the woods of its transition to a mobile-first product
strategy. We still have a ways to go, but it feels like we have finally realized the dream we had in 2016 where
every team is fully equipped and empowered to deliver on their own business goals, across all of Artsy&#39;s canvasses.&lt;/p&gt;

&lt;p&gt;Our App Store ranking has shot through the roof – not surprising considering our &quot;make it not suck&quot; and then &quot;make
it amazing&quot; approach. Artsy&#39;s iOS app rating now sits at a stout 4.7.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-09-29-becoming-mobile-first-at-artsy/ratings.png&quot; alt=&quot;Screenshot of a graph showing an increasing average App Store rating&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We&#39;ve also started tracking our iOS developer experience within Artsy. We know exactly where we still need work
because we ask our engineers where they need support.&lt;/p&gt;

&lt;p&gt;It&#39;s taken a mammoth effort, and there&#39;s so much more that I could talk about, but this blog post is long enough
already! Looking at the work we&#39;ve done, the ways we&#39;ve done it, and the results of our effort... I feel ecstatic.&lt;/p&gt;

&lt;a name=&quot;Next.Steps&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;All that said, Artsy&#39;s product team is currently embarking on another reorganization. With so much technical and
product debt paid off, Artsy has evolved past the need for a dedicated Mobile Experience team. It&#39;s bittersweet,
but I&#39;m proud to say that the new Collector Experience team is about to be born. Our team will continue to own the
mobile platform, including its holistic user experience and day-to-day developer experience, but we&#39;ll have an
expanded mandate. That mandate includes a cross-platform Artsy app that will work for collectors on Android as well
as iOS.&lt;/p&gt;

&lt;p&gt;The Mobile Experience team has grown, too. Since we started last year with just a few engineers and limited product
support, we now boast a full roster of engineers and product support. I want to thank everyone on the team,
currently: David, Sam, Brian, Mike, Brittney, Pavlos, and Mounir. You have made the past year an incredibly
rewarding experience for me as I learn the ropes of technical leadership. I&#39;m so proud of what we&#39;ve built together
and I&#39;m excited for what the new Collector Experience team is going to do next!&lt;/p&gt;
</description>
        <pubDate>Tue, 29 Sep 2020 00:00:00 +0200</pubDate>
        <link>https://artsy.github.io/blog/2020/09/29/becoming-mobile-first-at-artsy/</link>
        <guid isPermaLink="true">https://artsy.github.io/blog/2020/09/29/becoming-mobile-first-at-artsy/</guid>
        
        
        <category>culture</category>
        
        <category>eigen</category>
        
        <category>emission</category>
        
        <category>ios</category>
        
        <category>mobile</category>
        
        <category>node</category>
        
        <category>reactnative</category>
        
        <category>teams</category>
        
        <category>tooling</category>
        
      </item>
    
  </channel>
</rss>
