[{"path":"/articles/bigergm.html","id":"exponential-random-graph-models-for-large-networks","dir":"Articles","previous_headings":"","what":"Exponential Random Graph Models for Large Networks","title":"An Introduction to Estimating Exponential Random Graph Models for Large Networks with `bigergm`","text":"Exponential Random Graph Models (ERGMs) popular class models network data. model probability observing network function network statistics, number edges triangles. ERGMs commonly employed social network analysis limitations applied large networks. main limitation likelihood function intractable large networks, making difficult estimate model parameters. time, larger networks warrant complex models capture underlying structure network. address limitations, bigergm implements scalable algorithm estimating HERGMs, generalize ERGMs allow local dependence induced non-overlapping blocks nodes network data. Introduced Schweinberger Handcock (2015), complex dependence allowed nodes within block. Thereby, obtain flexible model can capture cohesive subgroups network globally accounting dependence within subgroups local level.","code":""},{"path":"/articles/bigergm.html","id":"model-specification","dir":"Articles","previous_headings":"Exponential Random Graph Models for Large Networks","what":"Model Specification","title":"An Introduction to Estimating Exponential Random Graph Models for Large Networks with `bigergm`","text":"Consider network \\(N\\) population members encompassed set \\(\\mathcal{P} = \\{1, \\ldots, N\\}\\). Define adjacency matrix corresponding network \\(\\mathbf{Y}= (Y_{,j}) \\\\mathbb{R}^{N\\times N}\\), \\(Y_{,j}\\) entry \\(\\)-th row \\(j\\)-th column matrix. \\(Y_{,j} = 1\\), nodes \\(\\) \\(j\\) connected; otherwise, connected. vignette regard undirected networks, thus adjacency matrix symmetric, .e., \\(Y_{,j} = Y_{j, }\\). Note, however, package bigergm also supports directed networks. number blocks denoted \\(K\\) \\(\\mathbf{z}= (z_{,k}) \\\\mathbb{R}^{N\\times K}\\) block membership matrix entries \\(z_{,k}\\) equal 1 node \\(\\) belongs block \\(k\\) 0 otherwise. Let \\(\\mathbf{Y}_{k,l}\\) submatrix \\(\\mathbf{Y}\\) connections blocks \\(k\\) \\(l\\), .e., matrix including connections population members \\(\\) \\(j \\\\mathcal{P}\\) \\(z_{,k} = z_{j,l}= 1\\). submatrix \\(\\mathbf{Y}_{k,k}\\) \\(\\mathbf{Y}\\) contains connections within block \\(k\\), .e., matrix including connections population members \\(\\) \\(j \\\\mathcal{P}\\) \\(z_{,k} = z_{j,k}= 1\\). Let \\(\\mathbf{x} = (x_{,p}) \\\\mathbb{R}^{N\\times p}\\) matrix nodal covariates, \\(p\\) number covariates \\(x_{,p}\\) refers \\(p\\)th nodal covariate population member \\(\\). context bigergm, assume nodal covariates categorical. Generally, refer random variables capitalized letters realizations lowercase letters. Given notation, probability observing network \\(\\mathbf{Y}\\) given block membership matrix \\(\\mathbf{Z}\\) given : \\[ \\mathbf{P}_\\theta(\\mathbf{Y} = \\mathbf{y} | \\mathbf{Z} = \\mathbf{z},\\mathbf{X} = \\mathbf{x}) = \\prod_{k \\neq l} \\mathbf{P}_{\\alpha}(\\mathbf{Y}_{k,l} | \\mathbf{Z} = \\mathbf{z}, \\mathbf{X} = \\mathbf{x}) \\prod_{k} \\mathbf{P}_{\\beta}(\\mathbf{Y}_{k,k} | \\mathbf{Z} = \\mathbf{z}, \\mathbf{X} = \\mathbf{x}), \\] \\(\\mathbf{P}_{\\alpha}(\\mathbf{Y}_{k,l} | \\mathbf{Z} = \\mathbf{z})\\) probability observing edges blocks \\(k\\) \\(l\\) given \\(\\mathbf{z}\\) \\(\\mathbf{P}_{\\beta}(\\mathbf{Y}_{k,k} | \\mathbf{Z} = \\mathbf{z})\\) probability observing edges within block \\(k\\) given \\(\\mathbf{z}\\). parameter vectors \\(\\alpha\\) \\(\\beta\\) coefficients -block within-block networks, respectively. two models specified sketched next two paragraphs.","code":""},{"path":"/articles/bigergm.html","id":"between-block-model","dir":"Articles","previous_headings":"Exponential Random Graph Models for Large Networks > Model Specification","what":"Between-block Model","title":"An Introduction to Estimating Exponential Random Graph Models for Large Networks with `bigergm`","text":"probability model edges population members blocks \\(k\\) \\(l\\), employ network model assuming dyadic independence edges: \\[ \\mathbf{P}_{\\alpha}(\\mathbf{Y}_{k,l} = \\mathbf{y}_{k,l} | \\mathbf{Z} = \\mathbf{z}, \\mathbf{X} = \\mathbf{x})  = \\prod_{(,j) \\text{; } z_{ik} = 1 \\text{, } z_{jl} = 1} \\mathbf{P}_{\\alpha}(Y_{,j}  = y_{,j} | \\mathbf{Z} = \\mathbf{z}, \\mathbf{X} = \\mathbf{x}), \\] \\[ \\mathbf{P}_{\\alpha}(Y_{,j} = y_{,j} | \\mathbf{Z} = \\mathbf{z}, \\mathbf{X} = \\mathbf{x}) = (\\pi_{k,l}(\\alpha, \\mathbf{x}))^{y_{,j}} (1 - \\pi_{k,l}(\\alpha, \\mathbf{x}))^{1 - y_{,j}} \\] probability distribution Bernoulli distribution parameter \\(\\pi_{k,l}(\\alpha, \\mathbf{x})\\) evaluated \\(y_{,j}\\). parameter \\(\\pi_{k,l}(\\alpha, \\mathbf{x})\\) probability observing edge nodes \\(\\) \\(j\\) \\(z_{,k} = z_{j,l} = 1\\) different forms: standard Stochastic Block Model (SBM), probability observing edge nodes \\(\\) \\(j\\) given \\(\\alpha_{k,l}\\). Extending simplistic model, current implementation allows usage nodematch statistics include nodal covariates \\(\\mathbf x\\) model, implying following probability \\(y_{,j}\\) \\(z_{,k} = z_{j,l} = 1\\): \\[ \\pi_{k,l}(\\alpha, \\mathbf{x}) = \\text{logit}^{-1}\\left(\\alpha + \\sum_{p = 1}^P \\alpha_p \\, \\mathbb{}\\left(x_{,p} = x_{j,p}\\right) \\right), \\] parameters (\\(\\alpha\\) \\(\\alpha_p\\) \\(p = 1, \\ldots, P\\)) can vary pair blocks \\(k\\) \\(l\\).","code":""},{"path":"/articles/bigergm.html","id":"within-block-model","dir":"Articles","previous_headings":"Exponential Random Graph Models for Large Networks > Model Specification","what":"Within-block Model","title":"An Introduction to Estimating Exponential Random Graph Models for Large Networks with `bigergm`","text":"probability observing edges within block \\(k\\) modeled function network statistics, number edges triangles within block \\(k\\). specify within-block networks exponential-family random graph models: \\[ \\mathbf{P}_{\\beta}(\\mathbf{Y}_{k,k} = \\mathbf{y}_{k,k} | \\mathbf{Z} = \\mathbf{z}, \\mathbf{X} = \\mathbf{x}) = \\exp\\left(\\beta^\\top \\mathbf{s}(\\mathbf{y}_{k,k}, \\mathbf{x})\\right)/ c(\\beta, \\mathbf{z}, \\mathbf{x}), \\] \\(\\mathbf{s}(\\mathbf{y}_{k,k}, \\mathbf{x})\\) vector sufficient statistics counting, e.g., edges within block \\(k\\) \\(c(\\beta, \\mathbf{z}, \\mathbf{x})\\) normalizing constant guaranteeing probability distribution sums one. Examples network statistics include number edges, triangles, degree statistics (see Morris, Handcock, Hunter (2008) references therein).","code":""},{"path":"/articles/bigergm.html","id":"estimation","dir":"Articles","previous_headings":"Exponential Random Graph Models for Large Networks","what":"Estimation","title":"An Introduction to Estimating Exponential Random Graph Models for Large Networks with `bigergm`","text":"Since block membership matrix \\(\\mathbf{z}\\) usually unobserved, estimate . Therefore, assume now random block membership matrix \\(\\mathbf{Z}\\) latent variable following multinomial distribution: \\[ \\mathbf{Z} \\sim \\text{Multinomial}(1; \\gamma_1, \\ldots, \\gamma_K), \\] \\(\\gamma_k\\) marginal probability node belongs block \\(k\\) \\(k = 1, \\ldots, K\\). Given context, model estimated two steps algorithm proposed Babkin, Stewart, Schweinberger (2020): Recover block membership matrix \\(\\mathbf{Z}\\) maximizing lower bound likelihood observed network \\(\\mathbf{Y}\\) (see Babkin, Stewart, Schweinberger (2020) Vu, Hunter, Schweinberger (2013) details). Given estimated block membership matrix \\(\\hat{\\mathbf{Z}}\\), estimate coefficients \\(\\alpha\\) \\(\\beta\\) maximizing pseudo-likelihood observed network \\(\\mathbf{Y}\\). pseudo-likelihood observed network \\(\\mathbf{Y}\\) given estimated block membership matrix \\(\\hat{\\mathbf{Z}}\\) equivalent likelihood logistic regression model can, therefore, estimated standard optimization algorithms. step, entire computational machinery implemented ergm package used. However, note first step unnecessary block membership matrix known. package bigergm implements scalable algorithm estimating HERGMs even large networks exploiting structure model network data (details provided Martínez Dahbura et al. (2021) Fritz et al. (2024)).","code":""},{"path":"/articles/bigergm.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"An Introduction to Estimating Exponential Random Graph Models for Large Networks with `bigergm`","text":"can install CRAN version bigergm running following command:","code":"install.packages(\"bigergm\")"},{"path":"/articles/bigergm.html","id":"a-simple-example","dir":"Articles","previous_headings":"","what":"A simple example","title":"An Introduction to Estimating Exponential Random Graph Models for Large Networks with `bigergm`","text":"Let’s start simple example using toy network included package. toy network small network clear community structure, helpful testing package.  visible network cluster community structure. Although artificial network, often observe community structures real-world social networks. Exploiting stylized fact, model way population members network get connected differently connections across within communities: Connections across communities happen luck, influenced homophily Connections within communities also consider interdependencies among links. example, probability population members \\(\\) \\(j\\) get connected may influenced third population member \\(k\\). estimate Exponential Random Graph model local dependence, first need specify model formula specifies model. described previous section, model consists two parts: -block model within-block model. ease step, parts specified one formula similar specifying model ergm::ergm(). terms induce dependence excluded block model, within block model includes terms. following example, include number edges, number triangles, nodematch statistics nodal covariates x y model. Assuming covariate ‘x’ first covariate ‘y’ second covariate, probability observing \\(Y_{,j}\\) \\(z_{,k} = z_{j,l} = 1\\) specified : \\[ \\pi_{k,l}(\\alpha, \\mathbf{x}) = \\text{logit}^{-1}\\left(\\alpha_0 + \\alpha_{2}\\, \\mathbb{}(x_{,1} = x_{j,1}) + \\alpha_2\\, \\mathbb{}(x_{,2} = x_{j,2})\\right) \\] sufficient statistics within-block model : \\[ \\mathbf{s}(\\mathbf{y}_{k,k}, \\mathbf{x}) = \\left(\\sum_{<j} y_{,j}, \\sum_{<j} \\mathbb{}(x_{1,} = x_{1,j})\\, y_{,j}, \\sum_{<j} \\mathbb{}(x_{1,} = x_{1,j})\\, y_{,j}, \\sum_{<j}\\sum_{h \\neq ,j} y_{,j}\\, y_{,h}\\, y_{h,j}\\right). \\] can estimate specified model bigergm() function, takes following parameters: object: formula specifying model estimate (detailed previous paragraph). See help(bigergm) providing fitted bigergm object can used continue estimation. clustering_with_features: boolean value set TRUE, algorithm consider nodal covariates first step estimation. n_blocks: Number blocks recover (explanations, \\(K\\)). n_MM_step_max: Maximum number MM algorithm steps. tol_MM_step: Threshhold convergence reached. Following Vu, Hunter, Schweinberger (2013), stop algorithm relative change lower bound objective function less tol_MM_step. estimate_parameters: boolean value set TRUE, algorithm estimate parameters block recovery step. check_block_membership: boolean value set TRUE, algorithm keep track block memberships MM iteration. parameters can specify, detailed documentation (see help(bigergm)). can plot estimated objective function first estimation step recovering latent community structure iterations. allows us check whether step converged.  result indicates clustering step converged early stage. Note number iterations need perform (n_MM_step_max) varies depending network’s size clarity community structure. convergence lower bound , however, guarantee convergence clustering step unique maximizer. Therefore, restarting algorithm different initializations may advisable practice. can check clustering result plotting network nodes colored estimated block membership. edges grey two population members different blocks black otherwise.  parameter estimates \\(\\alpha\\) \\(\\beta\\) may inspected using summary() function. Currently, nodematch() terms supported way include covariates model.","code":"# Load the network object. data(toyNet) # Plot the network. plot(toyNet, vertex.col = rep(c(\"tomato\", \"steelblue\", \"darkgreen\", \"black\"),                         each = toyNet$gal$n/4)) model_formula <- toyNet ~ edges + nodematch(\"x\") + nodematch(\"y\") + triangle res <-bigergm(     # The model you would like to estimate     object = model_formula,     # The number of blocks     n_blocks =  4, initialization = toyNet%v% \"block\",     # The maximum number of MM algorithm steps     n_MM_step_max = 100,     # The tolarence for the MM algorithm     tol_MM_step = 1e-6,     # Perform parameter estimation after the block recovery step     estimate_parameters = TRUE,     # Indicate that clustering must take into account nodematch on characteristics     clustering_with_features = TRUE,     # Keep track of block memberships at each EM iteration     check_block_membership = TRUE ) plot(1:length(res$MM_lower_bound),      res$MM_lower_bound, type = \"l\", xlab = \"Iterations\", ylab = \"Lower Bound\") plot(res) # For the between networks summary(res$est_between) #>  Results: #>  #>             Estimate Std. Error MCMC % z value Pr(>|z|)     #> edges       -4.21749    0.07482      0 -56.369   <1e-04 *** #> nodematch.x  0.78273    0.16144      0   4.848   <1e-04 *** #> nodematch.y  0.38854    0.18433      0   2.108    0.035 *   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Warning:  The standard errors are based on naive pseudolikelihood and are suspect. Set control.ergm$MPLE.covariance.method='Godambe' for a simulation-based approximation of the standard errors. #>  #>      Null Pseudo-deviance: 2576  on 8  degrees of freedom #>  Residual Pseudo-deviance: 2551  on 5  degrees of freedom #>   #> AIC: 2557  BIC: 2558  (Smaller is better. MC Std. Err. = NA) # For the within networks summary(res$est_within) #> Call: #> ergm::ergm(formula = within_formula, offset.coef = offset.coef,  #>     estimate = method, control = control) #>  #> Maximum Pseudolikelihood Results: #>  #>             Estimate Std. Error MCMC % z value Pr(>|z|)     #> edges       -1.80056    0.06660      0 -27.036   <1e-04 *** #> nodematch.x  0.86683    0.10351      0   8.375   <1e-04 *** #> nodematch.y  0.96478    0.10368      0   9.305   <1e-04 *** #> triangle     0.14615    0.01744      0   8.382   <1e-04 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Warning:  The standard errors are based on naive pseudolikelihood and are suspect. Set control.ergm$MPLE.covariance.method='Godambe' for a simulation-based approximation of the standard errors. #>  #>      Null Pseudo-deviance: 6793  on 4900  degrees of freedom #>  Residual Pseudo-deviance: 5154  on 4896  degrees of freedom #>   #> AIC: 5162  BIC: 5188  (Smaller is better. MC Std. Err. = 0)"},{"path":"/articles/bigergm.html","id":"simulation","dir":"Articles","previous_headings":"","what":"Simulation","title":"An Introduction to Estimating Exponential Random Graph Models for Large Networks with `bigergm`","text":"can simulate networks local dependence using bigergm () simulate_bigergm() functions. simulate.bigergm() function wrapper around simulate_bigergm() function particular fitted bigergm object. apply simulate.bigergm() function, need provide fitted bigergm object. simulate_bigergm() function allows simulate networks local dependence scratch. function requires coefficients within connections, formula model, number simulations return, output format. Depending output format, function returns list network statistics within connections, adjacency matrix simulated network, network object . simulating network, can plot assess whether community structure preserved.","code":"simulate(res, seed = 1) #>  Network attributes: #>   vertices = 200  #>   directed = FALSE  #>   hyper = FALSE  #>   loops = FALSE  #>   multiple = FALSE  #>   bipartite = FALSE  #>   total edges= 1464  #>     missing edges= 0  #>     non-missing edges= 1464  #>  #>  Vertex attribute names:  #>     block vertex.names x y  #>  #>  Edge attribute names not shown sim_net <- bigergm::simulate_bigergm(   formula = model_formula,   # The coefficients for the between connections   coef_between = res$est_between$coefficients,    # The coefficients for the within connections   coef_within = res$est_within$coefficients,   # Number of simulations to return   nsim = 1,   # If `stats` a list with network statistics    # for the between and within connections is returned   output = \"network\" ) plot(sim_net)"},{"path":"/articles/bigergm.html","id":"goodness-of-fit","dir":"Articles","previous_headings":"","what":"Goodness-of-fit","title":"An Introduction to Estimating Exponential Random Graph Models for Large Networks with `bigergm`","text":"Following estimation, consider evaluating goodness--fit model. line ERGM literature, provide goodness--fit assessment evaluates good simulations model fit observed network. provide function gof() carry task: parameter control_within used control MCMC simulation carried simulate model. details refer help(ergm::control.simulate.formula). function evaluates following metrics hundred simulated observed networks: network statistics used fit formula provided, normalized network statistics (network statistics normalized around observed statistics), degree distribution, geodesic distance, edgewise shared partners. function bigergm::gof_bigergm() returns list data frames matrices, allowing create plots match needs flexibly. example plot degree distribution log scale.  Alternatively, can use plot() function visualize goodness--fit results. Three plots generated checking whether estimated model can adequately capture degree distribution, edgewise-shared partner distribution, geodesic distances observed network. fourth plot, simulated network statistics plotted normalized around observed statistics. good fit, values around zero. plots, red line represents observed network, boxplot represents simulated networks.","code":"gof_res <- gof(   # The object returned by bigergm::bigergm()   object = res,   # The number of simulations to use   nsim = 100,    # Compute the geodesic distance for the observed and each simulated network   compute_geodesic_distance = TRUE,   # Set a seed for reproducibility   seed = 1234,   # Start at the observed network   start_from_observed = TRUE,    # The control parameters for the simulation   control_within = ergm::control.simulate.formula(MCMC.burnin = 1000, MCMC.interval = 1000) ) degree_gof <-    gof_res$simulated$degree_dist %>%   dplyr::group_by(degree) %>%   dplyr::summarise(log_mean_share = mean(log(share)),                    log_sd_share = sd(log(share))) %>%   dplyr::ungroup() plot(degree_gof$degree, degree_gof$log_mean_share,      xlab = \"Degree\", ylab = \"Log Prop. of Nodes\",      ylim = c(-5.5,-1.8), xlim = c(6,20), type = \"l\", lty = 2) lines(degree_gof$degree, degree_gof$log_mean_share+ 1.96 * degree_gof$log_sd_share, type = \"l\", lty = 2) lines(degree_gof$degree, degree_gof$log_mean_share- 1.96 * degree_gof$log_sd_share, type = \"l\", lty = 2) tmp_info <- gof_res$original$degree_dist %>%    dplyr::filter(share > 0 & degree < 22) lines(tmp_info$degree, log(tmp_info$share), lty = 1) plot(gof_res)"},{"path":"/articles/bigergm.html","id":"when-you-work-with-large-networks","dir":"Articles","previous_headings":"","what":"When you work with large networks","title":"An Introduction to Estimating Exponential Random Graph Models for Large Networks with `bigergm`","text":"like estimate bigergm large network (say, number nodes \\(\\geq\\) 50,000): Select features sparse enough fit memory. Covariates gender race dense construct feature matrices. non-negligible limitation algorithm solved future. Use Python’s infomap initialize clusters. much faster implement cluster initialization R functions igraph::cluster_infomap(). Set use_infomap_python = TRUE bigergm::bigergm(). MM estimation seem converged inspecting lower bound plot, can continue iterating passing bigergm class object bigergm::bigergm() follows (parameters number MM iterations inherited previous estimation unless specified). can also set parameter only_use_preprocessed = TRUE, want preprocess start estimation different initial value.","code":"res_second <-   bigergm::bigergm(object = res)"},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Shota Komatsu. Author. Juan Nelson Martínez Dahbura. Author. Takanori Nishida. Author. Angelo Mele. Author. Cornelius Fritz. Author, maintainer. Michael Schweinberger. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Komatsu S, Martínez Dahbura J, Nishida T, Mele , Fritz C, Schweinberger M (2024). bigergm: Fit, Simulate, Diagnose Hierarchical Exponential-Family Models Big Networks. R package version 1.2.0.","code":"@Manual{,   title = {bigergm: Fit, Simulate, and Diagnose Hierarchical Exponential-Family Models for Big Networks},   author = {Shota Komatsu and Juan Nelson {Martínez Dahbura} and Takanori Nishida and Angelo Mele and Cornelius Fritz and Michael Schweinberger},   year = {2024},   note = {R package version 1.2.0}, }"},{"path":"/index.html","id":"bigergm-","dir":"","previous_headings":"","what":"Fit, Simulate, and Diagnose Hierarchical Exponential-Family Models for Big Networks","title":"Fit, Simulate, and Diagnose Hierarchical Exponential-Family Models for Big Networks","text":"toolbox analyzing simulating large networks based hierarchical exponential-family random graph models (HERGMs).’bigergm’ implements estimation large networks efficiently building ‘lighthergm’ ‘hergm’ packages. Moreover, package contains tools simulating networks local dependence assess goodness--fit.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Fit, Simulate, and Diagnose Hierarchical Exponential-Family Models for Big Networks","text":"Install released version usethis CRAN:","code":"install.packages(\"bigergm\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Fit, Simulate, and Diagnose Hierarchical Exponential-Family Models for Big Networks","text":"See vignette detailed introduction package.","code":""},{"path":"/reference/ari.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the adjusted rand index (ARI) between two clusterings — ari","title":"Compute the adjusted rand index (ARI) between two clusterings — ari","text":"function computes adjusted rand index (ARI) true estimated block membership (definition can found https://en.wikipedia.org/wiki/Rand_index). adjusted rand index used measure association two group membership vectors. similar two partitions z_star z , closer ARI 1.","code":""},{"path":"/reference/ari.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the adjusted rand index (ARI) between two clusterings — ari","text":"","code":"ari(z_star, z)"},{"path":"/reference/ari.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the adjusted rand index (ARI) between two clusterings — ari","text":"z_star true block membership z estimated block membership","code":""},{"path":"/reference/ari.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the adjusted rand index (ARI) between two clusterings — ari","text":"adjusted rand index","code":""},{"path":"/reference/ari.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the adjusted rand index (ARI) between two clusterings — ari","text":"","code":"data(toyNet) set.seed(123) ari(z_star = toyNet%v% \"block\", z = sample(c(1:4),size = 200,replace = TRUE)) #> [1] 0.002839778"},{"path":"/reference/bali.html","id":null,"dir":"Reference","previous_headings":"","what":"Bali terrorist network — bali","title":"Bali terrorist network — bali","text":"network corresponds contacts 17 terrorists carried bombing Bali, Indonesia 2002. network taken Koschade (2006).","code":""},{"path":"/reference/bali.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bali terrorist network — bali","text":"","code":"bali"},{"path":"/reference/bali.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Bali terrorist network — bali","text":"statnet's network class object.","code":""},{"path":"/reference/bali.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bali terrorist network — bali","text":"Koschade, S. (2006). social network analysis Jemaah Islamiyah: applications counter-terrorism intelligence. Studies Conflict Terrorism, 29, 559--575.","code":""},{"path":"/reference/bigergm.html","id":null,"dir":"Reference","previous_headings":"","what":"bigergm: Exponential-family random graph models for large networks with local dependence — bigergm","title":"bigergm: Exponential-family random graph models for large networks with local dependence — bigergm","text":"function bigergm estimates simulates three classes exponential-family random graph models large networks local dependence: p_1 model Holland Leinhardt (1981) exponential-family form extensions Vu, Hunter, Schweinberger (2013), Schweinberger, Petrescu-Prahova, Vu (2014), Dahbura et al. (2021), Fritz et al. (2024) directed undirected random graphs additional model terms, without covariates. stochastic block model Snijders Nowicki (1997) Nowicki Snijders (2001) exponential-family form. exponential-family random graph models local dependence Schweinberger Handcock (2015), without covariates. exponential-family random graph models local dependence replace long-range dependence conventional exponential-family random graph models short-range dependence. Therefore, exponential-family random graph models local dependence replace strong dependence conventional exponential-family random graph models weak dependence, reducing problem model degeneracy (Handcock, 2003; Schweinberger, 2011) improving goodness--fit (Schweinberger Handcock, 2015). addition, exponential-family random graph models local dependence satisfy weak form self-consistency sense models self-consistent neighborhood sampling (Schweinberger Handcock, 2015), enables consistent estimation neighborhood-dependent parameters (Schweinberger Stewart, 2017; Schweinberger, 2017).","code":""},{"path":"/reference/bigergm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"bigergm: Exponential-family random graph models for large networks with local dependence — bigergm","text":"","code":"bigergm(   object,   add_intercepts = FALSE,   n_blocks = NULL,   n_cores = 1,   blocks = NULL,   estimate_parameters = TRUE,   verbose = 0,   n_MM_step_max = 100,   tol_MM_step = 1e-04,   initialization = \"infomap\",   use_infomap_python = FALSE,   virtualenv_python = \"r-bigergm\",   seed_infomap = NULL,   weight_for_initialization = 1000,   seed = NULL,   method_within = \"MPLE\",   control_within = ergm::control.ergm(),   clustering_with_features = TRUE,   compute_pi = FALSE,   check_alpha_update = FALSE,   check_blocks = FALSE,   cache = NULL,   return_checkpoint = TRUE,   only_use_preprocessed = FALSE,   ... )"},{"path":"/reference/bigergm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"bigergm: Exponential-family random graph models for large networks with local dependence — bigergm","text":"object R formula object bigergm class object. formula given, function estimates new model specified . needs form y ~ <model terms>, y network object. details possible <model terms>, see ergmTerm Morris, Handcock Hunter (2008). terms induce dependence excluded block model, within block model includes terms. pass bigergm class object function, continue previous MM step. Note block allocation (either provided parameter blocks estimated first step) saved vertex.attribute block network. attribute can also used specified formula. L-ergmTerm supported enable size-dependent coefficients within-blocks model. Note, however, size-dependent parameters terms included -blocks model, intercept linear model provided L-ergmTerm include intercept. See second example demonstration. add_intercepts Boolean value indicate whether adequate intercepts added provided formula model first stage estimation nested model estimated model second stage estimation. n_blocks number blocks. must specified user. pass bigergm class object function, specify argument. n_cores number CPU cores use. blocks pre-specified block memberships node. NULL, latent community structure estimated, assuming number communities n_blocks. estimate_parameters TRUE, clustering parameter estimation implemented. FALSE, clustering executed. verbose logical integer: TRUE/1, program print additional information progress estimation simulation. higher value yields lower level information. n_MM_step_max maximum number MM iterations. Currently, early stopping criteria introduced. Thus n_MM_step_max MM iterations exactly implemented. tol_MM_step Tolerance regarding relative change lower bound likelihood used decide convergence clustering step initialization blocks initialized. infomap (default), igraph' Python's infomap implemented. random, initial clusters randomly uniformally selected. spectral, spectral clustering conducted. walktrap, walktrap clustering algorithm implemented cluster_walktrap conducted. initialization vector integers length number nodes provided network (object), provided vector used initial cluster assignment. initialization string relating file path, bigergm interpret block allocations saved Python's infomap .clu format path. use_infomap_python TRUE, cluster initialization implemented using Pythons' infomap. virtualenv_python virtual environment used infomap algorithm? seed_infomap seed value (integer) infomap algorithm, can used initialize estimation blocks. weight_for_initialization weight value used cluster initialization. higher value, weight put initialized block allocation. seed seed value (integer) random number generator. method_within \"MPLE\" (default), maximum pseudolikelihood estimator implemented estimating within-block network model. \"MLE\", approximate maximum likelihood estimator conducted. \"CD\" (EXPERIMENTAL), Monte-Carlo contrastive divergence estimate returned. control_within list control parameters ergm function used estimate parameters within model. See control.ergm details. clustering_with_features TRUE, clustering implemented using discrete covariates specified formula. compute_pi TRUE, function keeps track pi matrices MM iteration. network large, strongly recommend set FALSE. check_alpha_update TRUE, function keeps track alpha matrices MM iteration. network large, strongly recommend set FALSE. check_blocks TRUE, function keeps track estimated block memberships MM iteration. cache cachem cache object used store intermediate calculations eigenvector decomposition results. return_checkpoint TRUE, function returns checkpoint list. applications, set TRUE memory space needed output issue, set FALSE. only_use_preprocessed TRUE, function uses preprocessed data previous fit continue estimation final iteration, instead estimation started provided initialization. ... Additional arguments, passed lower-level functions (mainly ergm function used estimation within-block connections).","code":""},{"path":"/reference/bigergm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"bigergm: Exponential-family random graph models for large networks with local dependence — bigergm","text":"object class 'bigergm' including results fitted model. include: call: call mode block: vector found block nodes cluster initial_block: vector initial block nodes cluster sbm_pi: Connection probabilities represented n_blocks x n_blocks matrix first stage estimation clusters MM_list_z: list cluster allocation node iteration MM_list_alpha: list posterior distributions cluster allocations nodes iteration MM_change_in_alpha: change 'alpha' iteration MM_lower_bound: vector evidence lower bounds MM algorithm alpha: matrix representing converged posterior distributions cluster allocations nodes counter_e_step: integer number indicating number iterations carried adjacency_matrix: sparse matrix representing adjacency matrix used estimation estimation_status: character stating status estimation est_within: ergm object model within cluster connections est_between: ergm object model cluster connections checkpoint: list information continue estimation (returned return_checkpoint = TRUE) membership_before_kmeans: vector found blocks nodes cluster final check bad clusters estimate_parameters: binary value parameters second step algorithm estimated ","code":""},{"path":"/reference/bigergm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"bigergm: Exponential-family random graph models for large networks with local dependence — bigergm","text":"Babkin, S., Stewart, J., Long, X., M. Schweinberger (2020). Large-scale estimation random graph models local dependence. Computational Statistics Data Analysis, 152, 1--19. Dahbura, J. N. M., Komatsu, S., Nishida, T. Mele, . (2021), ‘structural model business cards exchange networks’. https://arxiv.org/abs/2105.12704 Fritz C., Georg C., Mele ., Schweinberger M. (2024). strategic model software dependency networks. https://arxiv.org/abs/2402.13375 Handcock, M. S. (2003). Assessing degeneracy statistical models social networks. Technical report, Center Statistics Social Sciences, University Washington, Seattle.  https://csss.uw.edu/Papers/wp39.pdf Holland, P. W. S. Leinhardt (1981). exponential family probability distributions directed graphs. Journal American Statistical Association, Theory & Methods, 76, 33--65. Morris M, Handcock MS, Hunter DR (2008). Specification Exponential-Family Random Graph Models: Terms Computational Aspects. Journal Statistical Software, 24. Nowicki, K. T. . B. Snijders (2001). Estimation prediction stochastic blockstructures. Journal American Statistical Association, Theory & Methods, 96, 1077--1087. Schweinberger, M. (2011). Instability, sensitivity, degeneracy discrete exponential families. Journal American Statistical Association, Theory & Methods, 106, 1361--1370. Schweinberger, M. (2020). Consistent structure estimation exponential-family random graph models block structure. Bernoulli, 26, 1205--1233. Schweinberger, M. M. S. Handcock (2015). Local dependence random graph models: characterization, properties, statistical inference. Journal Royal Statistical Society, Series B (Statistical Methodology), 7, 647-676. Schweinberger, M., Krivitsky, P. N., Butts, C.T. J. Stewart (2020). Exponential-family models random graphs: Inference finite, super, infinite population scenarios. Statistical Science, 35, 627-662. Schweinberger, M. P. Luna (2018). HERGM: Hierarchical exponential-family random graph models. Journal Statistical Software, 85, 1--39. Schweinberger, M., Petrescu-Prahova, M. D. Q. Vu (2014). Disaster response September 11, 2001 lens statistical network analysis. Social Networks, 37, 42--55. Schweinberger, M. J. Stewart (2020). Concentration consistency results canonical curved exponential-family random graphs. Annals Statistics, 48, 374--396. Snijders, T. . B. K. Nowicki (1997). Estimation prediction stochastic blockmodels graphs latent block structure. Journal Classification, 14, 75--100. Stewart, J., Schweinberger, M., Bojanowski, M., M. Morris (2019). Multilevel network data facilitate statistical inference curved ERGMs geometrically weighted terms. Social Networks, 59, 98--119. Vu, D. Q., Hunter, D. R. M. Schweinberger (2013). Model-based clustering large networks. Annals Applied Statistics, 7, 1010--1039.","code":""},{"path":"/reference/bigergm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"bigergm: Exponential-family random graph models for large networks with local dependence — bigergm","text":"","code":"# Load an embedded network object. data(toyNet)  # Specify the model that you would like to estimate. model_formula <- toyNet ~ edges + nodematch(\"x\") + nodematch(\"y\") + triangle # Estimate the model bigergm_res <- bigergm(   object = model_formula,   # The model you would like to estimate   n_blocks = 4,   # The number of blocks   n_MM_step_max = 10,   # The maximum number of MM algorithm steps   estimate_parameters = TRUE,   # Perform parameter estimation after the block recovery step   clustering_with_features = TRUE,   # Indicate that clustering must take into account nodematch on characteristics   check_blocks = FALSE)     # Example with N() operator    if (FALSE) { set.seed(1) # Prepare ingredients for simulating a network N <- 500 K <- 10  list_within_params <- c(1, 2, 2,-0.5) list_between_params <- c(-8, 0.5, -0.5) formula <- g ~ edges + nodematch(\"x\") + nodematch(\"y\")  + N(~edges,~log(n)-1)  memb <- sample(1:K,prob = c(0.1,0.2,0.05,0.05,0.10,0.1,0.1,0.1,0.1,0.1),                 size = N, replace = TRUE) vertex_id <- as.character(11:(11 + N - 1))  x <- sample(1:2, size = N, replace = TRUE) y <- sample(1:2, size = N, replace = TRUE)   df <- tibble::tibble(   id = vertex_id,   memb = memb,   x = x,   y = y ) g <- network::network.initialize(n = N, directed = FALSE) g %v% \"vertex.names\" <- df$id g %v% \"block\" <- df$memb g %v% \"x\" <- df$x g %v% \"y\" <- df$y  # Simulate a network g_sim <-   simulate_bigergm(     formula = formula,     coef_within = list_within_params,     coef_between = list_between_params,     nsim = 1,      control_within = control.simulate.formula(MCMC.burnin = 200000))  estimation <- bigergm(update(formula,new = g_sim~.), n_blocks = 10,                        verbose = T) summary(estimation) }"},{"path":"/reference/bunt.html","id":null,"dir":"Reference","previous_headings":"","what":"Van de Bunt friendship network — bunt","title":"Van de Bunt friendship network — bunt","text":"Van de Bunt (1999) Van de Bunt et al. (1999) collected data friendships 32 freshmen European university 7 time points. , last time point used. directed edge student j indicates student considers student j friend\" best friend\".","code":""},{"path":"/reference/bunt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Van de Bunt friendship network — bunt","text":"","code":"bunt"},{"path":"/reference/bunt.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Van de Bunt friendship network — bunt","text":"statnet's network class object.","code":""},{"path":"/reference/bunt.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Van de Bunt friendship network — bunt","text":"Van de Bunt, G. G. (1999). Friends choice. Actor-Oriented Statistical Network Model Friendship Networks Time. Thesis Publishers, Amsterdam. Van de Bunt, G. G., Van Duijn, M. . J., T. . B. Snijders (1999). Friendship Networks Time: Actor-Oriented Statistical Network Model. Computational Mathematical Organization Theory, 5, 167--192.","code":""},{"path":"/reference/est_between.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate between-block parameters — est_between","title":"Estimate between-block parameters — est_between","text":"Function estimate -block model relying maximum likelihood estimator.","code":""},{"path":"/reference/est_between.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate between-block parameters — est_between","text":"","code":"est_between(   formula,   network,   add_intercepts = TRUE,   clustering_with_features = FALSE )"},{"path":"/reference/est_between.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate between-block parameters — est_between","text":"formula R formula object form y ~ <model terms>, y network object. network object must contain block information vertex attribute name 'block'. details possible <model terms>, see ergmTerm Morris, Handcock Hunter (2008). terms induce dependence excluded block model. network network object one vertex attribute called 'block' representing node belongs block add_intercepts Boolean value indicate whether adequate intercepts added provided formula model first stage estimation nested model estimated model second stage estimation clustering_with_features Boolean value indicate clustering carried making use covariates (important add_intercepts = TRUE)","code":""},{"path":"/reference/est_between.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate between-block parameters — est_between","text":"'ergm' object estimated model.","code":""},{"path":"/reference/est_between.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate between-block parameters — est_between","text":"Morris M, Handcock MS, Hunter DR (2008). Specification Exponential-Family Random Graph Models: Terms Computational Aspects. Journal Statistical Software, 24.","code":""},{"path":"/reference/est_between.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate between-block parameters — est_between","text":"","code":"adj <- c( c(0, 1, 0, 0, 1, 0), c(1, 0, 1, 0, 0, 1), c(0, 1, 0, 1, 1, 0), c(0, 0, 1, 0, 1, 1), c(1, 0, 1, 1, 0, 1), c(0, 1, 0, 1, 1, 0) ) adj <- matrix(data = adj, nrow = 6, ncol = 6) rownames(adj) <- as.character(1001:1006) colnames(adj) <- as.character(1001:1006)  # Use non-consecutive block names block <- c(50, 70, 95, 50, 95, 70) g <- network::network(adj, matrix.type = \"adjacency\") g %v% \"block\" <- block est <- est_between(   formula = g ~ edges,network = g,   add_intercepts = FALSE, clustering_with_features = FALSE )"},{"path":"/reference/est_within.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate a within-block network model. — est_within","title":"Estimate a within-block network model. — est_within","text":"Function estimate within-block model. pseudo-maximum likelihood monte carlo approximate maximum likelihood estimators implemented.","code":""},{"path":"/reference/est_within.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate a within-block network model. — est_within","text":"","code":"est_within(   formula,   network,   seed = NULL,   method = \"MPLE\",   add_intercepts = TRUE,   clustering_with_features = FALSE,   return_network = FALSE,   ... )"},{"path":"/reference/est_within.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate a within-block network model. — est_within","text":"formula R formula object form y ~ <model terms>, y network object. network object must contain block information vertex attribute name 'block'. details possible <model terms>, see ergmTerm Morris, Handcock Hunter (2008). L-ergmTerm supported enable size-dependent coefficients. network network object one vertex attribute called 'block' representing node belongs block seed seed value (integer) random number generator method \"MPLE\" (default), maximum pseudolikelihood estimator returned. \"MLE\", approximate maximum likelihood estimator returned. add_intercepts Boolean value indicate whether adequate intercepts added provided formula model first stage estimation nested model estimated model second stage estimation clustering_with_features Boolean value indicate clustering carried making use covariates (important add_intercepts = TRUE) return_network Boolean value indicate network object returned output. needed user wants use, e.g., gof function opposed gof.bigergm function. ... Additional arguments, passed ergm function","code":""},{"path":"/reference/est_within.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate a within-block network model. — est_within","text":"'ergm' object estimated model.","code":""},{"path":"/reference/est_within.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate a within-block network model. — est_within","text":"Morris M, Handcock MS, Hunter DR (2008). Specification Exponential-Family Random Graph Models: Terms Computational Aspects. Journal Statistical Software, 24.","code":""},{"path":"/reference/est_within.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate a within-block network model. — est_within","text":"","code":"adj <- c( c(0, 1, 0, 0, 1, 0), c(1, 0, 1, 0, 0, 1), c(0, 1, 0, 1, 1, 0), c(0, 0, 1, 0, 1, 1), c(1, 0, 1, 1, 0, 1), c(0, 1, 0, 1, 1, 0) ) adj <- matrix(data = adj, nrow = 6, ncol = 6) rownames(adj) <- as.character(1001:1006) colnames(adj) <- as.character(1001:1006)  # Use non-consecutive block names block <- c(70, 70, 70, 70, 95, 95) g <- network::network(adj, matrix.type = \"adjacency\", directed = FALSE) g %v% \"block\" <- block g %v% \"vertex.names\" <- 1:length(g %v% \"vertex.names\") est <- est_within( formula = g ~ edges,   network = g,   parallel = FALSE,   verbose = 0,   initial_estimate = NULL,   seed = NULL,   method = \"MPLE\",    add_intercepts = FALSE,   clustering_with_features = FALSE   ) #> Starting maximum pseudolikelihood estimation (MPLE): #> Obtaining the responsible dyads. #> Evaluating the predictor and response matrix. #> Maximizing the pseudolikelihood. #> Finished MPLE. #> Evaluating log-likelihood at the estimate.  #>"},{"path":"/reference/get_between_networks.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain the between-block networks defined by the block attribute. — get_between_networks","title":"Obtain the between-block networks defined by the block attribute. — get_between_networks","text":"Function return list networks, network representing within-block network block.","code":""},{"path":"/reference/get_between_networks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain the between-block networks defined by the block attribute. — get_between_networks","text":"","code":"get_between_networks(network, block)"},{"path":"/reference/get_between_networks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain the between-block networks defined by the block attribute. — get_between_networks","text":"network network object block vector integers representing block node","code":""},{"path":"/reference/get_between_networks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain the between-block networks defined by the block attribute. — get_between_networks","text":"list networks","code":""},{"path":"/reference/get_between_networks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain the between-block networks defined by the block attribute. — get_between_networks","text":"","code":"# Load an embedded network object. data(toyNet) get_within_networks(toyNet, toyNet %v% \"block\") #>  Combined 4 networks on ‘.NetworkID’/‘.NetworkName’: #>   1: n = 50, directed = FALSE, bipartite = FALSE, loops = FALSE #>   2: n = 50, directed = FALSE, bipartite = FALSE, loops = FALSE #>   3: n = 50, directed = FALSE, bipartite = FALSE, loops = FALSE #>   4: n = 50, directed = FALSE, bipartite = FALSE, loops = FALSE #>  #>  Network attributes: #>   vertices = 200  #>   directed = FALSE  #>   hyper = FALSE  #>   loops = FALSE  #>   multiple = FALSE  #>   bipartite = FALSE  #>   ergm: #>             Length Class   Mode #> constraints 2      formula call #>   total edges= 1165  #>     missing edges= 0  #>     non-missing edges= 1165  #>  #>  Vertex attribute names:  #>     .NetworkID .NetworkName block vertex.names x y  #>  #>  Edge attribute names not shown"},{"path":"/reference/get_within_networks.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain the within-block networks defined by the block attribute. — get_within_networks","title":"Obtain the within-block networks defined by the block attribute. — get_within_networks","text":"Function return list networks, network representing within-block network block.","code":""},{"path":"/reference/get_within_networks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain the within-block networks defined by the block attribute. — get_within_networks","text":"","code":"get_within_networks(network, block, combined_networks = TRUE)"},{"path":"/reference/get_within_networks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain the within-block networks defined by the block attribute. — get_within_networks","text":"network network object block vector integers representing block node combined_networks boolean indicating whether -block networks returned combined_networks object (default TRUE)","code":""},{"path":"/reference/get_within_networks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain the within-block networks defined by the block attribute. — get_within_networks","text":"list networks","code":""},{"path":"/reference/get_within_networks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain the within-block networks defined by the block attribute. — get_within_networks","text":"","code":"# Load an embedded network object. data(toyNet) get_within_networks(toyNet, toyNet %v% \"block\") #>  Combined 4 networks on ‘.NetworkID’/‘.NetworkName’: #>   1: n = 50, directed = FALSE, bipartite = FALSE, loops = FALSE #>   2: n = 50, directed = FALSE, bipartite = FALSE, loops = FALSE #>   3: n = 50, directed = FALSE, bipartite = FALSE, loops = FALSE #>   4: n = 50, directed = FALSE, bipartite = FALSE, loops = FALSE #>  #>  Network attributes: #>   vertices = 200  #>   directed = FALSE  #>   hyper = FALSE  #>   loops = FALSE  #>   multiple = FALSE  #>   bipartite = FALSE  #>   ergm: #>             Length Class   Mode #> constraints 2      formula call #>   total edges= 1165  #>     missing edges= 0  #>     non-missing edges= 1165  #>  #>  Vertex attribute names:  #>     .NetworkID .NetworkName block vertex.names x y  #>  #>  Edge attribute names not shown"},{"path":"/reference/gof.bigergm.html","id":null,"dir":"Reference","previous_headings":"","what":"Conduct Goodness-of-Fit Diagnostics on a Exponential Family Random Graph Model for big networks — gof.bigergm","title":"Conduct Goodness-of-Fit Diagnostics on a Exponential Family Random Graph Model for big networks — gof.bigergm","text":"sample graphs randomly drawn specified model.  first argument typically output call bigergm model used call one fit. default, sample consists 100 simulated networks, sample size (many settings) can changed using ergm_control argument described .","code":""},{"path":"/reference/gof.bigergm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conduct Goodness-of-Fit Diagnostics on a Exponential Family Random Graph Model for big networks — gof.bigergm","text":"","code":"# S3 method for bigergm gof(   object,   ...,   type = \"full\",   control_within = ergm::control.simulate.formula(),   seed = NULL,   nsim = 100,   compute_geodesic_distance = TRUE,   start_from_observed = TRUE,   simulate_sbm = FALSE )"},{"path":"/reference/gof.bigergm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conduct Goodness-of-Fit Diagnostics on a Exponential Family Random Graph Model for big networks — gof.bigergm","text":"object bigergm object. ... Additional arguments, passed simulate_bigergm, , turn, passes information simulate_formula. See documentation bigergm. type type evaluation perform. Can take values full within. full performs evaluation edges, within considers within-block edges. control_within MCMC parameters instance control.simulate.formula used within-block simulations. seed seed passed simulate_bigergm. NULL, random seed used. nsim number simulations employ calculating goodness fit, default 100. compute_geodesic_distance TRUE, distribution geodesic distances also computed (considerably increases computation time large networks. FALSE default.) start_from_observed TRUE, MCMC uses observed network starting point. FALSE, MCMC starts random network. simulate_sbm TRUE, -block connections simulated estimated stochastic block model first stage estimated ERGM.","code":""},{"path":"/reference/gof.bigergm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conduct Goodness-of-Fit Diagnostics on a Exponential Family Random Graph Model for big networks — gof.bigergm","text":"gof.bigergm returns list two entries. first entry 'original' another list network stats, degree distribution, edgewise-shared partner distribution, geodesic distance distribution (compute_geodesic_distance = TRUE) observed network. second entry called 'simulated' also list compiling network stats, degree distribution, edgewise-shared partner distribution, geodesic distance distribution (compute_geodesic_distance = TRUE) simulated networks.","code":""},{"path":"/reference/gof.bigergm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conduct Goodness-of-Fit Diagnostics on a Exponential Family Random Graph Model for big networks — gof.bigergm","text":"","code":"data(toyNet) # \\donttest{ # Specify the model that you would like to estimate. data(toyNet) # Specify the model that you would like to estimate. model_formula <- toyNet ~ edges + nodematch(\"x\") + nodematch(\"y\") + triangle estimate <- bigergm(model_formula,n_blocks = 4) gof_res <- gof(estimate, nsim = 100 ) plot(gof_res)     # }"},{"path":"/reference/kapferer.html","id":null,"dir":"Reference","previous_headings":"","what":"Kapferer collaboration network — kapferer","title":"Kapferer collaboration network — kapferer","text":"network corresponds collaborations 39 workers tailor shop Africa: undirected edge workers j indicates workers collaborated. network taken Kapferer (1972).","code":""},{"path":"/reference/kapferer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kapferer collaboration network — kapferer","text":"","code":"kapferer"},{"path":"/reference/kapferer.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Kapferer collaboration network — kapferer","text":"statnet's network class object.","code":""},{"path":"/reference/kapferer.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Kapferer collaboration network — kapferer","text":"Kapferer, B. (1972). Strategy Transaction African Factory. Manchester University Press, Manchester, U.K.","code":""},{"path":"/reference/plot.bigergm.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the network with the found clusters — plot.bigergm","title":"Plot the network with the found clusters — plot.bigergm","text":"function plots network found clusters. nodes colored according found clusters. Note function uses network package plotting network therefore used large networks 1-2 K vertices","code":""},{"path":"/reference/plot.bigergm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the network with the found clusters — plot.bigergm","text":"","code":"# S3 method for bigergm plot(x, ...)"},{"path":"/reference/plot.bigergm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the network with the found clusters — plot.bigergm","text":"x output bigergm function ... Additional arguments, passed lower-level functions","code":""},{"path":"/reference/py_dep.html","id":null,"dir":"Reference","previous_headings":"","what":"Install optional Python dependencies for bigergm — py_dep","title":"Install optional Python dependencies for bigergm — py_dep","text":"Install Python dependencies needed using Python implementation infomap. code uses reticulate package install Python packages infomap numpy. packages needed bigergm function use_infomap_python = TRUE else Python implementation needed.","code":""},{"path":"/reference/py_dep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install optional Python dependencies for bigergm — py_dep","text":"","code":"py_dep(envname = \"r-bigergm\", method = \"auto\", ...)"},{"path":"/reference/py_dep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install optional Python dependencies for bigergm — py_dep","text":"envname name, full path, environment Python packages installed. NULL (default), active environment set RETICULATE_PYTHON_ENV variable used; unset, r-reticulate environment used. method Installation method. default, \"auto\" automatically finds method work local environment. Change default force specific installation method. Note \"virtualenv\" method available Windows. ... Additional arguments, passed lower-level functions","code":""},{"path":"/reference/py_dep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Install optional Python dependencies for bigergm — py_dep","text":"return value, called installing Python dependencies 'infomap' 'numpy'","code":""},{"path":"/reference/reed.html","id":null,"dir":"Reference","previous_headings":"","what":"A network of friendships between students at Reed College. The data was collected by Facebook and provided as part of Traud et al. (2012) — reed","title":"A network of friendships between students at Reed College. The data was collected by Facebook and provided as part of Traud et al. (2012) — reed","text":"network friendships students Reed College. data collected Facebook provided part Traud et al. (2012)","code":""},{"path":"/reference/reed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A network of friendships between students at Reed College. The data was collected by Facebook and provided as part of Traud et al. (2012) — reed","text":"","code":"reed"},{"path":"/reference/reed.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A network of friendships between students at Reed College. The data was collected by Facebook and provided as part of Traud et al. (2012) — reed","text":"statnet's network class object. three nodal features. doorm anonymized dorm node lives. gender gender node. high.school anonymized highschool node went . year year graduation node.","code":""},{"path":"/reference/reed.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A network of friendships between students at Reed College. The data was collected by Facebook and provided as part of Traud et al. (2012) — reed","text":"Traud, Mucha, Porter (2012). Social Structure Facebook Network. Physica : Statistical Mechanics Applications, 391, 4165-4180","code":""},{"path":"/reference/rice.html","id":null,"dir":"Reference","previous_headings":"","what":"A network of friendships between students at Rice University. — rice","title":"A network of friendships between students at Rice University. — rice","text":"data collected Facebook provided part Traud et al. (2012)","code":""},{"path":"/reference/rice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A network of friendships between students at Rice University. — rice","text":"","code":"rice"},{"path":"/reference/rice.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A network of friendships between students at Rice University. — rice","text":"statnet's network class object. three nodal features. doorm anonymized dorm node lives. gender gender node. high.school anonymized highschool node went . year year graduation node.","code":""},{"path":"/reference/rice.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A network of friendships between students at Rice University. — rice","text":"Traud, Mucha, Porter (2012). Social Structure Facebook Network. Physica : Statistical Mechanics Applications, 391, 4165-4180","code":""},{"path":"/reference/simulate.bigergm.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate networks under Exponential Random Graph Models (ERGMs) under local dependence — simulate.bigergm","title":"Simulate networks under Exponential Random Graph Models (ERGMs) under local dependence — simulate.bigergm","text":"function simulates networks Exponential Random Graph Model (ERGM) local dependence parameters set according estimated model (object). See simulate_bigergm details simulation process","code":""},{"path":"/reference/simulate.bigergm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate networks under Exponential Random Graph Models (ERGMs) under local dependence — simulate.bigergm","text":"","code":"# S3 method for bigergm simulate(   object,   nsim = 1,   seed = NULL,   ...,   output = \"network\",   control_within = ergm::control.simulate.formula(),   verbose = 0 )"},{"path":"/reference/simulate.bigergm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate networks under Exponential Random Graph Models (ERGMs) under local dependence — simulate.bigergm","text":"object object class bigergm nsim number networks randomly drawn given distribution set networks. seed seed value (integer) network simulation. ... Additional arguments, passed simulate_formula. output Normally character, one \"network\" (default), \"stats\", \"edgelist\", determine output function. control_within control.simulate.formula object fine-tuning ERGM simulation within-block networks. verbose TRUE/1, program print additional information progress simulation.","code":""},{"path":"/reference/simulate.bigergm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate networks under Exponential Random Graph Models (ERGMs) under local dependence — simulate.bigergm","text":"Simulated networks, output form depends parameter output (default list networks).","code":""},{"path":"/reference/simulate_bigergm.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate networks under Exponential Random Graph Models (ERGMs) under local dependence — simulate_bigergm","title":"Simulate networks under Exponential Random Graph Models (ERGMs) under local dependence — simulate_bigergm","text":"function simulates networks Exponential Random Graph Models (ERGMs) local dependence. also option simulate within-block networks S3 method class bigergm.","code":""},{"path":"/reference/simulate_bigergm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate networks under Exponential Random Graph Models (ERGMs) under local dependence — simulate_bigergm","text":"","code":"simulate_bigergm(   formula,   coef_within,   coef_between,   network = ergm.getnetwork(formula),   control_within = ergm::control.simulate.formula(),   only_within = FALSE,   seed = NULL,   nsim = 1,   output = \"network\",   verbose = 0,   ... )"},{"path":"/reference/simulate_bigergm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate networks under Exponential Random Graph Models (ERGMs) under local dependence — simulate_bigergm","text":"formula R formula object form y ~ <model terms>, y network object. network object must contain block information vertex attribute name 'block'. details possible <model terms>, see ergmTerm Morris, Handcock Hunter (2008). terms induce dependence excluded block model, within block model includes terms. L-ergmTerm supported enable size-dependent coefficients within-blocks model. Note, however, size-dependent parameters terms included -blocks model, intercept linear model provided L-ergmTerm include intercept. See second example bigergm demonstration. coef_within vector within-block parameters. order parameters match formula. coef_between vector -block parameters. order parameters match formula without externality terms. network network object used seed network simulation (none provided, network lhs formula used). control_within auxiliary function user interface fine-tuning ERGM simulation within-block networks. only_within TRUE, within-block networks simulated. seed seed value (integer) network simulation. nsim number networks generated. output Normally character, one \"network\" (default), \"stats\", \"edgelist\", determine output format. verbose TRUE/1, program print additional information progress simulation. ... Additional arguments, passed simulate_formula.","code":""},{"path":"/reference/simulate_bigergm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate networks under Exponential Random Graph Models (ERGMs) under local dependence — simulate_bigergm","text":"Simulated networks, output form depends parameter output (default list networks).","code":""},{"path":"/reference/simulate_bigergm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulate networks under Exponential Random Graph Models (ERGMs) under local dependence — simulate_bigergm","text":"Morris M, Handcock MS, Hunter DR (2008). Specification Exponential-Family Random Graph Models: Terms Computational Aspects. Journal Statistical Software, 24.","code":""},{"path":"/reference/simulate_bigergm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate networks under Exponential Random Graph Models (ERGMs) under local dependence — simulate_bigergm","text":"","code":"data(toyNet) # Specify the model that you would like to estimate. model_formula <- toyNet ~ edges + nodematch(\"x\") + nodematch(\"y\") + triangle # Simulate network stats sim_stats <- bigergm::simulate_bigergm( formula = model_formula,   # Formula for the model coef_between = c(-4.5,0.8, 0.4), # The coefficients for the between connections coef_within = c(-1.7,0.5,0.6,0.15), # The coefficients for the within connections nsim = 10, # Number of simulations to return output = \"stats\", # Type of output )"},{"path":"/reference/toyNet.html","id":null,"dir":"Reference","previous_headings":"","what":"A toy network to play bigergm with. — toyNet","title":"A toy network to play bigergm with. — toyNet","text":"network clear cluster structure. number clusters four, cluster node belongs defined variable \"block\".","code":""},{"path":"/reference/toyNet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A toy network to play bigergm with. — toyNet","text":"","code":"toyNet"},{"path":"/reference/toyNet.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A toy network to play bigergm with. — toyNet","text":"statnet's network class object. three nodal features. block block membership node x covariate. 10 labels. y covariate. 10 labels. 1 2 variables particular meaning.","code":""},{"path":"/reference/yule.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Yule's Phi-coefficient — yule","title":"Compute Yule's Phi-coefficient — yule","text":"function computes Yule's Phi-coefficient true estimated block membership (definition can found https://en.wikipedia.org/wiki/Phi_coefficient). context, Phi Coefficient measure association two group membership vectors.","code":""},{"path":"/reference/yule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Yule's Phi-coefficient — yule","text":"","code":"yule(z_star, z)"},{"path":"/reference/yule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Yule's Phi-coefficient — yule","text":"z_star true block membership z estimated block membership","code":""},{"path":"/reference/yule.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Yule's Phi-coefficient — yule","text":"Real value Yule's Phi-coefficient true estimated block membership returned.","code":""},{"path":"/reference/yule.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Yule's Phi-coefficient — yule","text":"","code":"data(toyNet) yule(z_star = toyNet%v% \"block\",                   z = sample(c(1:4),size = 200,replace = TRUE)) #> [1] -0.002145721"}]
